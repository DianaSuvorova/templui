// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package popover

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/axzilla/templui/util"
	"strconv"
)

// Floating UI Placement (https://floating-ui.com/docs/computePosition#placement)
type Placement string

const (
	PlacementTop         Placement = "top"
	PlacementTopStart    Placement = "top-start"
	PlacementTopEnd      Placement = "top-end"
	PlacementRight       Placement = "right"
	PlacementRightStart  Placement = "right-start"
	PlacementRightEnd    Placement = "right-end"
	PlacementBottom      Placement = "bottom"
	PlacementBottomStart Placement = "bottom-start"
	PlacementBottomEnd   Placement = "bottom-end"
	PlacementLeft        Placement = "left"
	PlacementLeftStart   Placement = "left-start"
	PlacementLeftEnd     Placement = "left-end"
)

type TriggerType string

const (
	TriggerTypeHover TriggerType = "hover"
	TriggerTypeClick TriggerType = "click"
)

type Props struct {
	Class string
}

// Trigger Props - Minimal set needed to link trigger and content
type TriggerProps struct {
	ID          string // Optional ID for the trigger itself
	For         string // REQUIRED: Corresponds to the ID of the Content component
	TriggerType TriggerType
}

// Content Props - Includes Floating UI options and content styling
type ContentProps struct {
	ID               string // REQUIRED: Must match TriggerProps.For
	Class            string
	Attributes       templ.Attributes
	Placement        Placement // Use Floating UI's placement
	Offset           int       // Optional offset value (default: 8 if arrow, 4 otherwise)
	DisableClickAway bool
	DisableESC       bool
	ShowArrow        bool
	HoverDelay       int // Delay for showing on hover
	HoverOutDelay    int // Delay for hiding on hover
}

// --- Components ---

// Popover Wrapper and Portal Container
func Popover(props ...Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		var templ_7745c5c3_Var2 = []any{p.Class}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div><div id=\"popover-portal-container\" class=\"fixed inset-0 z-[9999] pointer-events-none\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Popover Trigger
func Trigger(props ...TriggerProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p TriggerProps
		if len(props) > 0 {
			p = props[0]
		}
		if p.TriggerType == "" {
			p.TriggerType = TriggerTypeClick
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<span")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.ID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 87, Col: 12}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " data-popover-trigger data-popover-for=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(p.For)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 90, Col: 26}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" data-popover-type=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(string(p.TriggerType))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 91, Col: 43}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var4.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</span>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Popover Content (renders the div directly, hidden initially)
func Content(props ...ContentProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p ContentProps
		if len(props) > 0 {
			p = props[0]
		}
		if p.Placement == "" {
			p.Placement = PlacementBottom
		}
		if p.Offset == 0 {
			if p.ShowArrow {
				p.Offset = 8
			} else {
				p.Offset = 4
			}
		}
		var templ_7745c5c3_Var9 = []any{util.TwMerge(
			"bg-background rounded-lg border text-sm shadow-lg pointer-events-auto absolute z-[9999]",
			p.Class,
		)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var9...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 114, Col: 11}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" data-popover-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 115, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\" data-popover-placement=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(string(p.Placement))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 116, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\" data-popover-offset=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(p.Offset))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 117, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\" data-popover-disable-clickaway=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.FormatBool(p.DisableClickAway))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 118, Col: 73}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\" data-popover-disable-esc=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.FormatBool(p.DisableESC))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 119, Col: 61}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\" data-popover-show-arrow=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.FormatBool(p.ShowArrow))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 120, Col: 59}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" data-popover-hover-delay=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(p.HoverDelay))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 121, Col: 55}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\" data-popover-hover-out-delay=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var18 string
		templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(p.HoverOutDelay))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 122, Col: 62}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var19 string
		templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var9).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" style=\"display: none; top: 0; left: 0;\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, p.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "><div class=\"w-full overflow-hidden\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var8.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.ShowArrow {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, " <div data-popover-arrow class=\"absolute h-2.5 w-2.5 rotate-45 bg-background border\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// --- Script ---
var handle = templ.NewOnceHandle()

func Script() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var20 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var20 == nil {
			templ_7745c5c3_Var20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var21 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<script defer src=\"https://cdn.jsdelivr.net/npm/@floating-ui/core@1/dist/floating-ui.core.umd.min.js\"></script> <script defer src=\"https://cdn.jsdelivr.net/npm/@floating-ui/dom@1/dist/floating-ui.dom.umd.min.js\"></script> <script defer nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var22 string
			templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(templ.GetNonce(ctx))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/popover/popover.templ`, Line: 148, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\">\n\t\t\t(() => {\n\t\t\t\t// Wait for Floating UI and DOM content before initializing\n\t\t\t\tconst checkFloatingUI = setInterval(() => {\n\t\t\t\t\tif (window.FloatingUIDOM && document.readyState !== 'loading') {\n\t\t\t\t\t\tclearInterval(checkFloatingUI);\n\t\t\t\t\t\tinitializePopovers();\n\t\t\t\t\t}\n\t\t\t\t}, 50);\n\n\t\t\t\tfunction initializePopovers() {\n\t\t\t\t\tconst { computePosition, autoUpdate, offset, flip, shift, arrow } = window.FloatingUIDOM;\n\n\t\t\t\t\t// Map to store active popover state and cleanup functions from autoUpdate\n\t\t\t\t\tconst activePopovers = new Map(); // Map<popoverId, { cleanup: Function | null, content: HTMLElement, trigger: HTMLElement, hoverState: object } >\n\n\t\t\t\t\t// --- Helper: Find the best element within the trigger span for positioning ---\n\t\t\t\t\tfunction findReferenceElement(triggerSpan) {\n\t\t\t\t\t\tlet triggerElement = triggerSpan;\n\t\t\t\t\t\tlet largestArea = 0;\n\t\t\t\t\t\tconst children = triggerSpan.children;\n\t\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\t\tconst child = children[i];\n\t\t\t\t\t\t\tconst rect = child.getBoundingClientRect();\n\t\t\t\t\t\t\tconst area = rect.width * rect.height;\n\t\t\t\t\t\t\tif (area > largestArea) {\n\t\t\t\t\t\t\t\tlargestArea = area;\n\t\t\t\t\t\t\t\ttriggerElement = child;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn triggerElement;\n\t\t\t\t\t}\n\n\t\t\t\t\t// --- Setup individual popover logic ---\n\t\t\t\t\tfunction setupPopover(trigger) {\n\t\t\t\t\t\tconst popoverId = trigger.dataset.popoverFor;\n\t\t\t\t\t\tif (!popoverId || activePopovers.has(popoverId)) return; // Avoid double initialization\n\n\t\t\t\t\t\tconst content = document.getElementById(popoverId);\n\t\t\t\t\t\tif (!content) {\n\t\t\t\t\t\t\tconsole.error(`Popover content element with ID '${popoverId}' not found.`);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst portalContainer = document.getElementById('popover-portal-container');\n\t\t\t\t\t\tif (!portalContainer) {\n\t\t\t\t\t\t\tconsole.error(\"Popover portal container 'popover-portal-container' not found!\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tactivePopovers.set(popoverId, {\n\t\t\t\t\t\t\tcleanup: null,\n\t\t\t\t\t\t\tcontent: content,\n\t\t\t\t\t\t\ttrigger: trigger,\n\t\t\t\t\t\t\thoverState: { hoverTimeout: null, leaveTimeout: null }\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// --- Positioning Logic (using Floating UI) ---\n\t\t\t\t\t\tfunction updatePosition() {\n\t\t\t\t\t\t\tconst referenceElement = findReferenceElement(trigger);\n\t\t\t\t\t\t\tconst arrowElement = content.querySelector('[data-popover-arrow]');\n\t\t\t\t\t\t\tconst placement = content.dataset.popoverPlacement || 'bottom';\n\t\t\t\t\t\t\tconst offsetValue = parseInt(content.dataset.popoverOffset) || (arrowElement ? 8 : 4);\n\n\t\t\t\t\t\t\t// Middleware order matters: offset first, then flip/shift, then arrow.\n\t\t\t\t\t\t\tconst middleware = [\n\t\t\t\t\t\t\t\toffset(offsetValue),\n\t\t\t\t\t\t\t\tflip({ padding: 10 }),\n\t\t\t\t\t\t\t\tshift({ padding: 10 })\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tif (arrowElement) {\n\t\t\t\t\t\t\t\tmiddleware.push(arrow({ element: arrowElement, padding: 5 }));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcomputePosition(referenceElement, content, {\n\t\t\t\t\t\t\t\tplacement: placement,\n\t\t\t\t\t\t\t\tmiddleware: middleware\n\t\t\t\t\t\t\t}).then(({ x, y, placement, middlewareData }) => {\n\t\t\t\t\t\t\t\tObject.assign(content.style, {\n\t\t\t\t\t\t\t\t\tleft: `${x}px`,\n\t\t\t\t\t\t\t\t\ttop: `${y}px`,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Arrow positioning\n\t\t\t\t\t\t\t\tif (middlewareData.arrow && arrowElement) {\n\t\t\t\t\t\t\t\t\tconst { x: arrowX, y: arrowY } = middlewareData.arrow;\n\t\t\t\t\t\t\t\t\tconst staticSide = {\n\t\t\t\t\t\t\t\t\t\ttop: 'bottom',\n\t\t\t\t\t\t\t\t\t\tright: 'left',\n\t\t\t\t\t\t\t\t\t\tbottom: 'top',\n\t\t\t\t\t\t\t\t\t\tleft: 'right',\n\t\t\t\t\t\t\t\t\t}[placement.split('-')[0]];\n\n\t\t\t\t\t\t\t\t\tObject.assign(arrowElement.style, {\n\t\t\t\t\t\t\t\t\t\tleft: arrowX != null ? `${arrowX}px` : '',\n\t\t\t\t\t\t\t\t\t\ttop: arrowY != null ? `${arrowY}px` : '',\n\t\t\t\t\t\t\t\t\t\tright: '',\n\t\t\t\t\t\t\t\t\t\tbottom: '',\n\t\t\t\t\t\t\t\t\t\t[staticSide]: '-5px', // Position arrow slightly outside\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Simplified Arrow Border Styling\n\t\t\t\t\t\t\t\t\tconst popoverStyle = window.getComputedStyle(content);\n\t\t\t\t\t\t\t\t\tconst popoverBorderColor = popoverStyle.borderColor;\n\t\t\t\t\t\t\t\t\tarrowElement.style.backgroundColor = popoverStyle.backgroundColor;\n\t\t\t\t\t\t\t\t\tarrowElement.style.borderTopColor = popoverBorderColor;\n\t\t\t\t\t\t\t\t\tarrowElement.style.borderRightColor = popoverBorderColor;\n\t\t\t\t\t\t\t\t\tarrowElement.style.borderBottomColor = popoverBorderColor;\n\t\t\t\t\t\t\t\t\tarrowElement.style.borderLeftColor = popoverBorderColor;\n\n\t\t\t\t\t\t\t\t\tswitch (staticSide) {\n\t\t\t\t\t\t\t\t\t\tcase 'top':\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderBottomColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderRightColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderTopColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderLeftColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'left':\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderTopColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderRightColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'right':\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderBottomColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tarrowElement.style.borderLeftColor = 'transparent';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// --- Open Popover ---\n\t\t\t\t\t\tfunction openPopover(isHover = false) {\n\t\t\t\t\t\t\tconst popoverData = activePopovers.get(popoverId);\n\t\t\t\t\t\t\tif (!popoverData || popoverData.cleanup) return; // Already open or not found\n\n\t\t\t\t\t\t\tportalContainer.appendChild(content);\n\t\t\t\t\t\t\tcontent.style.display = 'block';\n\t\t\t\t\t\t\tcontent.classList.remove('popover-animate-out');\n\t\t\t\t\t\t\tcontent.classList.add('popover-animate-in');\n\n\t\t\t\t\t\t\t// Start auto-updating position (returns a cleanup function)\n\t\t\t\t\t\t\tpopoverData.cleanup = autoUpdate(\n\t\t\t\t\t\t\t\tfindReferenceElement(trigger),\n\t\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t\t\tupdatePosition\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tactivePopovers.set(popoverId, popoverData);\n\n\t\t\t\t\t\t\t// Add closing listeners for click trigger\n\t\t\t\t\t\t\tif (!isHover) {\n\t\t\t\t\t\t\t\tif (content.dataset.popoverDisableClickaway !== 'true') {\n\t\t\t\t\t\t\t\t\tpopoverData.clickAwayListener = (e) => {\n\t\t\t\t\t\t\t\t\t\tif (!trigger.contains(e.target) && !content.contains(e.target)) {\n\t\t\t\t\t\t\t\t\t\t\tclosePopover();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t// Timeout needed to prevent the click event that opened the popover from immediately closing it.\n\t\t\t\t\t\t\t\t\tsetTimeout(() => document.addEventListener('click', popoverData.clickAwayListener), 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (content.dataset.popoverDisableEsc !== 'true') {\n\t\t\t\t\t\t\t\t\tpopoverData.escListener = (e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key === 'Escape') {\n\t\t\t\t\t\t\t\t\t\t\tclosePopover();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tdocument.addEventListener('keydown', popoverData.escListener);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// --- Close Popover ---\n\t\t\t\t\t\tfunction closePopover(immediate = false) {\n\t\t\t\t\t\t\tconst popoverData = activePopovers.get(popoverId);\n\t\t\t\t\t\t\tif (!popoverData || !popoverData.cleanup) return; // Already closed or not found\n\n\t\t\t\t\t\t\t// Stop auto-updating position\n\t\t\t\t\t\t\tpopoverData.cleanup();\n\t\t\t\t\t\t\tpopoverData.cleanup = null;\n\n\t\t\t\t\t\t\t// Remove closing listeners\n\t\t\t\t\t\t\tif (popoverData.clickAwayListener) {\n\t\t\t\t\t\t\t\tdocument.removeEventListener('click', popoverData.clickAwayListener);\n\t\t\t\t\t\t\t\tpopoverData.clickAwayListener = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (popoverData.escListener) {\n\t\t\t\t\t\t\t\tdocument.removeEventListener('keydown', popoverData.escListener);\n\t\t\t\t\t\t\t\tpopoverData.escListener = null;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst cleanupDOM = () => {\n\t\t\t\t\t\t\t\tcontent.style.display = 'none';\n\t\t\t\t\t\t\t\tcontent.classList.remove('popover-animate-in', 'popover-animate-out');\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (immediate) {\n\t\t\t\t\t\t\t\tcleanupDOM();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontent.classList.remove('popover-animate-in');\n\t\t\t\t\t\t\t\tcontent.classList.add('popover-animate-out');\n\t\t\t\t\t\t\t\tsetTimeout(cleanupDOM, 150); // Delay matches animation duration\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// --- Attach Trigger Event Listeners ---\n\t\t\t\t\t\tconst triggerType = trigger.dataset.popoverType || 'click';\n\n\t\t\t\t\t\tif (triggerType === 'click') {\n\t\t\t\t\t\t\ttrigger.addEventListener('click', (e) => {\n\t\t\t\t\t\t\t\tconst popoverData = activePopovers.get(popoverId);\n\t\t\t\t\t\t\t\tif (popoverData && popoverData.cleanup) {\n\t\t\t\t\t\t\t\t\tclosePopover();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\topenPopover();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (triggerType === 'hover') {\n\t\t\t\t\t\t\tconst popoverData = activePopovers.get(popoverId);\n\n\t\t\t\t\t\t\ttrigger.addEventListener('mouseenter', () => {\n\t\t\t\t\t\t\t\tclearTimeout(popoverData.hoverState.leaveTimeout);\n\t\t\t\t\t\t\t\tconst hoverDelay = parseInt(content.dataset.popoverHoverDelay) || 100;\n\t\t\t\t\t\t\t\tpopoverData.hoverState.hoverTimeout = setTimeout(() => openPopover(true), hoverDelay);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\ttrigger.addEventListener('mouseleave', (e) => {\n\t\t\t\t\t\t\t\tclearTimeout(popoverData.hoverState.hoverTimeout);\n\t\t\t\t\t\t\t\tconst hoverOutDelay = parseInt(content.dataset.popoverHoverOutDelay) || 200;\n\t\t\t\t\t\t\t\tpopoverData.hoverState.leaveTimeout = setTimeout(() => {\n\t\t\t\t\t\t\t\t\t// Only close if mouse didn't enter the popover content itself\n\t\t\t\t\t\t\t\t\tconst relatedTarget = e.relatedTarget;\n\t\t\t\t\t\t\t\t\tif (!content.contains(relatedTarget)) {\n\t\t\t\t\t\t\t\t\t\tclosePopover();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, hoverOutDelay);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// Keep open when hovering over content\n\t\t\t\t\t\t\tcontent.addEventListener('mouseenter', () => {\n\t\t\t\t\t\t\t\tclearTimeout(popoverData.hoverState.leaveTimeout);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcontent.addEventListener('mouseleave', (e) => {\n\t\t\t\t\t\t\t\tconst hoverOutDelay = parseInt(content.dataset.popoverHoverOutDelay) || 200;\n\t\t\t\t\t\t\t\tpopoverData.hoverState.leaveTimeout = setTimeout(() => {\n\t\t\t\t\t\t\t\t\t// Only close if mouse didn't enter the trigger itself\n\t\t\t\t\t\t\t\t\tconst relatedTarget = e.relatedTarget;\n\t\t\t\t\t\t\t\t\tif (!trigger.contains(relatedTarget)) {\n\t\t\t\t\t\t\t\t\t\tclosePopover();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, hoverOutDelay);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} // End setupPopover\n\n\t\t\t\t\t// --- Initial Setup: Find and initialize all triggers on the page ---\n\t\t\t\t\tdocument.querySelectorAll('[data-popover-trigger]').forEach(setupPopover);\n\n\t\t\t\t\t// --- HTMX Integration ---\n\t\t\t\t\tdocument.body.addEventListener('htmx:afterSwap', (event) => {\n\t\t\t\t\t\tconst targetElement = event.detail.target || event.target;\n\t\t\t\t\t\tif (targetElement && targetElement.querySelectorAll) {\n\t\t\t\t\t\t\t// Find and initialize any new triggers within the swapped content\n\t\t\t\t\t\t\ttargetElement.querySelectorAll('[data-popover-trigger]').forEach(setupPopover);\n\t\t\t\t\t\t\t// Also initialize if the swapped element itself is a trigger\n\t\t\t\t\t\t\tif (targetElement.matches('[data-popover-trigger]')) {\n\t\t\t\t\t\t\t\tsetupPopover(targetElement);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tdocument.body.addEventListener('htmx:beforeSwap', (event) => {\n\t\t\t\t\t\tlet containerToRemove = event.detail.target || event.detail.elt;\n\t\t\t\t\t\tif (containerToRemove && containerToRemove.querySelectorAll) {\n\t\t\t\t\t\t\t// Close popovers whose trigger is *inside* the element being removed\n\t\t\t\t\t\t\tcontainerToRemove.querySelectorAll('[data-popover-trigger]').forEach(trigger => {\n\t\t\t\t\t\t\t\tconst popoverId = trigger.dataset.popoverFor;\n\t\t\t\t\t\t\t\tif (popoverId && activePopovers.has(popoverId)) {\n\t\t\t\t\t\t\t\t\tconst popoverData = activePopovers.get(popoverId);\n\t\t\t\t\t\t\t\t\tif(popoverData.cleanup) closePopover.call({popoverId: popoverId}, true); // Close immediately\n\t\t\t\t\t\t\t\t\tactivePopovers.delete(popoverId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t// Close popover if the element being removed *is* a trigger itself\n\t\t\t\t\t\t\tif (containerToRemove.matches('[data-popover-trigger]')) {\n\t\t\t\t\t\t\t\tconst popoverId = containerToRemove.dataset.popoverFor;\n\t\t\t\t\t\t\t\tif (popoverId && activePopovers.has(popoverId)) {\n\t\t\t\t\t\t\t\t\tconst popoverData = activePopovers.get(popoverId);\n\t\t\t\t\t\t\t\t\tif(popoverData.cleanup) closePopover.call({popoverId: popoverId}, true);\n\t\t\t\t\t\t\t\t\tactivePopovers.delete(popoverId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Note: Checking for removed *content* elements directly is less reliable\n\t\t\t\t\t\t\t// as they live in the portal. Relying on trigger removal is safer.\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Inject CSS Animations\n\t\t\t\t\tconst style = document.createElement('style');\n\t\t\t\t\tstyle.textContent = `\n\t\t\t\t\t\t@keyframes popover-in { 0% { opacity: 0; transform: scale(0.95); } 100% { opacity: 1; transform: scale(1); } }\n\t\t\t\t\t\t@keyframes popover-out { 0% { opacity: 1; transform: scale(1); } 100% { opacity: 0; transform: scale(0.95); } }\n\t\t\t\t\t\t.popover-animate-in { animation: popover-in 0.15s cubic-bezier(0.16, 1, 0.3, 1); }\n\t\t\t\t\t\t.popover-animate-out { animation: popover-out 0.1s cubic-bezier(0.16, 1, 0.3, 1) forwards; }\n\t\t\t\t\t`;\n\t\t\t\t\tdocument.head.appendChild(style);\n\t\t\t\t} // End initializePopovers\n\n\t\t\t})();\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = handle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var21), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
