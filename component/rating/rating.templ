package rating

import (
	"context"
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
	"strconv"
)

type Style string

const (
	StyleStar  Style = "star"
	StyleHeart Style = "heart"
	StyleEmoji Style = "emoji"
)

type Props struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Value       float64
	ReadOnly    bool
	Precision   float64
	Name        string
	OnlyInteger bool
}

type GroupProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type ItemProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Value      int
	Style      Style
}

templ Rating(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ p.setDefaults() }}
	{{ ctx = context.WithValue(ctx, "readOnly", p.ReadOnly) }}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		x-data="rating"
		data-value={ strconv.FormatFloat(p.Value, 'f', -1, 64) }
		data-precision={ strconv.FormatFloat(p.Precision, 'f', -1, 64) }
		data-readonly={ strconv.FormatBool(p.ReadOnly) }
		if p.Name != "" {
			data-name={ p.Name }
		}
		data-onlyinteger={ strconv.FormatBool(p.OnlyInteger) }
		class={
			util.TwMerge(
				"flex flex-col items-start gap-1",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
		<input
			type="hidden"
			if p.Name != "" {
				name={ p.Name }
			}
			x-bind:value="value"
			disabled?={ p.Name == "" }
			x-ref="input"
		/>
	</div>
}

templ Group(props ...GroupProps) {
	{{ var p GroupProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("flex flex-row items-center gap-1", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Item(props ...ItemProps) {
	{{ var p ItemProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ p.setDefaults() }}
	{{ readOnly, _ := ctx.Value("readOnly").(bool) }}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			util.TwMerge(
				"relative",
				colorClass(p.Style),
				"transition-opacity",
				"cursor-pointer",
				util.If(readOnly, "cursor-default"),
				p.Class,
			),
		}
		data-rating-value={ strconv.Itoa(p.Value) }
		if !readOnly {
			@click="setValue"
			@mouseover="hover"
			@mouseleave="resetPreview"
		}
		{ p.Attributes... }
	>
		<div class="opacity-30">
			@ratingIcon(p.Style, false, float64(p.Value))
		</div>
		<div
			class="absolute inset-0 overflow-hidden"
			x-bind:style="getItemStyle"
			data-index={ strconv.Itoa(p.Value) }
		>
			@ratingIcon(p.Style, true, float64(p.Value))
		</div>
	</div>
}

func colorClass(style Style) string {
	switch style {
	case StyleHeart:
		return "text-destructive"
	case StyleEmoji:
		return "text-yellow-500"
	default:
		return "text-yellow-400"
	}
}

func ratingIcon(style Style, filled bool, value float64) templ.Component {
	if style == StyleEmoji {
		if filled {
			switch {
			case value <= 1:
				return icon.Angry()
			case value <= 2:
				return icon.Frown()
			case value <= 3:
				return icon.Meh()
			case value <= 4:
				return icon.Smile()
			default:
				return icon.Laugh()
			}
		}
		return icon.Meh()
	}
	if filled {
		switch style {
		case StyleHeart:
			return icon.Heart(icon.Props{Fill: "currentColor"})
		default:
			return icon.Star(icon.Props{Fill: "currentColor"})
		}
	} else {
		switch style {
		case StyleHeart:
			return icon.Heart()
		default:
			return icon.Star()
		}
	}
}

func (p *ItemProps) setDefaults() {
	if p.Style == "" {
		p.Style = StyleStar
	}
}

func (p *Props) setDefaults() {
	if p.Precision <= 0 {
		p.Precision = 1.0
	}
}

templ Script() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('rating', () => ({
					value: 0,
					maxValue: 5, // Default value, will be dynamically updated
					precision: 1,
					readonly: false,
					name: '',
					onlyInteger: false,
					previewValue: 0,
					
					init() {
						this.value = parseFloat(this.$el.dataset.value) || 0;
						this.precision = parseFloat(this.$el.dataset.precision) || 1;
						this.readonly = this.$el.dataset.readonly === 'true';
						this.name = this.$el.dataset.name || '';
						this.onlyInteger = this.$el.dataset.onlyinteger === 'true';
						
						// Dynamically calculate maxValue based on the items
						this.calculateMaxValue();
						
						// Ensure value is within valid range
						this.value = Math.min(this.maxValue, this.value);
						this.value = Math.round(this.value / this.precision) * this.precision;
						
						// Initialize the form element for proper form integration
						if (this.$refs.input) {
							this.$refs.input.value = this.value;
						}
						
						// Check if we're in a form context
						this.form = this.$el.closest('form');
						if (this.form && this.name) {
							// Add validation support
							this.form.addEventListener('submit', () => {
								this.validate();
							});
						}
						
						// Setup mutation observer to react to DOM changes
						this.observeDOMChanges();
					},
					
					calculateMaxValue() {
						// Find all rating items and determine the highest value
						const items = this.$el.querySelectorAll('[data-rating-value]');
						let highestValue = 0;
						
						items.forEach(item => {
							const value = parseInt(item.dataset.ratingValue, 10);
							if (value > highestValue) {
								highestValue = value;
							}
						});
						
						// Set minimum maxValue of 1
						this.maxValue = Math.max(1, highestValue);
					},
					
					observeDOMChanges() {
						// Use MutationObserver to react to DOM changes
						const observer = new MutationObserver(() => {
							this.calculateMaxValue();
						});
						
						// Watch for changes in the child node list
						observer.observe(this.$el, { childList: true, subtree: true });
					},
					
					validate() {
						// Basic validation - can be extended as needed
						const isValid = this.value > 0;
						// Trigger custom event for form validation
						this.$dispatch('rating-validate', { 
							name: this.name, 
							value: this.value,
							valid: isValid
						});
						return isValid;
					},
					
					setValue() {
						if (this.readonly) return;
						const item = this.$event.target.closest('[data-rating-value]');
						if (!item) return;
						const newValue = parseInt(item.dataset.ratingValue);
						if (this.onlyInteger) {
							this.value = Math.round(newValue);
						} else {
							this.value = Math.round(newValue / this.precision) * this.precision;
						}
						this.value = Math.max(0, Math.min(this.maxValue, this.value));
						
						// Update the hidden input value
						if (this.$refs.input) {
							this.$refs.input.value = this.value;
						}
						
						// Trigger change events for form integration
						this.$dispatch('rating-change', { 
							name: this.name, 
							value: this.value,
							maxValue: this.maxValue
						});
						
						// Trigger input event for better form integration
						if (this.$refs.input) {
							this.$refs.input.dispatchEvent(new Event('input', { bubbles: true }));
							this.$refs.input.dispatchEvent(new Event('change', { bubbles: true }));
						}
					},
					
					getFormattedValue() {
						return Math.round(this.value * 100) / 100;
					},
					
					getItemStyle() {
						const index = parseInt(this.$el.dataset.index || '0');
						const filled = index <= Math.floor(this.value);
						const partial = !filled && (index - 1 < this.value && this.value < index);
						const percentage = partial ? (this.value - Math.floor(this.value)) * 100 : 0;
						return {
							width: filled ? '100%' : (partial ? percentage + '%' : '0%')
						};
					},
					
					hover() {
						if (this.readonly) return;
						const item = this.$event.target.closest('[data-rating-value]');
						if (!item) return;
						this.previewValue = parseInt(item.dataset.ratingValue);
					},
					
					resetPreview() {
						if (this.readonly) return;
						this.previewValue = 0;
					}
				}));
			});
		</script>
	}
}
