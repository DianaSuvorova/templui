package modal

import "github.com/axzilla/templui/util"

type Props struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	DisableClickAway bool
	DisableESC       bool
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Disabled   bool
	ModalID    string
}

type CloseProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	ModalID    string
}

type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type BodyProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ Modal(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = util.RandomID() }}
	}
	<div
		id={ p.ID }
		x-data="modal"
		x-on:open-modal.window="handleOpenModal"
		x-on:close-modal.window="handleCloseModal"
		data-modal-id={ p.ID }
		x-show="open"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto"
		aria-labelledby="modal-title"
		role="dialog"
		aria-modal="true"
		{ p.Attributes... }
	>
		<div class="fixed inset-0 bg-background/70 bg-opacity-50 transition-opacity" aria-hidden="true"></div>
		<div
			id={ p.ID + "-content" }
			class={
				util.TwMerge(
					"relative bg-background rounded-lg border text-left overflow-hidden shadow-xl transform transition-all sm:my-8 w-full",
					p.Class,
				),
			}
			if !p.DisableClickAway {
				@click.outside="handleClickAway"
			}
			if !p.DisableESC {
				x-on:keydown.esc.window="handleClickAway"
			}
		>
			{ children... }
		</div>
	</div>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		x-data="modalTriggers"
		if p.ModalID != "" {
			data-modal-id={ p.ModalID }
		}
		if !p.Disabled {
			@click="openModal"
		}
		class={
			util.TwMerge(
				util.IfElse(p.Disabled, "cursor-not-allowed", "cursor-pointer"),
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Close(props ...CloseProps) {
	{{ var p CloseProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		x-data="modalTriggers"
		if p.ModalID != "" {
			data-modal-id={ p.ModalID }
		}
		@click="closeModal"
		class={ util.TwMerge("", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-4 pt-5 pb-4 sm:p-6 sm:pb-4", p.Class) }
		{ p.Attributes... }
	>
		<h3 class="text-lg leading-6 font-medium text-foreground" id="modal-title">
			{ children... }
		</h3>
	</div>
}

templ Body(props ...BodyProps) {
	{{ var p BodyProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-4 pt-5 pb-4 sm:p-6 sm:pb-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Script() {
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('modal', () => ({
					open: false,
					handleOpenModal(event) {
						if (event.detail.id === this.$el.dataset.modalId) {
							this.open = true
						}
					},
					handleCloseModal(event) {
						if (event.detail.id === this.$el.dataset.modalId) {
							this.open = false
						}
					},
					handleClickAway() {
						this.open = false;
					},
				}))
				Alpine.data('modalTriggers', () => ({
					openModal() {
						this.$dispatch('open-modal', { 
							id: this.$el.dataset.modalId 
						})
					},
					closeModal() {
						this.$dispatch('close-modal', { 
							id: this.$el.dataset.modalId 
						})
					}
				}))
			})
		</script>
	}
}
