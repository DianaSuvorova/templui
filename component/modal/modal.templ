package modal

import (
	"github.com/axzilla/templui/util"
	"strconv"
)

type Props struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	DisableClickAway bool
	DisableESC       bool
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Disabled   bool
	ModalID    string // ID of the modal to trigger
}

type CloseProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	ModalID    string // ID of the modal to close (optional, defaults to closest modal)
}

type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type BodyProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ Modal(props ...Props) {
	@Script()
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = "modal-" + util.RandomID() }}
	}
	<div
		id={ p.ID }
		data-modal
		data-disable-click-away={ strconv.FormatBool(p.DisableClickAway) }
		data-disable-esc={ strconv.FormatBool(p.DisableESC) }
		style="display: none;"
		class="modal-container fixed inset-0 z-50 flex items-center justify-center overflow-y-auto opacity-0 transition-opacity duration-300 ease-out"
		aria-labelledby={ p.ID + "-title" }
		role="dialog"
		aria-modal="true"
		{ p.Attributes... }
	>
		<div data-modal-backdrop class="fixed inset-0 bg-background/70 bg-opacity-50" aria-hidden="true"></div>
		<div
			id={ p.ID + "-content" }
			data-modal-content
			class={
				util.TwMerge(
					"modal-content relative bg-background rounded-lg border text-left overflow-hidden shadow-xl transform transition-all sm:my-8 w-full scale-95 opacity-0", // Base classes + transition start
					"duration-300 ease-out", // Enter duration
					p.Class,
				),
			}
		>
			{ children... }
		</div>
	</div>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		data-modal-trigger
		if p.ModalID != "" {
			data-modal-target-id={ p.ModalID }
		}
		class={
			util.TwMerge(
				util.IfElse(p.Disabled, "cursor-not-allowed opacity-50", "cursor-pointer"),
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Close(props ...CloseProps) {
	{{ var p CloseProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		data-modal-close
		if p.ModalID != "" {
			data-modal-target-id={ p.ModalID }
		}
		class={ util.TwMerge("cursor-pointer", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-4 pt-5 pb-4 sm:p-6 sm:pb-4", p.Class) }
		{ p.Attributes... }
	>
		<h3 class="text-lg leading-6 font-medium text-foreground" id={ p.ID + "-title" }>
			// Ensure title ID matches aria-labelledby
			{ children... }
		</h3>
	</div>
}

templ Body(props ...BodyProps) {
	{{ var p BodyProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-4 pt-5 pb-4 sm:p-6 sm:pb-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			// --- Core Modal Logic (can be defined multiple times, but should be idempotent) ---

			function closeModalById(modalId, immediate = false) {
				const modal = document.getElementById(modalId);
				if (!modal || modal.style.display === 'none') return;

				const content = modal.querySelector('[data-modal-content]');
				
				function hideModal() {
					modal.style.display = 'none';
					modal.classList.remove('modal-open'); // Optional: Remove marker class
					if (window.openModalIdGlobal === modalId) {
						window.openModalIdGlobal = null;
						document.body.style.overflow = '';
					}
				}

				// Apply leaving transitions
				modal.classList.remove('opacity-100');
				modal.classList.add('opacity-0');
				if (content) {
					content.classList.remove('scale-100', 'opacity-100');
					content.classList.add('scale-95', 'opacity-0');
				}

				if (immediate) {
					hideModal();
				} else {
					const duration = 300; 
					setTimeout(hideModal, duration);
				}
			}

			function openModalById(modalId) {
				if (typeof window.openModalIdGlobal === 'undefined') {
					console.error("Modal global setup not run before opening.");
					return;
				}
				
				if (window.openModalIdGlobal && window.openModalIdGlobal !== modalId) {
					closeModalById(window.openModalIdGlobal, true); 
				}

				const modal = document.getElementById(modalId);
				if (!modal) return;

				const content = modal.querySelector('[data-modal-content]');

				modal.style.display = 'flex';
				modal.classList.add('modal-open'); // Optional: Add marker class
				window.openModalIdGlobal = modalId; 
				document.body.style.overflow = 'hidden'; 

				void modal.offsetHeight; // Force reflow

				modal.classList.remove('opacity-0');
				modal.classList.add('opacity-100');
				if (content) {
					content.classList.remove('scale-95', 'opacity-0');
					content.classList.add('scale-100', 'opacity-100');
				}

				// Focus management (optional but good for accessibility)
				const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
				const firstFocusableElement = content ? content.querySelector(focusableElements) : null;
				if (firstFocusableElement) {
					setTimeout(() => firstFocusableElement.focus(), 50);
				}
			}

			// --- Initialization Functions (Defined once, called repeatedly) ---

			function initModalElement(modal) {
				if (!modal || modal.dataset.modalInitialized) return;
				modal.dataset.modalInitialized = 'true';
				// No specific setup needed for the modal div itself currently
			}

			function initModalTriggerElement(trigger) {
				if (!trigger || trigger.dataset.modalTriggerInitialized) return;
				trigger.dataset.modalTriggerInitialized = 'true';

				// Remove previous listener if any (safer for re-initialization scenarios)
				const oldListener = trigger._modalTriggerListener;
				if (oldListener) {
					trigger.removeEventListener('click', oldListener);
				}

				const newListener = (event) => {
					if (trigger.hasAttribute('disabled') || trigger.classList.contains('opacity-50')) {
						return;
					}
					const targetId = trigger.getAttribute('data-modal-target-id');
					if (targetId) {
						openModalById(targetId);
					} else {
						console.warn('Modal trigger clicked without data-modal-target-id', trigger);
					}
				};
				trigger.addEventListener('click', newListener);
				trigger._modalTriggerListener = newListener; // Store listener reference
			}

			function initModalCloseElement(closeButton) {
				if (!closeButton || closeButton.dataset.modalCloseInitialized) return;
				closeButton.dataset.modalCloseInitialized = 'true';

				// Remove previous listener if any
				const oldListener = closeButton._modalCloseListener;
				if (oldListener) {
					closeButton.removeEventListener('click', oldListener);
				}
				
				const newListener = (event) => {
					const targetId = closeButton.getAttribute('data-modal-target-id');
					if (targetId) {
						closeModalById(targetId);
					} else {
						const modal = closeButton.closest('[data-modal]');
						if (modal && modal.id) {
							closeModalById(modal.id);
						} else {
							console.warn('Modal close button clicked without target ID or modal ancestor', closeButton);
						}
					}
				};
				closeButton.addEventListener('click', newListener);
				closeButton._modalCloseListener = newListener; // Store listener reference
			}

			// --- Global Setup (Runs only ONCE per page load) ---
			function setupModalGlobals() {
				if (window.modalScriptInitialized) return; // Prevent re-running

				window.openModalIdGlobal = null; 

				// Global Click Away Listener
				document.addEventListener('click', (event) => {
					if (!window.openModalIdGlobal) return; 

					const openModalElement = document.getElementById(window.openModalIdGlobal);
					if (!openModalElement || openModalElement.getAttribute('data-disable-click-away') === 'true') {
						return; 
					}

					const contentElement = openModalElement.querySelector('[data-modal-content]');
					if (contentElement && !contentElement.contains(event.target)) {
						const trigger = event.target.closest('[data-modal-trigger]');
						if (!trigger || trigger.getAttribute('data-modal-target-id') !== window.openModalIdGlobal) {
							closeModalById(window.openModalIdGlobal);
						}
					}
				});

				// Global ESC Key Listener
				document.addEventListener('keydown', (event) => {
					if (event.key === 'Escape' && window.openModalIdGlobal) {
						const openModalElement = document.getElementById(window.openModalIdGlobal);
						if (openModalElement && openModalElement.getAttribute('data-disable-esc') !== 'true') {
							closeModalById(window.openModalIdGlobal);
						}
					}
				});

				window.modalScriptInitialized = true;
			}

			// --- Initialization Triggers (Initialization Pattern) ---

			// Function to initialize all relevant modal elements currently in the DOM
			function initializeAllModals() {
				document.querySelectorAll('[data-modal]:not([data-modal-initialized])').forEach(initModalElement);
				document.querySelectorAll('[data-modal-trigger]:not([data-modal-trigger-initialized])').forEach(initModalTriggerElement);
				document.querySelectorAll('[data-modal-close]:not([data-modal-close-initialized])').forEach(initModalCloseElement);
			}

			// 1. Setup Globals and Initial Run
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', () => {
					setupModalGlobals(); // Setup globals first
					initializeAllModals(); // Then initialize existing elements
				});
			} else {
				setupModalGlobals(); // Setup globals if DOM already loaded
				initializeAllModals(); // Initialize existing elements
			}

			// 2. After HTMX swaps (Re-run initialization for new elements)
			document.body.addEventListener('htmx:afterSwap', function(event) {
				// No need to check the target itself, initializeAllModals covers everything new
				initializeAllModals(); 
			});
		</script>
	}
}
