package drawer

import "github.com/axzilla/templui/util"

type Position string

const (
	PositionTop    Position = "top"
	PositionRight  Position = "right"
	PositionBottom Position = "bottom"
	PositionLeft   Position = "left"
)

type Props struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Side       Position
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type ContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Position   Position
}

type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type TitleProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DescriptionProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CloseProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ Drawer(props ...Props) {
	@Script()
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = util.RandomID() }}
	}
	<div
		id={ p.ID }
		x-data="drawer"
		@keydown.escape.window="close"
		class={ util.TwMerge("relative", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		@click="open"
		class={ util.TwMerge("cursor-pointer", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Content(props ...ContentProps) {
	{{ var p ContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		x-show="isOpen"
		class="fixed inset-0 z-50 bg-background/80 backdrop-blur-xs"
		@click="close"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-300"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
	></div>
	<div
		id={ p.ID + "-content" }
		x-show="isOpen"
		@click.away="close"
		class={
			util.TwMerge(
				"fixed z-50",
				p.Class,
				util.If(p.Position == PositionRight, "inset-y-0 right-0 w-3/4 md:w-1/2 lg:w-1/3"),
				util.If(p.Position == PositionLeft, "inset-y-0 left-0 w-3/4 md:w-1/2 lg:w-1/3"),
				util.If(p.Position == PositionTop, "inset-x-0 top-0 h-auto sm:h-1/2"),
				util.If(p.Position == PositionBottom, "inset-x-0 bottom-0 h-auto sm:h-1/2"),
			),
		}
		x-transition:enter="transition ease-out duration-300"
		x-transition:leave="transition ease-in duration-300"
		if p.Position == PositionLeft {
			x-transition:enter-start="opacity-0 transform -translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave-start="opacity-100 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform -translate-x-full"
		}
		if p.Position == PositionRight {
			x-transition:enter-start="opacity-0 transform translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave-start="opacity-100 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform translate-x-full"
		}
		if p.Position == PositionTop {
			x-transition:enter-start="opacity-0 transform -translate-y-full"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			x-transition:leave-start="opacity-100 transform translate-y-0"
			x-transition:leave-end="opacity-0 transform -translate-y-full"
		}
		if p.Position == PositionBottom {
			x-transition:enter-start="opacity-0 transform translate-y-full"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			x-transition:leave-start="opacity-100 transform translate-y-0"
			x-transition:leave-end="opacity-0 transform translate-y-full"
		}
		{ p.Attributes... }
	>
		<div
			class={
				util.TwMerge(
					"h-full overflow-y-auto bg-background p-6 shadow-lg",
					util.If(p.Position == PositionRight, "border-l"),
					util.If(p.Position == PositionLeft, "border-r"),
					util.If(p.Position == PositionBottom, "border-t"),
					util.If(p.Position == PositionTop, "border-b"),
				),
			}
			@click.stop
		>
			{ children... }
		</div>
	</div>
}

templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("flex flex-col space-y-1.5 pb-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Title(props ...TitleProps) {
	{{ var p TitleProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<h2
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("text-lg font-semibold leading-none tracking-tight", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</h2>
}

templ Description(props ...DescriptionProps) {
	{{ var p DescriptionProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<p
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("text-sm text-muted-foreground", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</p>
}

templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 pt-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Close(props ...CloseProps) {
	{{ var p CloseProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<button
		if p.ID != "" {
			id={ p.ID }
		}
		@click="close"
		class={
			util.TwMerge(
				"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background",
				"transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
				"disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent",
				"hover:text-accent-foreground h-10 px-4 py-2",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</button>
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
            document.addEventListener('alpine:init', () => {
                Alpine.data('drawer', () => ({
                    isOpen: false,
                    open() {
                        this.isOpen = true
                        document.body.style.overflow = 'hidden'
                    },
                    close() {
                        this.isOpen = false
                        document.body.style.overflow = ''
                    },
                }))
            })
        </script>
	}
}
