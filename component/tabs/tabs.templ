package tabs

import (
	"context"
	"github.com/axzilla/templui/util"
)

type Props struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type ListProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Value      string
	IsActive   bool
	TabsID     string
}

type ContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Value      string
	IsActive   bool
	TabsID     string
}

templ Tabs(props ...Props) {
	@Script()
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ tabsID := p.ID }}
	if tabsID == "" {
		{{ tabsID = util.RandomID() }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("relative", p.Class) }
		data-tabs
		data-tabs-id={ tabsID }
		{ p.Attributes... }
	>
		{{ ctx = context.WithValue(ctx, "tabsId", tabsID) }}
		{ children... }
	</div>
}

templ List(props ...ListProps) {
	{{ var p ListProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ tabsID := IDFromContext(ctx) }}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			util.TwMerge(
				"relative flex items-center justify-center h-10 p-1 rounded-lg select-none bg-muted text-muted-foreground",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
		<div
			data-tabs-marker
			data-tabs-id={ tabsID }
			class="absolute left-0 z-10 h-full duration-300 ease-out"
		>
			<div class="w-full h-full bg-background rounded-md shadow-xs"></div>
		</div>
	</div>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ tabsID := p.TabsID }}
	if tabsID == "" {
		{{ tabsID = IDFromContext(ctx) }}
	}
	if p.Value == "" {
		<span class="text-xs text-destructive">Error: Tab Trigger missing required 'Value' attribute.</span>
		return templ.NopComponent
	}
	<button
		if p.ID != "" {
			id={ p.ID }
		}
		type="button"
		class={
			util.TwMerge(
				"relative z-20 flex-1 inline-flex items-center justify-center h-8 px-3 text-sm font-medium transition-all rounded-md cursor-pointer whitespace-nowrap hover:text-foreground",
				p.Class,
			),
		}
		data-tabs-trigger
		data-tabs-id={ tabsID }
		data-tabs-value={ p.Value }
		data-state={ util.IfElse(p.IsActive, "active", "inactive") }
		{ p.Attributes... }
	>
		{ children... }
	</button>
}

templ Content(props ...ContentProps) {
	{{ var p ContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ tabsID := p.TabsID }}
	if tabsID == "" {
		{{ tabsID = IDFromContext(ctx) }}
	}
	if p.Value == "" {
		<span class="text-xs text-destructive">Error: Tab Content missing required 'Value' attribute.</span>
		return templ.NopComponent
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			util.TwMerge(
				"relative",
				util.If(!p.IsActive, "hidden"),
				p.Class,
			),
		}
		data-tabs-content
		data-tabs-id={ tabsID }
		data-tabs-value={ p.Value }
		data-state={ util.IfElse(p.IsActive, "active", "inactive") }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

func IDFromContext(ctx context.Context) string {
	if tabsID, ok := ctx.Value("tabsId").(string); ok {
		return tabsID
	}
	return ""
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			function initializeTabs(tabsContainer) {
				if (tabsContainer.dataset.tabsInitialized === 'true') {
					return; // Already initialized
				}
				tabsContainer.dataset.tabsInitialized = 'true';

				const tabsId = tabsContainer.dataset.tabsId;
				if (!tabsId) {
					console.error("Tabs container is missing 'data-tabs-id'.", tabsContainer);
					return;
				}

				const triggers = Array.from(tabsContainer.querySelectorAll(`[data-tabs-trigger][data-tabs-id="${tabsId}"]`));
				const contents = Array.from(tabsContainer.querySelectorAll(`[data-tabs-content][data-tabs-id="${tabsId}"]`));
				const marker = tabsContainer.querySelector(`[data-tabs-marker][data-tabs-id="${tabsId}"]`);
				const triggerListeners = []; // Store listeners for cleanup

				function updateMarker(activeTrigger) {
					if (marker && activeTrigger) {
						marker.style.width = activeTrigger.offsetWidth + 'px';
						marker.style.height = activeTrigger.offsetHeight + 'px';
						marker.style.left = activeTrigger.offsetLeft + 'px';
					}
				}

				function setActiveTab(value) {
					let activeTrigger = null;
					triggers.forEach(t => {
						const isActive = t.dataset.tabsValue === value;
						t.dataset.state = isActive ? "active" : "inactive";
						// Use explicit classes for active state for clarity
						t.classList.toggle('text-foreground', isActive);
						t.classList.toggle('bg-background', isActive);
						t.classList.toggle('shadow-xs', isActive);
						if (isActive) {
							activeTrigger = t;
						}
					});

					contents.forEach(content => {
						const isActive = content.dataset.tabsValue === value;
						content.dataset.state = isActive ? "active" : "inactive";
						content.classList.toggle('hidden', !isActive);
					});

					updateMarker(activeTrigger);
				}

				// --- Initialization ---
				let initialActiveTrigger = triggers.find(t => t.dataset.state === 'active') || triggers[0];
				if (initialActiveTrigger) {
					setActiveTab(initialActiveTrigger.dataset.tabsValue);
				} else if (triggers.length > 0) {
                    // Fallback if no trigger has data-state=active
                    setActiveTab(triggers[0].dataset.tabsValue);
                }

				// --- Event Listeners ---
				triggers.forEach(trigger => {
					const handleClick = () => {
						setActiveTab(trigger.dataset.tabsValue);
					};
					trigger.addEventListener('click', handleClick);
					triggerListeners.push({ trigger, handler: handleClick }); // Store for cleanup
				});

				// --- Cleanup Function --- 
				tabsContainer._tabsCleanup = () => {
					triggerListeners.forEach(({ trigger, handler }) => {
						trigger.removeEventListener('click', handler);
					});
					triggerListeners.length = 0; // Clear the array
					// console.log(`Tabs cleanup for ${tabsId}`);
				};
			}

			// --- Global Initialization Triggers ---
			function initializeAllTabs() {
				document.querySelectorAll('[data-tabs]:not([data-tabs-initialized])').forEach(initializeTabs);
			}

			// 1. Initial page load
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initializeAllTabs);
			} else {
				initializeAllTabs(); // Already loaded
			}

			// 2. After HTMX swaps
			document.body.addEventListener('htmx:afterSwap', function(event) {
				const targetElement = event.target instanceof Element ? event.target : null;
				if (targetElement) {
					// Check if the swapped element itself is a tabs container
					if (targetElement.matches('[data-tabs]:not([data-tabs-initialized])')) {
						initializeTabs(targetElement);
					}
					// Check for tabs containers within the swapped content
					targetElement.querySelectorAll('[data-tabs]:not([data-tabs-initialized])').forEach(initializeTabs);
				}
			});

			// 3. Cleanup before HTMX removes elements
			document.body.addEventListener('htmx:beforeCleanup', (event) => {
				let containerToRemove = event.detail.target || event.detail.elt;
				if (containerToRemove && containerToRemove.querySelectorAll) {
					// Cleanup tabs within the container
					containerToRemove.querySelectorAll('[data-tabs][data-tabs-initialized]').forEach(tabsContainer => {
						if (typeof tabsContainer._tabsCleanup === 'function') {
							tabsContainer._tabsCleanup();
							delete tabsContainer._tabsCleanup;
							tabsContainer.removeAttribute('data-tabs-initialized');
						}
					});
					// Cleanup if the container itself is a tabs container
					if (containerToRemove.matches('[data-tabs][data-tabs-initialized]')) {
						if (typeof containerToRemove._tabsCleanup === 'function') {
							containerToRemove._tabsCleanup();
							delete containerToRemove._tabsCleanup;
							containerToRemove.removeAttribute('data-tabs-initialized');
						}
					}
				}
			});
		</script>
	}
}
