package calendar

import (
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
	"strconv"
	"time"
)

type LocaleTag string

// Common Locale Tags (BCP 47)
var (
	LocaleDefaultTag    = LocaleTag("en-US")
	LocaleTagChinese    = LocaleTag("zh-CN")
	LocaleTagFrench     = LocaleTag("fr-FR")
	LocaleTagGerman     = LocaleTag("de-DE")
	LocaleTagItalian    = LocaleTag("it-IT")
	LocaleTagJapanese   = LocaleTag("ja-JP")
	LocaleTagPortuguese = LocaleTag("pt-PT")
	LocaleTagSpanish    = LocaleTag("es-ES")
)

type Props struct {
	ID           string
	Class        string
	LocaleTag    LocaleTag
	Value        *time.Time
	Name         string
	InitialMonth int // Optional: 0-11 (Default: current or from Value). Controls the initially displayed month view.
	InitialYear  int // Optional: (Default: current or from Value). Controls the initially displayed year view.
}

templ Calendar(props ...Props) {
	{{
		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		if p.ID == "" {
			p.ID = util.RandomID() + "-calendar"
		}
		if p.Name == "" {
			// Should be provided by parent (e.g., DatePicker or in standalone usage)
			p.Name = p.ID + "-value" // Fallback name
		}
		if p.LocaleTag == "" {
			p.LocaleTag = LocaleDefaultTag
		}

		initialView := time.Now()
		if p.Value != nil {
			initialView = *p.Value
		}

		initialMonth := p.InitialMonth
		initialYear := p.InitialYear

		// Use year from initialView if InitialYear prop is invalid/unset (<= 0)
		if initialYear <= 0 {
			initialYear = initialView.Year()
		}

		// Use month from initialView if InitialMonth prop is invalid OR
		// if InitialMonth is default 0 AND InitialYear was also defaulted (meaning neither was likely set explicitly)
		if (initialMonth < 0 || initialMonth > 11) || (initialMonth == 0 && p.InitialYear <= 0) {
			initialMonth = int(initialView.Month()) - 1 // time.Month is 1-12
		}

		initialSelectedISO := ""
		if p.Value != nil {
			initialSelectedISO = p.Value.Format("2006-01-02")
		}
	}}
	@Script()
	<div class={ p.Class } id={ p.ID + "-wrapper" }>
		<input
			type="hidden"
			name={ p.Name }
			value={ initialSelectedISO }
			id={ p.ID + "-hidden" }
			data-calendar-hidden-input
		/>
		<div
			id={ p.ID }
			data-calendar-container="true"
			data-locale-tag={ string(p.LocaleTag) }
			data-initial-month={ strconv.Itoa(initialMonth) }
			data-initial-year={ strconv.Itoa(initialYear) }
			data-selected-date={ initialSelectedISO }
			data-hidden-input-id={ p.ID + "-hidden" }
		>
			<!-- Calendar Header -->
			<div class="flex items-center justify-between mb-4">
				<span data-calendar-month-display class="text-sm font-medium"></span>
				<div class="flex gap-1">
					<button type="button" data-calendar-prev class="inline-flex items-center justify-center rounded-md text-sm font-medium h-7 w-7 hover:bg-accent hover:text-accent-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:opacity-50">
						@icon.ChevronLeft()
					</button>
					<button type="button" data-calendar-next class="inline-flex items-center justify-center rounded-md text-sm font-medium h-7 w-7 hover:bg-accent hover:text-accent-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:opacity-50">
						@icon.ChevronRight()
					</button>
				</div>
			</div>
			<div data-calendar-weekdays class="grid grid-cols-7 gap-1 mb-1 place-items-center"></div>
			<div data-calendar-days class="grid grid-cols-7 gap-1 place-items-center"></div>
		</div>
	</div>
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			function initCalendar(container) {
				const monthDisplay = container.querySelector('[data-calendar-month-display]');
				const weekdaysContainer = container.querySelector('[data-calendar-weekdays]');
				const daysContainer = container.querySelector('[data-calendar-days]');
				const prevButton = container.querySelector('[data-calendar-prev]');
				const nextButton = container.querySelector('[data-calendar-next]');
				const hiddenInputId = container.dataset.hiddenInputId;
				const hiddenInput = document.getElementById(hiddenInputId);

				if (!monthDisplay || !weekdaysContainer || !daysContainer || !prevButton || !nextButton || !hiddenInput) {
					return;
				}

				const localeTag = container.dataset.localeTag || 'en-US'; 
				let monthNamesFallback = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
				let dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
				
				try {
					dayNames = Array.from({ length: 7 }, (_, i) =>
						new Intl.DateTimeFormat(localeTag, { weekday: 'short' }).format(new Date(Date.UTC(2000, 0, i))) 
					);
				} catch (e) {}
				
				let currentMonth = parseInt(container.dataset.initialMonth);
				let currentYear = parseInt(container.dataset.initialYear);
				let selectedDate = null;

				if (container.dataset.selectedDate) {
					selectedDate = parseISODate(container.dataset.selectedDate);
				}

				function parseISODate(isoStr) {
					if (!isoStr) return null;
					try {
						const parts = isoStr.split('-');
						const year = parseInt(parts[0], 10);
						const month = parseInt(parts[1], 10) - 1;
						const day = parseInt(parts[2], 10);
						const date = new Date(Date.UTC(year, month, day));
						if (!isNaN(date) && date.getUTCFullYear() === year && date.getUTCMonth() === month && date.getUTCDate() === day) {
							return date;
						}
					} catch {}
					return null;
				}

				function updateMonthDisplay() {
					try {
						const dateForDisplay = new Date(Date.UTC(currentYear, currentMonth));
						monthDisplay.textContent = new Intl.DateTimeFormat(localeTag, {
							month: 'long', year: 'numeric'
						}).format(dateForDisplay);
					} catch (e) {
						monthDisplay.textContent = `${monthNamesFallback[currentMonth]} ${currentYear}`;
					}
				}

				function renderWeekdays() {
					weekdaysContainer.innerHTML = '';
					dayNames.forEach(day => {
						const el = document.createElement('div');
						el.className = 'text-center text-xs text-muted-foreground font-medium';
						el.textContent = day;
						weekdaysContainer.appendChild(el);
					});
				}

				function renderCalendar() {
					daysContainer.innerHTML = '';
					const firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));
					const startOffset = firstDayOfMonth.getUTCDay();
					const daysInMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0)).getUTCDate();
					const today = new Date(); 
					today.setUTCHours(0,0,0,0);

					for (let i = 0; i < startOffset; i++) {
						 const blank = document.createElement('div');
						 blank.className = 'h-8 w-8';
						 daysContainer.appendChild(blank);
					}

					for (let day = 1; day <= daysInMonth; day++) {
						const button = document.createElement('button');
						button.type = 'button';
						button.className = 'inline-flex h-8 w-8 items-center justify-center rounded-md text-sm font-medium focus:outline-none focus:ring-1 focus:ring-ring';
						button.textContent = day;
						button.dataset.day = day;
						
						const currentDate = new Date(Date.UTC(currentYear, currentMonth, day));
						const isSelected = selectedDate && currentDate.getTime() === selectedDate.getTime();
						const isToday = currentDate.getTime() === today.getTime();

						if (isSelected) button.classList.add('bg-primary', 'text-primary-foreground', 'hover:bg-primary/90');
						else if (isToday) button.classList.add('bg-accent', 'text-accent-foreground');
						else button.classList.add('hover:bg-accent', 'hover:text-accent-foreground');

						button.addEventListener('click', handleDayClick);
						daysContainer.appendChild(button);
					}
				}

				function handleDayClick(event) {
					const day = parseInt(event.target.dataset.day);
					if (!day) return;
					
					selectedDate = new Date(Date.UTC(currentYear, currentMonth, day));
					const isoFormattedValue = selectedDate.toISOString().split('T')[0];
					
					hiddenInput.value = isoFormattedValue;
					hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));

					container.dispatchEvent(new CustomEvent('calendar-date-selected', {
						bubbles: true,
						detail: { date: selectedDate }
					}));

					renderCalendar();
				}

				prevButton.addEventListener('click', () => {
					currentMonth--;
					if (currentMonth < 0) { currentMonth = 11; currentYear--; }
					updateMonthDisplay(); 
					renderCalendar();
				});

				nextButton.addEventListener('click', () => {
					currentMonth++;
					if (currentMonth > 11) { currentMonth = 0; currentYear++; }
					updateMonthDisplay(); 
					renderCalendar();
				});

				updateMonthDisplay();
				renderWeekdays();
				renderCalendar();
			}

			function initAllComponents(root = document) {
				for (const calendar of root.querySelectorAll('[data-calendar-container]')) {
					initCalendar(calendar);
				}
			}

			document.addEventListener('DOMContentLoaded', () => initAllComponents());
			document.body.addEventListener('htmx:afterSwap', (e) => initAllComponents(e.target));
		</script>
	}
}
