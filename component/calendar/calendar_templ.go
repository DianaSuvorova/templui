// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package calendar

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
	"strconv"
	"time"
)

type LocaleTag string

// Common Locale Tags (BCP 47)
var (
	LocaleDefaultTag    = LocaleTag("en-US")
	LocaleTagChinese    = LocaleTag("zh-CN")
	LocaleTagFrench     = LocaleTag("fr-FR")
	LocaleTagGerman     = LocaleTag("de-DE")
	LocaleTagItalian    = LocaleTag("it-IT")
	LocaleTagJapanese   = LocaleTag("ja-JP")
	LocaleTagPortuguese = LocaleTag("pt-PT")
	LocaleTagSpanish    = LocaleTag("es-ES")
)

type Props struct {
	ID           string
	Class        string
	LocaleTag    LocaleTag
	Value        *time.Time
	Name         string
	InitialMonth int // Optional: 0-11 (Default: current or from Value). Controls the initially displayed month view.
	InitialYear  int // Optional: (Default: current or from Value). Controls the initially displayed year view.
}

func Calendar(props ...Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		if p.ID == "" {
			p.ID = util.RandomID() + "-calendar"
		}
		if p.Name == "" {
			// Should be provided by parent (e.g., DatePicker or in standalone usage)
			p.Name = p.ID + "-value" // Fallback name
		}
		if p.LocaleTag == "" {
			p.LocaleTag = LocaleDefaultTag
		}

		initialView := time.Now()
		if p.Value != nil {
			initialView = *p.Value
		}

		initialMonth := p.InitialMonth
		initialYear := p.InitialYear

		// Use year from initialView if InitialYear prop is invalid/unset (<= 0)
		if initialYear <= 0 {
			initialYear = initialView.Year()
		}

		// Use month from initialView if InitialMonth prop is invalid OR
		// if InitialMonth is default 0 AND InitialYear was also defaulted (meaning neither was likely set explicitly)
		if (initialMonth < 0 || initialMonth > 11) || (initialMonth == 0 && p.InitialYear <= 0) {
			initialMonth = int(initialView.Month()) - 1 // time.Month is 1-12
		}

		initialSelectedISO := ""
		if p.Value != nil {
			initialSelectedISO = p.Value.Format("2006-01-02")
		}
		templ_7745c5c3_Err = Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{p.Class}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-wrapper")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 76, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"><input type=\"hidden\" name=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(p.Name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 79, Col: 16}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(initialSelectedISO)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 80, Col: 29}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\" id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-hidden")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 81, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" data-calendar-hidden-input><div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 85, Col: 12}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" data-calendar-container=\"true\" data-locale-tag=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(string(p.LocaleTag))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 87, Col: 40}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" data-initial-month=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(initialMonth))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 88, Col: 50}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\" data-initial-year=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(initialYear))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 89, Col: 48}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" data-selected-date=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(initialSelectedISO)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 90, Col: 42}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" data-hidden-input-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID + "-hidden")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 91, Col: 42}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"><!-- Calendar Header --><div class=\"flex items-center justify-between mb-4\"><span data-calendar-month-display class=\"text-sm font-medium\"></span><div class=\"flex gap-1\"><button type=\"button\" data-calendar-prev class=\"inline-flex items-center justify-center rounded-md text-sm font-medium h-7 w-7 hover:bg-accent hover:text-accent-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:opacity-50\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icon.ChevronLeft().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</button> <button type=\"button\" data-calendar-next class=\"inline-flex items-center justify-center rounded-md text-sm font-medium h-7 w-7 hover:bg-accent hover:text-accent-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:opacity-50\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icon.ChevronRight().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</button></div></div><div data-calendar-weekdays class=\"grid grid-cols-7 gap-1 mb-1 place-items-center\"></div><div data-calendar-days class=\"grid grid-cols-7 gap-1 place-items-center\"></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var handle = templ.NewOnceHandle()

func Script() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var14 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var14 == nil {
			templ_7745c5c3_Var14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var15 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<script defer nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var16 string
			templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(templ.GetNonce(ctx))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/calendar/calendar.templ`, Line: 115, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\">\n\t\t\tfunction initCalendar(container) {\n\t\t\t\tconst monthDisplay = container.querySelector('[data-calendar-month-display]');\n\t\t\t\tconst weekdaysContainer = container.querySelector('[data-calendar-weekdays]');\n\t\t\t\tconst daysContainer = container.querySelector('[data-calendar-days]');\n\t\t\t\tconst prevButton = container.querySelector('[data-calendar-prev]');\n\t\t\t\tconst nextButton = container.querySelector('[data-calendar-next]');\n\t\t\t\tconst hiddenInputId = container.dataset.hiddenInputId;\n\t\t\t\tconst hiddenInput = document.getElementById(hiddenInputId);\n\n\t\t\t\tif (!monthDisplay || !weekdaysContainer || !daysContainer || !prevButton || !nextButton || !hiddenInput) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst localeTag = container.dataset.localeTag || 'en-US'; \n\t\t\t\tlet monthNamesFallback = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\t\t\t\tlet dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tdayNames = Array.from({ length: 7 }, (_, i) =>\n\t\t\t\t\t\tnew Intl.DateTimeFormat(localeTag, { weekday: 'short' }).format(new Date(Date.UTC(2000, 0, i))) \n\t\t\t\t\t);\n\t\t\t\t} catch (e) {}\n\t\t\t\t\n\t\t\t\tlet currentMonth = parseInt(container.dataset.initialMonth);\n\t\t\t\tlet currentYear = parseInt(container.dataset.initialYear);\n\t\t\t\tlet selectedDate = null;\n\n\t\t\t\tif (container.dataset.selectedDate) {\n\t\t\t\t\tselectedDate = parseISODate(container.dataset.selectedDate);\n\t\t\t\t}\n\n\t\t\t\tfunction parseISODate(isoStr) {\n\t\t\t\t\tif (!isoStr) return null;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst parts = isoStr.split('-');\n\t\t\t\t\t\tconst year = parseInt(parts[0], 10);\n\t\t\t\t\t\tconst month = parseInt(parts[1], 10) - 1;\n\t\t\t\t\t\tconst day = parseInt(parts[2], 10);\n\t\t\t\t\t\tconst date = new Date(Date.UTC(year, month, day));\n\t\t\t\t\t\tif (!isNaN(date) && date.getUTCFullYear() === year && date.getUTCMonth() === month && date.getUTCDate() === day) {\n\t\t\t\t\t\t\treturn date;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tfunction updateMonthDisplay() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst dateForDisplay = new Date(Date.UTC(currentYear, currentMonth));\n\t\t\t\t\t\tmonthDisplay.textContent = new Intl.DateTimeFormat(localeTag, {\n\t\t\t\t\t\t\tmonth: 'long', year: 'numeric'\n\t\t\t\t\t\t}).format(dateForDisplay);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tmonthDisplay.textContent = `${monthNamesFallback[currentMonth]} ${currentYear}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction renderWeekdays() {\n\t\t\t\t\tweekdaysContainer.innerHTML = '';\n\t\t\t\t\tdayNames.forEach(day => {\n\t\t\t\t\t\tconst el = document.createElement('div');\n\t\t\t\t\t\tel.className = 'text-center text-xs text-muted-foreground font-medium';\n\t\t\t\t\t\tel.textContent = day;\n\t\t\t\t\t\tweekdaysContainer.appendChild(el);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfunction renderCalendar() {\n\t\t\t\t\tdaysContainer.innerHTML = '';\n\t\t\t\t\tconst firstDayOfMonth = new Date(Date.UTC(currentYear, currentMonth, 1));\n\t\t\t\t\tconst startOffset = firstDayOfMonth.getUTCDay();\n\t\t\t\t\tconst daysInMonth = new Date(Date.UTC(currentYear, currentMonth + 1, 0)).getUTCDate();\n\t\t\t\t\tconst today = new Date(); \n\t\t\t\t\ttoday.setUTCHours(0,0,0,0);\n\n\t\t\t\t\tfor (let i = 0; i < startOffset; i++) {\n\t\t\t\t\t\t const blank = document.createElement('div');\n\t\t\t\t\t\t blank.className = 'h-8 w-8';\n\t\t\t\t\t\t daysContainer.appendChild(blank);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let day = 1; day <= daysInMonth; day++) {\n\t\t\t\t\t\tconst button = document.createElement('button');\n\t\t\t\t\t\tbutton.type = 'button';\n\t\t\t\t\t\tbutton.className = 'inline-flex h-8 w-8 items-center justify-center rounded-md text-sm font-medium focus:outline-none focus:ring-1 focus:ring-ring';\n\t\t\t\t\t\tbutton.textContent = day;\n\t\t\t\t\t\tbutton.dataset.day = day;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst currentDate = new Date(Date.UTC(currentYear, currentMonth, day));\n\t\t\t\t\t\tconst isSelected = selectedDate && currentDate.getTime() === selectedDate.getTime();\n\t\t\t\t\t\tconst isToday = currentDate.getTime() === today.getTime();\n\n\t\t\t\t\t\tif (isSelected) button.classList.add('bg-primary', 'text-primary-foreground', 'hover:bg-primary/90');\n\t\t\t\t\t\telse if (isToday) button.classList.add('bg-accent', 'text-accent-foreground');\n\t\t\t\t\t\telse button.classList.add('hover:bg-accent', 'hover:text-accent-foreground');\n\n\t\t\t\t\t\tbutton.addEventListener('click', handleDayClick);\n\t\t\t\t\t\tdaysContainer.appendChild(button);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction handleDayClick(event) {\n\t\t\t\t\tconst day = parseInt(event.target.dataset.day);\n\t\t\t\t\tif (!day) return;\n\t\t\t\t\t\n\t\t\t\t\tselectedDate = new Date(Date.UTC(currentYear, currentMonth, day));\n\t\t\t\t\tconst isoFormattedValue = selectedDate.toISOString().split('T')[0];\n\t\t\t\t\t\n\t\t\t\t\thiddenInput.value = isoFormattedValue;\n\t\t\t\t\thiddenInput.dispatchEvent(new Event('change', { bubbles: true }));\n\n\t\t\t\t\tcontainer.dispatchEvent(new CustomEvent('calendar-date-selected', {\n\t\t\t\t\t\tbubbles: true,\n\t\t\t\t\t\tdetail: { date: selectedDate }\n\t\t\t\t\t}));\n\n\t\t\t\t\trenderCalendar();\n\t\t\t\t}\n\n\t\t\t\tprevButton.addEventListener('click', () => {\n\t\t\t\t\tcurrentMonth--;\n\t\t\t\t\tif (currentMonth < 0) { currentMonth = 11; currentYear--; }\n\t\t\t\t\tupdateMonthDisplay(); \n\t\t\t\t\trenderCalendar();\n\t\t\t\t});\n\n\t\t\t\tnextButton.addEventListener('click', () => {\n\t\t\t\t\tcurrentMonth++;\n\t\t\t\t\tif (currentMonth > 11) { currentMonth = 0; currentYear++; }\n\t\t\t\t\tupdateMonthDisplay(); \n\t\t\t\t\trenderCalendar();\n\t\t\t\t});\n\n\t\t\t\tupdateMonthDisplay();\n\t\t\t\trenderWeekdays();\n\t\t\t\trenderCalendar();\n\t\t\t}\n\n\t\t\tfunction initAllComponents(root = document) {\n\t\t\t\tfor (const calendar of root.querySelectorAll('[data-calendar-container]')) {\n\t\t\t\t\tinitCalendar(calendar);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdocument.addEventListener('DOMContentLoaded', () => initAllComponents());\n\t\t\tdocument.body.addEventListener('htmx:afterSwap', (e) => initAllComponents(e.target));\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = handle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var15), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
