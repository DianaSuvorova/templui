// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package datepicker

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/calendar"
	"github.com/axzilla/templui/component/popover"
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
	"time"
)

type Format string
type LocaleTag string

const (
	FormatLOCALE_SHORT  Format = "locale-short"  // Locale-specific short format (e.g., MM/DD/YY or DD.MM.YY)
	FormatLOCALE_MEDIUM Format = "locale-medium" // Locale-specific medium format (e.g., Jan 5, 2024 or 5. Jan. 2024)
	FormatLOCALE_LONG   Format = "locale-long"   // Locale-specific long format (e.g., January 5, 2024 or 5. Januar 2024)
	FormatLOCALE_FULL   Format = "locale-full"   // Locale-specific full format (e.g., Monday, January 5, 2024 or Montag, 5. Januar 2024)
)

// Common Locale Tags (BCP 47)
var (
	LocaleDefaultTag    = LocaleTag("en-US")
	LocaleTagChinese    = LocaleTag("zh-CN")
	LocaleTagFrench     = LocaleTag("fr-FR")
	LocaleTagGerman     = LocaleTag("de-DE")
	LocaleTagItalian    = LocaleTag("it-IT")
	LocaleTagJapanese   = LocaleTag("ja-JP")
	LocaleTagPortuguese = LocaleTag("pt-PT")
	LocaleTagSpanish    = LocaleTag("es-ES")
)

type Props struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Value       time.Time
	Format      Format    // Controls the display format using Intl dateStyle options.
	LocaleTag   LocaleTag // BCP 47 Locale Tag (e.g., "en-US", "es-ES"). Determines language and regional format defaults.
	Placeholder string
	Disabled    bool
	Required    bool
	HasError    bool
	Name        string
}

func DatePicker(props ...Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		if p.ID == "" {
			p.ID = util.RandomID()
		}
		if p.Name == "" {
			p.Name = p.ID
		}
		if p.Placeholder == "" {
			p.Placeholder = "Select a date"
		}
		if p.LocaleTag == "" {
			p.LocaleTag = LocaleDefaultTag
		}
		if p.Format == "" {
			p.Format = FormatLOCALE_MEDIUM
		}

		var contentID = p.ID + "-content"
		var valuePtr *time.Time
		if !p.Value.IsZero() {
			valuePtr = &p.Value
		}
		templ_7745c5c3_Err = Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Var4 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					if p.Placeholder != "" {
						var templ_7745c5c3_Var5 = []any{"text-left grow text-muted-foreground"}
						templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<span data-datepicker-display class=\"")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						var templ_7745c5c3_Var6 string
						templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
						if templ_7745c5c3_Err != nil {
							return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/datepicker/date_picker.templ`, Line: 1, Col: 0}
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\">")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						var templ_7745c5c3_Var7 string
						templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(p.Placeholder)
						if templ_7745c5c3_Err != nil {
							return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/datepicker/date_picker.templ`, Line: 95, Col: 21}
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</span>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " <span class=\"text-muted-foreground flex items-center ml-2\">")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = icon.Calendar(icon.Props{Size: 16}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = button.Button(button.Props{
					ID:      p.ID,
					Variant: button.VariantOutline,
					Class: util.TwMerge(
						"w-full select-trigger flex items-center justify-between",
						util.If(p.HasError, "border-destructive ring-destructive"),
						p.Class,
					),
					Disabled: p.Disabled,
					Attributes: util.MergeAttributes(p.Attributes, templ.Attributes{
						"data-display-format": string(p.Format),
						"data-locale-tag":     string(p.LocaleTag),
					}),
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = popover.Trigger(popover.TriggerProps{For: contentID}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var8 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Err = calendar.Calendar(calendar.Props{
					ID:        p.ID + "-calendar-instance",     // Pass ID for calendar instance
					Name:      p.Name,                          // Pass Name for hidden input
					LocaleTag: calendar.LocaleTag(p.LocaleTag), // Pass locale tag to calendar
					Value:     valuePtr,                        // Pass pointer to value
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = popover.Content(popover.ContentProps{
				ID:        contentID,
				Placement: popover.PlacementBottomStart,
				Class:     "p-3",
			}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var8), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = popover.Popover().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var handle = templ.NewOnceHandle()

func Script() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var10 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<script defer nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(templ.GetNonce(ctx))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `component/datepicker/date_picker.templ`, Line: 122, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\">\n\n\t\t\tfunction initializeDatePickerInstance(triggerButton) {\n\t\t\t\tif (!triggerButton || triggerButton._datePickerInitialized) return;\n\n\t\t\t\tconst datePickerID = triggerButton.id;\n\t\t\t\tconst displaySpan = triggerButton.querySelector('[data-datepicker-display]');\n\t\t\t\tconst calendarInstanceId = datePickerID + '-calendar-instance';\n\t\t\t\tconst calendarInstance = document.getElementById(calendarInstanceId);\n\t\t\t\tconst calendarHiddenInputId = calendarInstanceId + '-hidden';\n\t\t\t\tconst calendarHiddenInput = document.getElementById(calendarHiddenInputId);\n\n\t\t\t\tif (!displaySpan || !calendarInstance || !calendarHiddenInput) {\n\t\t\t\t\tconsole.error(\"DatePicker init error: Missing associated elements.\", { datePickerID });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst displayFormat = triggerButton.dataset.displayFormat || 'locale-medium';\n\t\t\t\tconst localeTag = triggerButton.dataset.localeTag || 'en-US';\n\t\t\t\tconst placeholder = triggerButton.dataset.placeholder || 'Select a date';\n\n\t\t\t\tfunction parseISODate(isoString) {\n\t\t\t\t\tif (!isoString || typeof isoString !== 'string') return null;\n\t\t\t\t\tconst parts = isoString.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n\t\t\t\t\tif (!parts) return null;\n\t\t\t\t\tconst year = parseInt(parts[1], 10);\n\t\t\t\t\tconst month = parseInt(parts[2], 10) - 1; // JS month is 0-indexed\n\t\t\t\t\tconst day = parseInt(parts[3], 10);\n\t\t\t\t\tconst date = new Date(Date.UTC(year, month, day));\n\t\t\t\t\tif (date.getUTCFullYear() === year && date.getUTCMonth() === month && date.getUTCDate() === day) {\n\t\t\t\t\t\treturn date;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tfunction formatDateWithIntl(date, format, localeTag) {\n\t\t\t\t\tif (!date || isNaN(date.getTime())) return '';\n\n\t\t\t\t\tlet options = {};\n\t\t\t\t\tswitch(format) {\n\t\t\t\t\t\tcase 'locale-short': \n\t\t\t\t\t\t\toptions = { dateStyle: 'short' }; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'locale-long': \n\t\t\t\t\t\t\toptions = { dateStyle: 'long' }; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'locale-full':\n\t\t\t\t\t\t\toptions = { dateStyle: 'full' }; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'locale-medium': // Default to medium\n\t\t\t\t\t\tdefault: \n\t\t\t\t\t\t\toptions = { dateStyle: 'medium' }; \n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new Intl.DateTimeFormat(localeTag, options).format(date);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error(`Error formatting date with Intl (locale: ${localeTag}, format: ${format}):`, e);\n\t\t\t\t\t\t// Fallback to locale default medium on error\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn new Intl.DateTimeFormat(localeTag, { dateStyle: 'medium' }).format(date);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\treturn date.toDateString(); // Absolute fallback\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction handleCalendarSelection(event) {\n\t\t\t\t\tif (!event.detail || !event.detail.date || !(event.detail.date instanceof Date)) {\n\t\t\t\t\t\treturn; \n\t\t\t\t\t}\n\t\t\t\t\tconst selectedDate = event.detail.date;\n\t\t\t\t\tconst displayFormattedValue = formatDateWithIntl(selectedDate, displayFormat, localeTag);\n\t\t\t\t\tdisplaySpan.innerHTML = ''; \n\t\t\t\t\tdisplaySpan.textContent = displayFormattedValue;\n\t\t\t\t\tdisplaySpan.classList.remove('text-muted-foreground');\n\t\t\t\t\ttriggerButton.click();\n\t\t\t\t}\n\n\t\t\t\tfunction correctInitialDisplay() {\n\t\t\t\t\tif (calendarHiddenInput && calendarHiddenInput.value) {\n\t\t\t\t\t\tconst initialDate = parseISODate(calendarHiddenInput.value);\n\t\t\t\t\t\tif (initialDate) {\n\t\t\t\t\t\t\tconst correctlyFormatted = formatDateWithIntl(initialDate, displayFormat, localeTag);\n\t\t\t\t\t\t\tif (displaySpan.textContent.trim() !== correctlyFormatted) {\n\t\t\t\t\t\t\t\tdisplaySpan.innerHTML = ''; \n\t\t\t\t\t\t\t\tdisplaySpan.textContent = correctlyFormatted;\n\t\t\t\t\t\t\t\tdisplaySpan.classList.remove('text-muted-foreground');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Ensure placeholder is shown if no initial value\n\t\t\t\t\t\tif (!displaySpan.textContent.trim() || displaySpan.textContent.trim() === placeholder) {\n\t\t\t\t\t\t\tdisplaySpan.innerHTML = '';\n\t\t\t\t\t\t\tconst placeholderSpan = document.createElement('span');\n\t\t\t\t\t\t\tplaceholderSpan.className = 'text-muted-foreground';\n\t\t\t\t\t\t\tplaceholderSpan.textContent = placeholder;\n\t\t\t\t\t\t\tdisplaySpan.appendChild(placeholderSpan);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (calendarInstance) {\n\t\t\t\t\tcalendarInstance.addEventListener('calendar-date-selected', handleCalendarSelection);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(`[DatePicker ${datePickerID}] Could not find calendar instance to attach listener!`);\n\t\t\t\t}\n\n\t\t\t\tcorrectInitialDisplay(); \n\n\t\t\t\ttriggerButton._datePickerInitialized = true;\n\n\t\t\t\ttriggerButton._datePickerCleanup = () => {\n\t\t\t\t\tif (calendarInstance) {\n\t\t\t\t\t\tcalendarInstance.removeEventListener('calendar-date-selected', handleCalendarSelection);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} // End initializeDatePickerInstance\n\n\t\t\t// --- Global Init & HTMX Hooks ---\n\t\t\tfunction initializeAllDatePickerTriggers(scopeElement) {\n\t\t\t\tscopeElement.querySelectorAll('button[id]:not([id$=\"-content\"]):not([id$=\"-hidden\"])').forEach(button => {\n\t\t\t\t\tif (button.hasAttribute('data-display-format') && button.hasAttribute('data-locale-tag')) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinitializeDatePickerInstance(button);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tconsole.error(\"Error initializing DatePicker trigger:\", e, button);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t\tinitializeAllDatePickerTriggers(document.body);\n\t\t\t});\n\n\t\t\tdocument.body.addEventListener('htmx:afterSwap', (event) => {\n\t\t\t\tconst target = event.detail.target || event.target;\n\t\t\t\tif (target instanceof Element) {\n\t\t\t\t\t// Initialize trigger if the swapped element IS the button\n\t\t\t\t\tif (target.matches('button[id][data-display-format][data-locale-tag]')) {\n\t\t\t\t\t\tinitializeDatePickerInstance(target);\n\t\t\t\t\t}\n\t\t\t\t\t// Initialize any triggers INSIDE the swapped element\n\t\t\t\t\tinitializeAllDatePickerTriggers(target);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdocument.body.addEventListener('htmx:beforeSwap', (event) => {\n\t\t\t\tlet target = event.detail.target || event.detail.elt;\n\t\t\t\tif (target instanceof Element) {\n\t\t\t\t\tconst cleanup = (button) => {\n\t\t\t\t\t\t// Check button directly for attributes\n\t\t\t\t\t\tif (button.hasAttribute('data-display-format') && button.hasAttribute('data-locale-tag')) {\n\t\t\t\t\t\t\tif (button._datePickerCleanup) {\n\t\t\t\t\t\t\t\tbutton._datePickerCleanup();\n\t\t\t\t\t\t\t\tdelete button._datePickerCleanup;\n\t\t\t\t\t\t\t\tdelete button._datePickerInitialized;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t// Cleanup the target itself if it's a valid button\n\t\t\t\t\tif (target.matches && target.matches('button[id][data-display-format][data-locale-tag]')) {\n\t\t\t\t\t\t cleanup(target);\n\t\t\t\t\t}\n\t\t\t\t\t// Cleanup buttons within the target\n\t\t\t\t\tif (target.querySelectorAll) {\n\t\t\t\t\t\ttarget.querySelectorAll('button[id][data-display-format][data-locale-tag]').forEach(cleanup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = handle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var10), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
