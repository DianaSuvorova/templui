package datepicker

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/calendar"
	"github.com/axzilla/templui/component/popover"
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
	"time"
)

type Format string
type LocaleTag string

const (
	FormatLOCALE_SHORT  Format = "locale-short"  // Locale-specific short format (e.g., MM/DD/YY or DD.MM.YY)
	FormatLOCALE_MEDIUM Format = "locale-medium" // Locale-specific medium format (e.g., Jan 5, 2024 or 5. Jan. 2024)
	FormatLOCALE_LONG   Format = "locale-long"   // Locale-specific long format (e.g., January 5, 2024 or 5. Januar 2024)
	FormatLOCALE_FULL   Format = "locale-full"   // Locale-specific full format (e.g., Monday, January 5, 2024 or Montag, 5. Januar 2024)
)

// Common Locale Tags (BCP 47)
var (
	LocaleDefaultTag    = LocaleTag("en-US")
	LocaleTagChinese    = LocaleTag("zh-CN")
	LocaleTagFrench     = LocaleTag("fr-FR")
	LocaleTagGerman     = LocaleTag("de-DE")
	LocaleTagItalian    = LocaleTag("it-IT")
	LocaleTagJapanese   = LocaleTag("ja-JP")
	LocaleTagPortuguese = LocaleTag("pt-PT")
	LocaleTagSpanish    = LocaleTag("es-ES")
)

type Props struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Value       time.Time
	Format      Format    // Controls the display format using Intl dateStyle options.
	LocaleTag   LocaleTag // BCP 47 Locale Tag (e.g., "en-US", "es-ES"). Determines language and regional format defaults.
	Placeholder string
	Disabled    bool
	Required    bool
	HasError    bool
	Name        string
}

templ DatePicker(props ...Props) {
	{{
		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		if p.ID == "" {
			p.ID = util.RandomID()
		}
		if p.Name == "" {
			p.Name = p.ID
		}
		if p.Placeholder == "" {
			p.Placeholder = "Select a date"
		}
		if p.LocaleTag == "" {
			p.LocaleTag = LocaleDefaultTag
		}
		if p.Format == "" {
			p.Format = FormatLOCALE_MEDIUM
		}

		var contentID = p.ID + "-content"
		var valuePtr *time.Time
		if !p.Value.IsZero() {
			valuePtr = &p.Value
		}
	}}
	@Script()
	@popover.Popover() {
		@popover.Trigger(popover.TriggerProps{For: contentID}) {
			@button.Button(button.Props{
				ID:      p.ID,
				Variant: button.VariantOutline,
				Class: util.TwMerge(
					"w-full select-trigger flex items-center justify-between",
					util.If(p.HasError, "border-destructive ring-destructive"),
					p.Class,
				),
				Disabled: p.Disabled,
				Attributes: util.MergeAttributes(p.Attributes, templ.Attributes{
					"data-display-format": string(p.Format),
					"data-locale-tag":     string(p.LocaleTag),
				}),
			}) {
				if p.Placeholder != "" {
					<span data-datepicker-display class={ "text-left grow text-muted-foreground" }>
						{ p.Placeholder }
					</span>
				}
				<span class="text-muted-foreground flex items-center ml-2">
					@icon.Calendar(icon.Props{Size: 16})
				</span>
			}
		}
		@popover.Content(popover.ContentProps{
			ID:        contentID,
			Placement: popover.PlacementBottomStart,
			Class:     "p-3",
		}) {
			@calendar.Calendar(calendar.Props{
				ID:        p.ID + "-calendar-instance",     // Pass ID for calendar instance
				Name:      p.Name,                          // Pass Name for hidden input
				LocaleTag: calendar.LocaleTag(p.LocaleTag), // Pass locale tag to calendar
				Value:     valuePtr,                        // Pass pointer to value
			})
		}
	}
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>

			function initializeDatePickerInstance(triggerButton) {
				if (!triggerButton || triggerButton._datePickerInitialized) return;

				const datePickerID = triggerButton.id;
				const displaySpan = triggerButton.querySelector('[data-datepicker-display]');
				const calendarInstanceId = datePickerID + '-calendar-instance';
				const calendarInstance = document.getElementById(calendarInstanceId);
				const calendarHiddenInputId = calendarInstanceId + '-hidden';
				const calendarHiddenInput = document.getElementById(calendarHiddenInputId);

				if (!displaySpan || !calendarInstance || !calendarHiddenInput) {
					console.error("DatePicker init error: Missing associated elements.", { datePickerID });
					return;
				}

				const displayFormat = triggerButton.dataset.displayFormat || 'locale-medium';
				const localeTag = triggerButton.dataset.localeTag || 'en-US';
				const placeholder = triggerButton.dataset.placeholder || 'Select a date';

				function parseISODate(isoString) {
					if (!isoString || typeof isoString !== 'string') return null;
					const parts = isoString.match(/^(\d{4})-(\d{2})-(\d{2})$/);
					if (!parts) return null;
					const year = parseInt(parts[1], 10);
					const month = parseInt(parts[2], 10) - 1; // JS month is 0-indexed
					const day = parseInt(parts[3], 10);
					const date = new Date(Date.UTC(year, month, day));
					if (date.getUTCFullYear() === year && date.getUTCMonth() === month && date.getUTCDate() === day) {
						return date;
					}
					return null;
				}

				function formatDateWithIntl(date, format, localeTag) {
					if (!date || isNaN(date.getTime())) return '';

					let options = {};
					switch(format) {
						case 'locale-short': 
							options = { dateStyle: 'short' }; 
							break;
						case 'locale-long': 
							options = { dateStyle: 'long' }; 
							break;
						case 'locale-full':
							options = { dateStyle: 'full' }; 
							break;
						case 'locale-medium': // Default to medium
						default: 
							options = { dateStyle: 'medium' }; 
							break;
					}
					
					try {
						return new Intl.DateTimeFormat(localeTag, options).format(date);
					} catch (e) {
						console.error(`Error formatting date with Intl (locale: ${localeTag}, format: ${format}):`, e);
						// Fallback to locale default medium on error
						try {
							return new Intl.DateTimeFormat(localeTag, { dateStyle: 'medium' }).format(date);
						} catch {
							return date.toDateString(); // Absolute fallback
						}
					}
				}

				function handleCalendarSelection(event) {
					if (!event.detail || !event.detail.date || !(event.detail.date instanceof Date)) {
						return; 
					}
					const selectedDate = event.detail.date;
					const displayFormattedValue = formatDateWithIntl(selectedDate, displayFormat, localeTag);
					displaySpan.innerHTML = ''; 
					displaySpan.textContent = displayFormattedValue;
					displaySpan.classList.remove('text-muted-foreground');
					triggerButton.click();
				}

				function correctInitialDisplay() {
					if (calendarHiddenInput && calendarHiddenInput.value) {
						const initialDate = parseISODate(calendarHiddenInput.value);
						if (initialDate) {
							const correctlyFormatted = formatDateWithIntl(initialDate, displayFormat, localeTag);
							if (displaySpan.textContent.trim() !== correctlyFormatted) {
								displaySpan.innerHTML = ''; 
								displaySpan.textContent = correctlyFormatted;
								displaySpan.classList.remove('text-muted-foreground');
							}
						}
					} else {
						// Ensure placeholder is shown if no initial value
						if (!displaySpan.textContent.trim() || displaySpan.textContent.trim() === placeholder) {
							displaySpan.innerHTML = '';
							const placeholderSpan = document.createElement('span');
							placeholderSpan.className = 'text-muted-foreground';
							placeholderSpan.textContent = placeholder;
							displaySpan.appendChild(placeholderSpan);
						}
					}
				}

				if (calendarInstance) {
					calendarInstance.addEventListener('calendar-date-selected', handleCalendarSelection);
				} else {
					console.error(`[DatePicker ${datePickerID}] Could not find calendar instance to attach listener!`);
				}

				correctInitialDisplay(); 

				triggerButton._datePickerInitialized = true;

				triggerButton._datePickerCleanup = () => {
					if (calendarInstance) {
						calendarInstance.removeEventListener('calendar-date-selected', handleCalendarSelection);
					}
				};
			} // End initializeDatePickerInstance

			// --- Global Init & HTMX Hooks ---
			function initializeAllDatePickerTriggers(scopeElement) {
				scopeElement.querySelectorAll('button[id]:not([id$="-content"]):not([id$="-hidden"])').forEach(button => {
					if (button.hasAttribute('data-display-format') && button.hasAttribute('data-locale-tag')) {
						try {
							initializeDatePickerInstance(button);
						} catch(e) {
							console.error("Error initializing DatePicker trigger:", e, button);
						}
					}
				});
			}

			document.addEventListener('DOMContentLoaded', () => {
				initializeAllDatePickerTriggers(document.body);
			});

			document.body.addEventListener('htmx:afterSwap', (event) => {
				const target = event.detail.target || event.target;
				if (target instanceof Element) {
					// Initialize trigger if the swapped element IS the button
					if (target.matches('button[id][data-display-format][data-locale-tag]')) {
						initializeDatePickerInstance(target);
					}
					// Initialize any triggers INSIDE the swapped element
					initializeAllDatePickerTriggers(target);
				}
			});

			document.body.addEventListener('htmx:beforeSwap', (event) => {
				let target = event.detail.target || event.detail.elt;
				if (target instanceof Element) {
					const cleanup = (button) => {
						// Check button directly for attributes
						if (button.hasAttribute('data-display-format') && button.hasAttribute('data-locale-tag')) {
							if (button._datePickerCleanup) {
								button._datePickerCleanup();
								delete button._datePickerCleanup;
								delete button._datePickerInitialized;
							}
						}
					};
					// Cleanup the target itself if it's a valid button
					if (target.matches && target.matches('button[id][data-display-format][data-locale-tag]')) {
						 cleanup(target);
					}
					// Cleanup buttons within the target
					if (target.querySelectorAll) {
						target.querySelectorAll('button[id][data-display-format][data-locale-tag]').forEach(cleanup);
					}
				}
			});
		</script>
	}
}
