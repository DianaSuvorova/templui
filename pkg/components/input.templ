package components

import "github.com/axzilla/goilerplate/pkg/utils"

// InputType defines the available input field types
type InputType string

const (
	// Standard text inputs
	InputTypeText     InputType = "text"
	InputTypePassword InputType = "password"
	InputTypeEmail    InputType = "email"
	InputTypeNumber   InputType = "number"
	InputTypeTel      InputType = "tel"
	InputTypeURL      InputType = "url"
	InputTypeSearch   InputType = "search"

	// Date and time inputs
	InputTypeDate InputType = "date"
	InputTypeTime InputType = "time"

	// File upload input
	InputTypeFile InputType = "file"
)

// InputProps defines configuration options for the Input component
type InputProps struct {
	// Type controls the input's behavior (text, email, password etc)
	Type InputType

	// Placeholder text shown when input is empty
	Placeholder string

	// Value sets the current content of the input field
	Value string

	// Name identifies the field in form submissions
	Name string

	// ID uniquely identifies the input element in the DOM
	ID string

	// Disabled prevents user interaction when true
	Disabled bool

	// Readonly prevents user input but allows for selection and copying
	Readonly bool

	// Class applies custom CSS classes to the input element
	Class string

	// ErrorClass applies custom CSS classes to the input element when an error is present
	ErrorClass string

	// FileAccept specifies allowed file types (only for file inputs)
	FileAccept string

	// HasError indicates whether the input should be styled as an error
	HasError bool

	// Attributes for additional HTML/Alpine.js bindings
	Attributes templ.Attributes
}

// Text field that allows users to enter and edit values.
//
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/input
templ Input(props InputProps) {
	<input
		x-ref={ props.ID }
		type={ string(props.Type) }
		placeholder={ props.Placeholder }
		disabled?={ props.Disabled }
		readonly?={ props.Readonly }
		name={ props.Name }
		if props.Value != "" {
			value={ props.Value }
		}
		id={ props.ID }
		class={
			utils.TwMerge(
				// Layout
				"peer flex h-10 w-full px-3 py-2",
		
				// Styling
				"rounded-md border border-input bg-background text-sm ring-offset-background",
				"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground ",
				"placeholder:text-muted-foreground",
		
				// States
				"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
				"disabled:cursor-not-allowed disabled:opacity-50",
		
				// Conditional
				utils.TwIf("border-destructive ring-destructive", props.HasError),
		
				// Custom
				props.Class,
			),
		}
		if props.Type == InputTypeFile {
			accept={ props.FileAccept }
		}
		{ props.Attributes... }
	/>
}
