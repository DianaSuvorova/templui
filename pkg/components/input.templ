package components

import "github.com/axzilla/goilerplate/pkg/utils"

// InputType represents the type of the input field.
type InputType string

// Constants for input types.
const (
	InputTypeText     InputType = "text"
	InputTypePassword InputType = "password"
	InputTypeEmail    InputType = "email"
	InputTypeNumber   InputType = "number"
	InputTypeTel      InputType = "tel"
	InputTypeURL      InputType = "url"
	InputTypeSearch   InputType = "search"
	InputTypeDate     InputType = "date"
	InputTypeTime     InputType = "time"
	InputTypeFile     InputType = "file"
)

// InputProps defines the properties for the Input component.
type InputProps struct {
	// Type specifies the type of the input field.
	// Default: Text
	Type InputType

	// Placeholder is the placeholder text for the input field.
	// Default: "" (empty string)
	Placeholder string

	// Value is the current value of the input field.
	// Default: "" (empty string)
	Value string

	// Name is the name attribute of the input field.
	// Default: "" (empty string)
	Name string

	// ID is the unique identifier for the input field.
	// Default: "" (empty string)
	ID string

	// Label
	Label string

	// Description
	Description string

	// Error
	Error string

	// Class specifies additional CSS classes to apply to the input field.
	// Default: "" (empty string)
	Class string

	// FileAccept specifies which file types are accepted (only for file type).
	// Default: "" (empty string)
	FileAccept string

	// Attributes allows passing additional HTML attributes to the input element.
	// Default: nil
	Attributes templ.Attributes
}

// Input renders an input component based on the provided props.
// It can be customized with various types, sizes, and behaviors.
//
// Usage:
//
//	@components.Input(components.InputProps{
//	  Type: components.Email,
//	  Placeholder: "Enter your email",
//	  ID: "email-input",
//	  Class: "custom-input",
//	  Attributes: templ.Attributes{
//	    "aria-label": "Email input",
//	    "data-testid": "email-input",
//	  },
//	})
//
// Props:
//   - Type: The type of the input field (e.g., Text, Email, Password). Default: Text
//   - Placeholder: The placeholder text for the input field. Default: "" (empty string)
//   - Value: The current value of the input field. Default: "" (empty string)
//   - Name: The name attribute of the input field. Default: "" (empty string)
//   - ID: The unique identifier for the input field. Default: "" (empty string)
//   - Class: Additional CSS classes to apply to the input field. Default: "" (empty string)
//   - Disabled: Can be either a bool or a string. If bool (Go), it directly controls the disabled state. If string, it's treated as a JavaScript expression for dynamic disabling. Default: nil
//   - FileAccept: Specifies which file types are accepted (only for file type). Default: "" (empty string)
//   - Attributes: Additional HTML attributes to apply to the input element. Default: nil
templ Input(props InputProps) {
	<span class="space-y-2">
		if props.Label != "" {
			<label
				for={ props.ID }
				class={ "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",   
      templ.KV("text-destructive", len(props.Error)>0) }
			>
				{ props.Label }
			</label>
		}
		<input
			type={ string(props.Type) }
			placeholder={ props.Placeholder }
			name={ props.Name }
			value={ props.Value }
			id={ props.ID }
			class={
				utils.TwMerge("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background",
					"file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground",
					"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
					"disabled:cursor-not-allowed disabled:opacity-50",
					"file:text-foreground dark:file:text-foreground",
					props.Class),
			}
			if props.Type == InputTypeFile {
				accept={ props.FileAccept }
			}
			{ props.Attributes... }
		/>
		if props.Description != "" {
			<p class="text-sm text-muted-foreground m-0">{ props.Description }</p>
		}
		if props.Error != "" {
			<p class="text-sm font-medium text-destructive">{ props.Error }</p>
		}
	</span>
}
