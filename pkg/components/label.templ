package components

type LabelProps struct {
	ID            string // Optional label ID
	For           string // Target input ID
	Text          string // Label text
	Error         string // Error message
	Class         string // Additional CSS classes
	DisabledClass string // Additional CSS classes when the input is disabled
}

templ LabelScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
            function initLabel(label) {
                const input = document.getElementById(label.getAttribute('for'));
                if (!input) return;
                
                const disabledStyle = label.dataset.disabledStyle.split(' ');
                
                function getClass() {
                    if (input.disabled) {
                        label.classList.add(...disabledStyle);
                    } else {
                        label.classList.remove(...disabledStyle);
                    }
                }
                
                getClass();
                
                input.addEventListener('change', getClass);
            }
            
            document.addEventListener('DOMContentLoaded', () => {
                document.querySelectorAll('label[data-label-behavior]').forEach(label => initLabel(label));
            });
        </script>
	}
}

templ Label(props LabelProps) {
	<label
		data-label-behavior
		id={ props.ID }
		for={ props.For }
		class={
			"text-sm font-medium leading-none",
			templ.KV("text-destructive", len(props.Error) > 0),
			props.Class,
		}
		if props.DisabledClass != "" {
			data-disabled-style={ props.DisabledClass }
		} else {
			data-disabled-style="opacity-50 cursor-not-allowed"
		}
	>
		{ props.Text }
	</label>
}
