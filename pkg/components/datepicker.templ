package components

import (
	"github.com/axzilla/goilerplate/pkg/icons"
	"github.com/axzilla/goilerplate/pkg/utils"
	"time"
)

// DateFormat defines the available date formatting styles
type DateFormat string

const (
	// DateFormatISO represents ISO format (YYYY-MM-DD)
	DateFormatISO DateFormat = "iso"
	// DateFormatEU represents European format (DD.MM.YYYY)
	DateFormatEU DateFormat = "eu"
	// DateFormatUK represents UK format (DD/MM/YYYY)
	DateFormatUK DateFormat = "uk"
	// DateFormatUS represents US format (MM/DD/YYYY)
	DateFormatUS DateFormat = "us"
	// DateFormatLONG represents long format (Month DD, YYYY)
	DateFormatLONG DateFormat = "long"
)

// dateFormatMapping maps DateFormat to Go time format strings
var dateFormatMapping = map[DateFormat]string{
	DateFormatISO:  "2006-01-02",
	DateFormatEU:   "02.01.2006",
	DateFormatUK:   "02/01/2006",
	DateFormatUS:   "01/02/2006",
	DateFormatLONG: "January 2, 2006",
}

// DateLocale defines localization settings for the datepicker
type DateLocale struct {
	// MonthNames contains the localized names of months
	MonthNames []string
	// DayNames contains the localized abbreviated day names
	DayNames []string
}

// DateLocaleDefault provides English localization
var DateLocaleDefault = DateLocale{
	MonthNames: []string{"January", "February", "March", "April", "May", "June",
		"July", "August", "September", "October", "November", "December"},
	DayNames: []string{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"},
}

// Pre-defined locales for different languages
var (
	// DateLocaleSpanish provides Spanish localization
	DateLocaleSpanish = DateLocale{
		MonthNames: []string{"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
			"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"},
		DayNames: []string{"Lu", "Ma", "Mi", "Ju", "Vi", "Sa", "Do"},
	}

	// DateLocaleGerman provides German localization
	DateLocaleGerman = DateLocale{
		MonthNames: []string{"Januar", "Februar", "März", "April", "Mai", "Juni",
			"Juli", "August", "September", "Oktober", "November", "Dezember"},
		DayNames: []string{"Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"},
	}

	// DateLocaleFrench provides French localization
	DateLocaleFrench = DateLocale{
		MonthNames: []string{"Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
			"Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"},
		DayNames: []string{"Lu", "Ma", "Me", "Je", "Ve", "Sa", "Di"},
	}

	// DateLocaleItalian provides Italian localization
	DateLocaleItalian = DateLocale{
		MonthNames: []string{"Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno",
			"Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"},
		DayNames: []string{"Lu", "Ma", "Me", "Gi", "Ve", "Sa", "Do"},
	}
)

// DatepickerConfig combines format and locale settings
type DatepickerConfig struct {
	Format DateFormat
	Locale DateLocale
}

// Pre-defined datepicker configurations
var (
	// DatePickerISO provides ISO format with default locale
	DatePickerISO = DatepickerConfig{
		Format: DateFormatISO,
		Locale: DateLocaleDefault,
	}

	// DatePickerEU provides European format with default locale
	DatePickerEU = DatepickerConfig{
		Format: DateFormatEU,
		Locale: DateLocaleDefault,
	}

	// DatePickerUK provides UK format with default locale
	DatePickerUK = DatepickerConfig{
		Format: DateFormatUK,
		Locale: DateLocaleDefault,
	}

	// DatePickerUS provides US format with default locale
	DatePickerUS = DatepickerConfig{
		Format: DateFormatUS,
		Locale: DateLocaleDefault,
	}

	// DatePickerUS provides US format with default locale
	DatePickerLONG = DatepickerConfig{
		Format: DateFormatLONG,
		Locale: DateLocaleDefault,
	}
)

// NewDatepickerConfig creates a new configuration with specified format and locale
func NewDatepickerConfig(format DateFormat, locale DateLocale) DatepickerConfig {
	return DatepickerConfig{
		Format: format,
		Locale: locale,
	}
}

// GetGoFormat returns the Go time format string for the current configuration
func (c DatepickerConfig) GetGoFormat() string {
	if format, ok := dateFormatMapping[c.Format]; ok {
		return format
	}
	return dateFormatMapping[DateFormatISO] // Default to ISO
}

// DatepickerProps defines all available props for the Datepicker component
type DatepickerProps struct {
	// ID sets the input element's ID
	ID string
	// Name sets the input element's name
	Name string
	// Value sets the initial date
	Value time.Time
	// Config provides format and locale settings
	Config DatepickerConfig
	// Placeholder sets the input placeholder text
	Placeholder string
	// Disabled controls whether the datepicker can be interacted with
	Disabled bool
	// Class adds custom CSS classes
	Class string
	// Attributes allows additional HTML attributes
	Attributes templ.Attributes
}

// Calendar interface for selecting and formatting dates.
//
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/datepicker
//
// Features:
// - Multiple date formats (ISO, EU, US, UK, Long)
// - Localization support for months and weekdays
// - Popup calendar for date selection
// - Keyboard navigation support
// - Responsive positioning
// - Custom styling support
//
// Props:
// - ID: Input element identifier
// - Name: Form field name
// - Value: Initial date value
// - Config: Format and locale settings
// - Placeholder: Input placeholder text
// - Disabled: Interactivity state
// - Class: Additional CSS classes
// - Attributes: Additional HTML attributes
templ Datepicker(props DatepickerProps) {
	<div
		class={ utils.TwMerge("relative", props.Class) }
		if props.Value != (time.Time{}) {
			data-value={ props.Value.Format(props.Config.GetGoFormat()) }
		}
		data-format={ string(props.Config.Format) }
		data-monthnames={ templ.JSONString(props.Config.Locale.MonthNames) }
		data-daynames={ templ.JSONString(props.Config.Locale.DayNames) }
		x-data="{
            open: false,
            value: null,
            format: $el.dataset.format,
            currentMonth: 5,
            currentYear: new Date().getFullYear(),
            monthDays: [],
            blankDays: [],
            months: JSON.parse($el.dataset.monthnames) || ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            days: JSON.parse($el.dataset.daynames) || ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],

            position: 'bottom',

            init() {
                const initialDate = $el.dataset.value ? new Date(this.parseDate($el.dataset.value)) : new Date();
                this.currentMonth = initialDate.getMonth();
                this.currentYear = initialDate.getFullYear();
                this.calculateDays();
                // Format the initial value using the correct locale
                if ($el.dataset.value) {
                    this.value = this.formatDate(initialDate);
                }
            },

            toggleDatePicker() {
                this.open = !this.open;
                if (this.open) {
                    this.$nextTick(() => this.updatePosition());
                }
            },

            updatePosition() {
                const trigger = this.$refs.datePickerInput;
                const popup = this.$refs.datePickerPopup;
                const rect = trigger.getBoundingClientRect();
                const popupRect = popup.getBoundingClientRect();
                const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                
                if (rect.bottom + popupRect.height > viewportHeight && rect.top > popupRect.height) {
                    this.position = 'top';
                } else {
                    this.position = 'bottom';
                }
            },

            calculateDays() {
                const firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay();
                const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();
                
                this.blankDays = Array.from({ length: firstDay }, (_, i) => i);
                this.monthDays = Array.from({ length: daysInMonth }, (_, i) => i + 1);
            },

			parseDate(dateStr) {
				const parts = dateStr.split(/[-/.]/);
				switch(this.format) {
					case 'eu':
						return `${parts[2]}-${parts[1]}-${parts[0]}`;
					case 'us':
						return `${parts[2]}-${parts[0]}-${parts[1]}`;
					case 'uk':
						return `${parts[2]}-${parts[1]}-${parts[0]}`;
					case 'long':
					case 'iso':
					default:
						return dateStr;  // Für ISO und long Format das Datum unverändert lassen
				}
			}, 

			formatDate(date) {
                const d = date.getDate().toString().padStart(2, '0');
                const m = (date.getMonth() + 1).toString().padStart(2, '0');
                const y = date.getFullYear();

                switch(this.format) {
                    case 'eu':
                        return `${d}.${m}.${y}`;
					case 'uk':
						return `${d}/${m}/${y}`;
                    case 'us':
                        return `${m}/${d}/${y}`;
                    case 'long':
                        // Use the months array from the provided locale
                        return `${this.months[date.getMonth()]} ${d}, ${y}`;
					// case 'iso'
                    default:
                        return `${y}-${m}-${d}`;
                }
            },

            isToday(day) {
                const today = new Date();
                const date = new Date(this.currentYear, this.currentMonth, day);
                return date.toDateString() === today.toDateString();
            },

            isSelected(day) {
                if (!this.value) return false;
                const date = new Date(this.currentYear, this.currentMonth, day);
                const selected = new Date(this.parseDate(this.value));
                return date.toDateString() === selected.toDateString();
            },

            selectDate(day) {
                const date = new Date(this.currentYear, this.currentMonth, day);
                this.value = this.formatDate(date);
                this.open = false;
            }
        }"
		@resize.window="if (open) updatePosition()"
	>
		<div class="relative">
			<input
				x-ref="datePickerInput"
				type="text"
				id={ props.ID }
				name={ props.Name }
				if props.Placeholder != "" {
					placeholder={ props.Placeholder }
				} else {
					placeholder="Select date"
				}
				disabled?={ props.Disabled }
				:value="value"
				x-modelable="value"
				@click="toggleDatePicker()"
				readonly
				class="peer flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
				{ props.Attributes... }
			/>
			<button
				type="button"
				@click="toggleDatePicker()"
				disabled?={ props.Disabled }
				class="peer-disabled:pointer-events-none peer-disabled:opacity-50 absolute top-0 right-0 px-3 py-2 cursor-pointer text-muted-foreground hover:text-foreground"
			>
				@icons.Calendar(icons.IconProps{})
			</button>
		</div>
		<div
			x-show="open"
			x-ref="datePickerPopup"
			@click.away="open = false"
			x-transition.opacity
			class="absolute left-0 z-50 mt-1 w-64 rounded-lg border bg-popover p-4 shadow-md"
			:class="{'top-full mt-1': position === 'bottom','bottom-full mb-1': position === 'top'}"
		>
			<div class="flex items-center justify-between mb-4">
				<span x-text="months[currentMonth] + ' ' + currentYear" class="text-sm font-medium"></span>
				<div class="flex gap-1">
					<button
						type="button"
						@click="currentMonth--; if(currentMonth < 0) { currentMonth = 11; currentYear--; } calculateDays()"
						class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-7 w-7"
					>
						@icons.ChevronLeft(icons.IconProps{})
					</button>
					<button
						type="button"
						@click="currentMonth++; if(currentMonth > 11) { currentMonth = 0; currentYear++; } calculateDays()"
						class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-7 w-7"
					>
						@icons.ChevronRight(icons.IconProps{})
					</button>
				</div>
			</div>
			<div class="grid grid-cols-7 gap-1 mb-2">
				<template x-for="day in days" :key="day">
					<div class="text-center text-xs text-muted-foreground" x-text="day"></div>
				</template>
			</div>
			<div class="grid grid-cols-7 gap-1">
				<template x-for="blank in blankDays" :key="'blank' + blank">
					<div class="h-8 w-8"></div>
				</template>
				<template x-for="day in monthDays" :key="day">
					<button
						type="button"
						@click="selectDate(day)"
						x-text="day"
						:class="{
                            'bg-primary text-primary-foreground': isSelected(day),
                            'text-red-500': isToday(day) && !isSelected(day),
                            'hover:bg-accent hover:text-accent-foreground': !isSelected(day)
                        }"
						class="inline-flex h-8 w-8 items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
					></button>
				</template>
			</div>
		</div>
	</div>
}
