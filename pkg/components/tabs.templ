package components

import "fmt"

type Tab struct {
	ID      string          // Unique identifier for the tab
	Title   string          // Tab title
	Content templ.Component // Tab content
}

type TabsProps struct {
	Tabs                  []Tab  // List of tabs
	TabsContainerClass    string // Additional CSS classes for the tabs container
	ContentContainerClass string // Additional CSS classes for the content container
}

templ tabsHandler() {
	<script nonce={ templ.GetNonce(ctx) }>
        // Initialize tabs
        function initTabs(container) {
            const tabs = container.querySelectorAll('.tab-button')
            const contents = container.querySelectorAll('.tab-content')

            // Activate the first tab
            if (tabs.length > 0) {
                tabs[0].classList.add('text-foreground', 'bg-background', 'shadow-sm')
                contents[0].classList.remove('hidden')
            }

            // Click handler for all tabs
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    // Remove active classes
                    tabs.forEach(t => t.classList.remove('text-foreground', 'bg-background', 'shadow-sm'))
                    contents.forEach(c => c.classList.add('hidden'))

                    // Active tab
                    tab.classList.add('text-foreground', 'bg-background', 'shadow-sm')
                    const target = tab.dataset.tabTarget
                    container.querySelector(`#${target}`).classList.remove('hidden')
                })
            })
        }

        // Initialize all tab components
        document.querySelectorAll('.tabs-component').forEach(initTabs)
    </script>
}

templ Tabs(props TabsProps) {
	@tabsHandler()
	<div class="tabs-component">
		<div class={ "relative flex items-center justify-center h-10 p-1 rounded-lg select-none bg-muted text-muted-foreground", props.TabsContainerClass }>
			for i, tab := range props.Tabs {
				<button
					type="button"
					data-tab-target={ fmt.Sprintf("tab-%d", i) }
					class="tab-button relative z-20 flex-1 inline-flex items-center justify-center h-8 px-3 text-sm font-medium transition-all rounded-md cursor-pointer whitespace-nowrap hover:text-foreground"
				>
					{ tab.Title }
				</button>
			}
		</div>
		<div class={ "relative mt-2", props.ContentContainerClass }>
			for i, tab := range props.Tabs {
				<div
					id={ fmt.Sprintf("tab-%d", i) }
					class="tab-content relative hidden"
				>
					@tab.Content
				</div>
			}
		</div>
	</div>
}
