package components

import (
	"fmt"
	"github.com/axzilla/templui/pkg/icons"
	"github.com/axzilla/templui/pkg/utils"
	"strings"
)

// DropdownMenuItem defines a single menu item
type DropdownMenuItem struct {
	Label      string             // Display text
	Value      string             // Optional value
	Href       string             // Optional link URL
	Target     string             // Optional link target
	IconLeft   templ.Component    // Optional icon on the left
	IconRight  templ.Component    // Optional icon on the right
	SubItems   []DropdownMenuItem // Nested submenu items
	Disabled   bool               // Disables the item
	Attributes templ.Attributes   // Additional HTML attributes
}

// DropdownMenuProps defines the properties of the dropdown
type DropdownMenuProps struct {
	Items    []DropdownMenuItem // Menu items
	Trigger  templ.Component    // Custom trigger element
	Class    string             // Additional CSS classes
	Position string             // Preferred placement (only top or bottom)
}

// modifierClasses returns the classes based on the item's state
func (d DropdownMenuItem) modifierClasses() string {
	classes := []string{}
	if d.Disabled {
		classes = append(classes, "text-muted-foreground cursor-not-allowed")
	} else {
		classes = append(classes, "text-foreground hover:bg-accent hover:text-accent-foreground")
	}
	return strings.Join(classes, " ")
}

// renderMenuItem renders a single menu item recursively
templ renderMenuItem(item DropdownMenuItem, index int, depth int) {
	if len(item.SubItems) > 0 {
		<div class="relative group/submenu">
			<button
				class={
					utils.TwMerge(
						"w-full text-left flex items-center justify-between px-4 py-2 text-sm",
						item.modifierClasses(),
					),
				}
				role="menuitem"
				tabindex="-1"
				id={ fmt.Sprintf("menu-item-%d", index) }
				aria-haspopup="true"
				aria-expanded="false"
				disabled?={ item.Disabled }
				{ item.Attributes... }
			>
				<span class="flex items-center gap-2">
					if item.IconLeft != nil {
						@item.IconLeft
					}
					{ item.Label }
				</span>
				if item.IconRight != nil {
					@item.IconRight
				} else {
					@icons.ChevronRight(icons.IconProps{Size: "16"})
				}
			</button>
			if depth < 3 {
				<div
					class={ "absolute left-full top-0 hidden group-hover/submenu:block py-1 bg-popover rounded-md shadow-lg border border-border w-56", }
				>
					for subIndex, subItem := range item.SubItems {
						@renderMenuItem(subItem, subIndex, depth+1)
					}
				</div>
			}
		</div>
	} else if item.Href != "" {
		<a
			href={ templ.SafeURL(item.Href) }
			target={ item.Target }
			class={
				"block w-full px-4 py-2 text-sm flex items-center",
				templ.KV("text-foreground hover:bg-accent hover:text-accent-foreground", !item.Disabled),
				templ.KV("text-muted-foreground cursor-not-allowed", item.Disabled),
			}
			role="menuitem"
			tabindex="-1"
			id={ fmt.Sprintf("menu-item-%d", index) }
			{ item.Attributes... }
		>
			<span class="flex items-center gap-2">
				if item.IconLeft != nil {
					@item.IconLeft
				}
				{ item.Label }
			</span>
			if item.IconRight != nil {
				<span class="ml-auto">
					@item.IconRight
				</span>
			}
		</a>
	} else {
		<button
			class={
				"w-full text-left flex items-center justify-between px-4 py-2 text-sm",
				templ.KV("text-foreground hover:bg-accent hover:text-accent-foreground", !item.Disabled),
				templ.KV("text-muted-foreground cursor-not-allowed", item.Disabled),
			}
			role="menuitem"
			tabindex="-1"
			id={ fmt.Sprintf("menu-item-%d", index) }
			disabled?={ item.Disabled }
			{ item.Attributes... }
		>
			<span class="flex items-center gap-2">
				if item.IconLeft != nil {
					@item.IconLeft
				}
				{ item.Label }
			</span>
			if item.IconRight != nil {
				@item.IconRight
			}
		</button>
	}
}

// DropdownMenuScript defines the Vanilla JS logic for dropdowns
templ DropdownMenuScript() {
	// Ensure the script is only included once
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
            document.addEventListener('DOMContentLoaded', () => {
                // Select all dropdown menus on the page
                const dropdowns = document.querySelectorAll('.dropdown-menu');

                dropdowns.forEach(dropdown => {
                    // Get the trigger and content elements
                    const trigger = dropdown.querySelector('.dropdown-trigger');
                    const menu = dropdown.querySelector('.dropdown-content');
                    const initialPosition = menu.getAttribute('data-initial-position') || 'bottom';

                    // Reset the menu position to its initial state
                    function resetPosition() {
                        menu.classList.remove('bottom-full', 'mb-2', 'top-full', 'mt-2');
                        switch (initialPosition) {
                            case 'top':
                                menu.classList.add('bottom-full', 'mb-2');
                                break;
                            case 'bottom':
                                menu.classList.add('top-full', 'mt-2');
                                break;
                            default:
                                menu.classList.add('top-full', 'mt-2'); // Default: Bottom
                        }
                    }

                    // Toggle the menu visibility
                    function toggleMenu() {
                        const isOpen = !menu.classList.contains('hidden');
                        if (isOpen) {
                            menu.classList.add('hidden');
                        } else {
                            resetPosition();
                            menu.classList.remove('hidden');
                            adjustPosition();
                        }
                    }

                    // Adjust the menu position based on viewport space
                    function adjustPosition() {
                        const rect = menu.getBoundingClientRect();
                        const triggerRect = trigger.getBoundingClientRect();
                        const viewportHeight = window.innerHeight;

                        if (rect.bottom > viewportHeight && initialPosition === 'bottom') {
                            menu.classList.remove('top-full', 'mt-2');
                            menu.classList.add('bottom-full', 'mb-2');
                        } else if (rect.top < 0 && initialPosition === 'top') {
                            menu.classList.remove('bottom-full', 'mb-2');
                            menu.classList.add('top-full', 'mt-2');
                        }
                    }

                    // Add click event to trigger to toggle the menu
                    trigger.addEventListener('click', (e) => {
                        e.stopPropagation();
                        toggleMenu();
                    });

                    // Close the menu when clicking outside
                    document.addEventListener('click', (e) => {
                        if (!dropdown.contains(e.target)) {
                            menu.classList.add('hidden');
                        }
                    });
                });
            });
        </script>
	}
}

// DropdownMenu renders a dropdown menu with Vanilla JS
templ DropdownMenu(props DropdownMenuProps) {
	// Container for the dropdown with unique ID and position data
	<div
		class={ utils.TwMerge("relative inline-block dropdown-menu", props.Class) }
		data-position={ props.Position }
		data-id={ utils.RandomID() }
	>
		// Trigger element that toggles the menu
		<div class="dropdown-trigger">
			if props.Trigger != nil {
				@props.Trigger
			} else {
				@Button(ButtonProps{
					Text:      "Options",
					Variant:   "outline",
					IconRight: icons.ChevronDown(icons.IconProps{Size: "16"}),
				})
			}
		</div>
		// Dropdown content, initially hidden
		<div
			class={
				utils.TwMerge(
					"absolute z-50 w-56 rounded-md shadow-lg bg-popover border border-border py-1 hidden dropdown-content",
					"transition-all duration-200",
				),
			}
			data-initial-position={ props.Position }
			role="menu"
			aria-orientation="vertical"
			aria-labelledby="dropdown-menu-button"
			tabindex="-1"
		>
			for index, item := range props.Items {
				@renderMenuItem(item, index, 0)
			}
		</div>
	</div>
}
