package components

import "github.com/axzilla/goilerplate/pkg/utils"

// CardImagePosition defines where the image should be placed in the card
type CardImagePosition string

const (
	CardImageTop    CardImagePosition = "top"
	CardImageBottom CardImagePosition = "bottom"
	CardImageLeft   CardImagePosition = "left"
	CardImageRight  CardImagePosition = "right"
)

type CardProps struct {
	// Class specifies additional CSS classes to apply to the card.
	// Default: "" (empty string)
	Class string

	// Attributes allows passing additional HTML attributes to the card element.
	// Default: nil
	Attributes templ.Attributes

	// Horizontal enables horizontal layout for side images
	// Default: false
	Horizontal bool
}

// Card renders a card component with consistent styling and structure.
// For detailed examples and usage guides, visit https://goilerplate.com/docs/components/card
//
// Props:
//   - Class: Additional CSS classes to apply to the card. Default: "" (empty string)
//   - Attributes: Additional HTML attributes to apply to the card element. Default: nil
//   - Horizontal: Enables horizontal layout for side images. Default: false
templ Card(props CardProps) {
	<div
		class={
			utils.TwMerge(
				"rounded-lg border bg-card text-card-foreground shadow-sm",
				props.Class,
			),
			templ.KV("flex overflow-hidden", props.Horizontal),
		}
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

type CardImageProps struct {
	// Src is the source URL of the image
	Src string

	// Alt is the alternative text for the image
	Alt string

	// Class allows adding custom classes to the image container
	Class string

	// AspectRatio sets the aspect ratio of the image (e.g., "16/9", "4/3", "1/1")
	AspectRatio string

	// Position determines the position of the image in the card
	Position CardImagePosition

	// Width sets the width for side images (e.g., "1/3", "1/2")
	Width string
}

// getImageWidth returns the appropriate width class
func getImageWidth(width string) string {
	if width == "" {
		return "w-1/3"
	}
	return "w-" + width
}

// CardImage renders an image section within the card
templ CardImage(props CardImageProps) {
	<div
		class={
			utils.TwMerge(
				"overflow-hidden",
				props.Class,
			),
			// Border radius based on position
			templ.KV("rounded-t-lg", props.Position == CardImageTop),
			templ.KV("rounded-b-lg", props.Position == CardImageBottom),
			templ.KV("rounded-l-lg", props.Position == CardImageLeft),
			templ.KV("rounded-r-lg", props.Position == CardImageRight),
			// Width for side images
			templ.KV("shrink-0", props.Position == CardImageLeft || props.Position == CardImageRight),
			templ.KV(getImageWidth(props.Width), props.Position == CardImageLeft || props.Position == CardImageRight),
		}
		if props.AspectRatio != "" {
			style={ "aspect-ratio: " + props.AspectRatio }
		}
	>
		<img
			src={ props.Src }
			alt={ props.Alt }
			class="h-full w-full object-cover"
		/>
	</div>
}

// CardHeader renders the header section of a card.
templ CardHeader() {
	<div class="flex flex-col space-y-1.5 p-6">
		{ children... }
	</div>
}

// CardTitle renders the title of a card.
templ CardTitle() {
	<h3 class="text-2xl font-semibold leading-none tracking-tight">
		{ children... }
	</h3>
}

// CardDescription renders the description of a card.
templ CardDescription() {
	<p class="text-sm text-muted-foreground">
		{ children... }
	</p>
}

// CardContent renders the main content area of a card.
templ CardContent() {
	<div class="p-6 pt-0">
		{ children... }
	</div>
}

// CardFooter renders the footer section of a card.
templ CardFooter() {
	<div class="flex items-center p-6 pt-0">
		{ children... }
	</div>
}
