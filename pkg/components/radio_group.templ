package components

import "github.com/axzilla/goilerplate/pkg/utils"

// RadioGroupProps defines the properties for the RadioGroup component.
type RadioGroupProps struct {
	// Name is the name attribute for the radio group
	Name string
	// Class specifies additional CSS classes
	Class string
	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes
}

// RadioGroupItemProps defines the properties for a single radio button item.
type RadioGroupItemProps struct {
	// Value is the value attribute for the radio button
	Value string
	// Name is the name attribute, should match the RadioGroup's name
	Name string
	// ID is the unique identifier for the radio button
	ID string
	// Label is the text label displayed next to the radio button
	Label templ.Component
	// Class specifies additional CSS classes
	Class string
	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes
}

// RadioGroup renders a group of radio buttons with shared name attribute.
//
// Usage:
//
//  @components.RadioGroup(components.RadioGroupProps{
//      Name: "marketing",
//  }) {
//      @components.RadioGroupItem(components.RadioGroupItemProps{
//          Value: "email",
//          Name: "marketing",
//          ID: "marketing-email",
//          Label: templ.Raw("Email Marketing"),
//      })
//  }
templ RadioGroup(props RadioGroupProps) {
	<div
		role="radiogroup"
		class={ utils.TwMerge("space-y-2", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// RadioGroupItem renders a single radio button with an integrated label.
//
// Usage:
//
//  @components.RadioGroupItem(components.RadioGroupItemProps{
//      Value: "email",
//      Name: "marketing",
//      ID: "marketing-email",
//      Label: templ.Raw("Email Marketing"),
//      Attributes: templ.Attributes{"checked": selectedOption == "email"},
//  })
templ RadioGroupItem(props RadioGroupItemProps) {
	<label
		for={ props.ID }
		class={ utils.TwMerge(
            "flex items-center gap-2 cursor-pointer text-sm font-medium",
            "text-muted-foreground [&:has(input:checked)]:text-foreground",
            "[&:has(input:disabled)]:cursor-not-allowed [&:has(input:disabled)]:opacity-50",
            props.Class,
        ) }
	>
		<input
			type="radio"
			id={ props.ID }
			name={ props.Name }
			value={ props.Value }
			class="before:content[''] relative h-4 w-4 appearance-none rounded-full 
                   border border-2 border-primary 
                   checked:border-primary checked:bg-primary
                   before:absolute before:left-1/2 before:top-1/2 
                   before:h-1.5 before:w-1.5 before:-translate-x-1/2 before:-translate-y-1/2 
                   before:rounded-full before:bg-background
                   checked:before:visible
                   focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring 
                   focus-visible:ring-offset-2 focus-visible:ring-offset-background
                   disabled:cursor-not-allowed"
			{ props.Attributes... }
		/>
		if props.Label != nil {
			@props.Label
		} else {
			<span>{ props.Value }</span>
		}
	</label>
}
