package components

import "fmt"

// RadioGroupProps defines the properties for the RadioGroup component.
type RadioGroupProps struct {
	// Value is the Alpine.js x-model binding expression
	// Example: "formData.marketingConsent"
	Value string

	// Name is the name attribute for the radio group
	Name string

	// Required indicates if the radio group must have a selection
	Required bool

	// Class specifies additional CSS classes
	Class string

	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes
}

// RadioGroupItemProps defines the properties for a single radio button item.
type RadioGroupItemProps struct {
	// Value is the value attribute for the radio button
	Value string

	// Name is the name attribute, should match the RadioGroup's name
	Name string

	// ID is the unique identifier for the radio button
	ID string

	// Disabled is an Alpine.js expression for the disabled state
	// Examples:
	//   - "true" for always disabled
	//   - "formData.isLoading" for dynamic state
	//   - "user.role !== 'admin'" for conditional disabling
	Disabled string

	// Class specifies additional CSS classes
	Class string

	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes

	// Label is the templ.Component to use as the radio button's label
	Label templ.Component
}

// RadioGroup renders a group of radio buttons with shared state management.
//
// Usage:
//
//  @components.RadioGroup(components.RadioGroupProps{
//      Name: "marketing",
//      Value: "formData.marketingConsent",
//      DefaultValue: "email",
//      Required: true,
//  }) {
//      // RadioGroup items go here
//  }
templ RadioGroup(props RadioGroupProps) {
	<div
		role="radiogroup"
		aria-required={ fmt.Sprintf("%t", props.Required) }
		x-data={ fmt.Sprintf(`{ value: %s }`, props.Value) }
		class={ "space-y-2", props.Class }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// RadioGroupItem renders a single radio button with an integrated label.
// It uses Alpine.js for state management and accessibility features.
//
// Usage:
//
//  @components.RadioGroupItem(components.RadioGroupItemProps{
//      Value: "email",
//      Name: "marketing",
//      ID: "marketing-email",
//      Disabled: "isLoading",
//      Label: templ.Raw("Email Marketing"),
//  })
templ RadioGroupItem(props RadioGroupItemProps) {
	<div
		class={ "flex items-center space-x-2", props.Class }
	>
		<input
			type="radio"
			id={ props.ID }
			name={ props.Name }
			value={ props.Value }
			if props.Disabled != "" {
				:disabled={ props.Disabled }
			}
			class={ "h-4 w-4 translate-y-px appearance-none rounded-full border bg-background",
				"checked:border-primary checked:bg-primary",
				"disabled:opacity-50 disabled:cursor-not-allowed",
				"checked:outline-none checked:ring-2 checked:ring-ring checked:ring-offset-2" }
			{ props.Attributes... }
		/>
		<label
			for={ props.ID }
			class={ "text-sm font-medium leading-none text-foreground", templ.KV("opacity-50 cursor-not-allowed", props.Disabled) }
		>
			if props.Label != nil {
				@props.Label
			} else {
				{ props.Value }
			}
		</label>
	</div>
}
