// pkg/components/select.templ

package components

import (
	"github.com/axzilla/goilerplate/pkg/icons"
)

// SelectProps defines the properties for the Select component.
type SelectProps struct {
	// ID is the unique identifier for the select input
	ID string

	// Name is the name attribute for the select input
	Name string

	// Placeholder text when no option is selected
	Placeholder string

	// Options is the array of available options
	Options []SelectOption

	// Class specifies additional CSS classes
	Class string

	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes
}

// SelectOption represents an option in the select menu
type SelectOption struct {
	// Label is the text shown to the user
	Label string

	// Value is the actual value of the option
	Value string

	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes
}

// Select renders a custom select component with a button trigger and dropdown menu.
// It supports keyboard navigation, disabled states, and custom styling.
//
// Usage:
//
//	@components.Select(components.SelectProps{
//	    ID: "fruit",
//	    Name: "fruit",
//	    Placeholder: "Select a fruit",
//	    Value: "'apple'",
//	    Options: []components.SelectOption{
//	        {Label: "Apple", Value: "apple"},
//	        {Label: "Banana", Value: "banana", Disabled: true},
//	    },
//	})
//
// Props:
//   - ID: The unique identifier for the select input. Required.
//   - Name: The name attribute for the select input. Required.
//   - Placeholder: Text shown when no option is selected. Optional.
//   - Options: Array of SelectOption defining the available choices. Required.
//   - Value: The selected value. Can be a string or JS expression. Optional.
//   - Disabled: Controls the disabled state. Can be a string or JS expression. Optional.
//   - Class: Additional CSS classes. Optional.
//   - Attributes: Additional HTML attributes. Optional.
templ Select(props SelectProps) {
	<div class="relative">
		<select
			id={ props.ID }
			name={ props.Name }
			class="peer h-10 w-full appearance-none rounded-md border border-input bg-background px-3 py-2 text-sm 
                   ring-offset-background placeholder:text-muted-foreground
                   focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2
                   disabled:cursor-not-allowed disabled:opacity-50"
			{ props.Attributes... }
		>
			if props.Placeholder != "" {
				<option value="" disabled selected hidden>{ props.Placeholder }</option>
			}
			for _, option := range props.Options {
				<option
					value={ option.Value }
					{ option.Attributes... }
				>
					{ option.Label }
				</option>
			}
		</select>
		<div class="absolute right-3 top-3 pointer-events-none peer-disabled:opacity-50">
			@icons.ChevronDown(icons.IconProps{Size: "16", Class: "text-muted-foreground"})
		</div>
	</div>
}
