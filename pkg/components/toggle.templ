package components

// ToggleSize represents the size of the toggle
type ToggleSize string

// ToggleLabelPlacement represents where the label should be placed
type ToggleLabelPlacement string

// ToggleProps defines the properties for the Toggle component
type ToggleProps struct {
	// ID is the unique identifier for the toggle input
	ID string

	// Name is the name attribute for the toggle input
	Name string

	// Label is the text label for the toggle
	LabelLeft string

	// Label is the text label for the toggle
	LabelRight string

	// Class specifies additional CSS classes
	Class string

	// Attributes allows passing additional HTML attributes
	Attributes templ.Attributes
}

// Toggle renders a toggle switch component based on the provided props.
// It can be customized with different label placements, and supports
// both static and dynamic states through Alpine.js integration.
//
// Props:
//   - ID: The unique identifier for the toggle input. Required.
//   - Name: The name attribute for the toggle input. Required.
//   - LabelLeft: The text label for the toggle. Optional.
//   - LabelRight: The text label for the toggle. Optional.
//   - Class: Additional CSS classes. Optional.
//   - Attributes: Additional HTML attributes. Optional.
templ Toggle(props ToggleProps) {
	<label for={ props.ID } class="inline-flex cursor-pointer items-center gap-2">
		<input
			id={ props.ID }
			type="checkbox"
			name={ props.Name }
			class="peer sr-only"
			role="switch"
			{ props.Attributes... }
		/>
		if props.LabelLeft != "" {
			<span class="text-sm select-none text-muted-foreground peer-checked:text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50">
				{ props.LabelLeft }
			</span>
		}
		<div
			class="relative h-6 w-10 rounded-full bg-neutral-200 after:h-5 after:w-5 peer-checked:after:translate-x-[16px] after:absolute after:left-0.5 after:top-0.5 after:rounded-full after:bg-muted-foreground after:transition-all after:content-[''] peer-checked:bg-primary peer-checked:after:bg-secondary peer-disabled:opacity-50 peer-disabled:cursor-not-allowed"
			aria-hidden="true"
		></div>
		if props.LabelRight != "" {
			<span class="text-sm select-none text-muted-foreground peer-checked:text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50">
				{ props.LabelRight }
			</span>
		}
	</label>
}
