package pages

import (
	"github.com/axzilla/templui/internal/ui/layouts"
	"github.com/axzilla/templui/internal/ui/modules"
)

var installGo = `go version`

var installTempl = `go install github.com/a-h/templ/cmd/templ@latest`

var tailwindHomebrew = `brew install tailwindcss`

var tailwindMacOSArm64 = `curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-arm64
chmod +x tailwindcss-macos-arm64
sudo mv tailwindcss-macos-arm64 /usr/local/bin/tailwindcss`

var tailwindMacOSX64 = `curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-x64
chmod +x tailwindcss-macos-x64
sudo mv tailwindcss-macos-x64 /usr/local/bin/tailwindcss`

var tailwindLinuxX64 = `curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64
chmod +x tailwindcss-linux-x64
sudo mv tailwindcss-linux-x64 /usr/local/bin/tailwindcss`

var tailwindWindowsX64 = `# On Windows (x64)
# Download from: https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-windows-x64.exe
# Add to your PATH as 'tailwindcss'`

var installAlpine = `<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/csp@3.x.x/dist/cdn.min.js"></script>`

var installAlpineHelper = `@helpers.AlpineJS()`

var makeFile = `# Run templ generation in watch mode
templ:
    templ generate --watch --proxy="http://localhost:8090" --open-browser=false -v

# Run air for Go hot reload
server:
    air \
    --build.cmd "go build -o tmp/bin/main ./main.go" \
    --build.bin "tmp/bin/main" \
    --build.delay "100" \
    --build.exclude_dir "node_modules" \
    --build.include_ext "go" \
    --build.stop_on_error "false" \
    --misc.clean_on_exit true

# Watch Tailwind CSS changes
tailwind:
    tailwindcss -i ./assets/css/input.css -o ./assets/css/output.css --watch

# Start development server with all watchers
dev:
    make -j3 templ server tailwind`

var tailwindConfig = `{/** @type {import('tailwindcss').Config} */
const config = {
  darkMode: ["class"],
  content: ["./**/*.html", "./**/*.templ", "./**/*.go"],
  safelist: ["dark"],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border) / <alpha-value>)",
        input: "hsl(var(--input) / <alpha-value>)",
        ring: "hsl(var(--ring) / <alpha-value>)",
        background: "hsl(var(--background) / <alpha-value>)",
        foreground: "hsl(var(--foreground) / <alpha-value>)",
        primary: {
          DEFAULT: "hsl(var(--primary) / <alpha-value>)",
          foreground: "hsl(var(--primary-foreground) / <alpha-value>)",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary) / <alpha-value>)",
          foreground: "hsl(var(--secondary-foreground) / <alpha-value>)",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive) / <alpha-value>)",
          foreground: "hsl(var(--destructive-foreground) / <alpha-value>)",
        },
        muted: {
          DEFAULT: "hsl(var(--muted) / <alpha-value>)",
          foreground: "hsl(var(--muted-foreground) / <alpha-value>)",
        },
        accent: {
          DEFAULT: "hsl(var(--accent) / <alpha-value>)",
          foreground: "hsl(var(--accent-foreground) / <alpha-value>)",
        },
        popover: {
          DEFAULT: "hsl(var(--popover) / <alpha-value>)",
          foreground: "hsl(var(--popover-foreground) / <alpha-value>)",
        },
        card: {
          DEFAULT: "hsl(var(--card) / <alpha-value>)",
          foreground: "hsl(var(--card-foreground) / <alpha-value>)",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {},
    },
  },
};

export default config;`

var inputCss = `@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --primary: 346.8 77.2% 49.8%;
    --primary-foreground: 355.7 100% 97.3%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --ring: 346.8 77.2% 49.8%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 20 14.3% 4.1%;
    --foreground: 0 0% 95%;
    --muted: 0 0% 15%;
    --muted-foreground: 240 5% 64.9%;
    --popover: 0 0% 9%;
    --popover-foreground: 0 0% 95%;
    --card: 24 9.8% 10%;
    --card-foreground: 0 0% 95%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --primary: 346.8 77.2% 49.8%;
    --primary-foreground: 355.7 100% 97.3%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --ring: 346.8 77.2% 49.8%;
    --radius: 0.5rem;
  }
}
@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings:
      "rlig" 1,
      "calt" 1;
  }
}`

var installTemplUI = `go get github.com/axzilla/templui`

var goPath = `"${GOPATH}/pkg/mod/github.com/axzilla/templui@*/**/*.{go,templ}"`

var usingComponents = `import "github.com/axzilla/templui/pkg/components"

@components.Button(components.ButtonProps{Text: "Click me"})`

var cspMiddleware = `import "github.com/axzilla/templui/pkg/middleware"

// Optional: Configure CSP for additional external resources
cspConfig := middleware.CSPConfig{
    ScriptSrc: []string{"cdn.jsdelivr.net"}, // Add external script sources here
}

// Apply the middleware to your server
wrappedMux := middleware.WithCSP(cspConfig)(mux)
mux.Handle("GET /", templ.Handler(pages.Landing()))
http.ListenAndServe(":8090", wrappedMux)`

var alpineHelpers = `// Option A: Include Alpine.js and all component scripts (recommended)
@helpers.AlpineJS()
@helpers.ComponentScripts()

// Option B: Include Alpine.js and specific component scripts
@helpers.AlpineJS()
@components.AccordionScript()
@components.ModalScript()
// ... other specific component scripts as needed`

var staticComponent = `// Static components (Tailwind only) can be used directly
@components.Button(components.ButtonProps{...})
@components.Card(components.CardProps{...})`

var interactiveComponent = `// First, include required scripts
@helpers.AlpineJS()
@components.AccordionScript()

// Then use the component
@components.Accordion(components.AccordionProps{...})`

templ HowToUse() {
	@layouts.DocsLayout() {
		<div>
			<div class="mb-16">
				<h1 class="text-3xl font-bold mb-2">How To Use</h1>
				<p class="mb-4 text-muted-foreground">Learn how to integrate TemplUI into your projects.</p>
			</div>
			<section class="mb-12">
				<h2 class="text-2xl font-semibold mb-4 text-primary">Requirements</h2>
				<p class="mb-4">Before using TemplUI, ensure you have these tools installed:</p>
				<div class="space-y-6">
					<div>
						<h3 class="text-xl font-semibold mb-2">1. Go (1.20 or later)</h3>
						<p class="mb-2">Check your Go version:</p>
						@modules.CodeSnippet(installGo, "markdown")
						<p class="text-sm mt-2">For installation instructions, visit <a href="https://golang.org/dl" class="text-primary underline">golang.org/dl</a>.</p>
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">2. Templ</h3>
						<p class="mb-2">Install the Templ CLI:</p>
						@modules.CodeSnippet(installTempl, "markdown")
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">3. Tailwind CSS CLI (Standalone)</h3>
						<p class="mb-2">Install the standalone CLI based on your operating system:</p>
						<div class="space-y-4">
							<p class="mb-2">Homebrew (macOS):</p>
							@modules.CodeSnippet(tailwindHomebrew, "markdown")
							<p class="mb-2">macOS (Apple Silicon):</p>
							@modules.CodeSnippet(tailwindMacOSArm64, "markdown")
							<p class="mb-2">macOS (Intel):</p>
							@modules.CodeSnippet(tailwindMacOSX64, "markdown")
							<p class="mb-2">Linux (x64):</p>
							@modules.CodeSnippet(tailwindLinuxX64, "markdown")
							<p class="mb-2">Windows (x64):</p>
							@modules.CodeSnippet(tailwindWindowsX64, "markdown")
						</div>
					</div>
				</div>
			</section>
			<section class="mb-12">
				<h2 class="text-2xl font-semibold mb-4 text-primary">Base Configuration</h2>
				<p class="mb-4">TemplUI provides pre-configured styles and themes. You'll need these files in your project:</p>
				<div class="space-y-6">
					<div>
						<h3 class="text-xl font-semibold mb-2">1. Tailwind Configuration</h3>
						<p class="mb-2">Create tailwind.config.js:</p>
						@modules.CodeSnippet(tailwindConfig, "javascript")
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">2. CSS Base Styles</h3>
						<p class="mb-2">Create assets/css/input.css with our base styles:</p>
						@modules.CodeSnippet(inputCss, "css")
						<p class="text-sm mt-2">For custom themes and additional styles, check our <a href="/docs/themes" class="text-primary underline">themes documentation</a>.</p>
					</div>
					<div class="space-y-2">
						<h3 class="text-xl font-semibold">3. Alpine.js (CSP-Ready)</h3>
						<p class="mb-2">
							TemplUI is CSP-compliant by default using 
							<a
								href="https://alpinejs.dev/advanced/csp"
								target="_blank"
								class="underline hover:opacity-80 font-semibold"
							>Alpine's CSP build</a>. Use our recommended helper component:
						</p>
						@modules.CodeSnippet(installAlpineHelper, "html")
						<p class="mb-2">Or include the CSP-compliant Alpine.js version directly:</p>
						@modules.CodeSnippet(installAlpine, "html")
						<div class="bg-muted p-4 rounded-lg mt-4">
							<p class="font-medium mb-2">CSP Compliance in TemplUI</p>
							<div class="space-y-4">
								<div class="border-l-4 border-success pl-4">
									<p class="font-medium">Default: CSP-Ready Components</p>
									<ul class="list-disc pl-6 text-sm">
										<li>
											Uses 
											<a
												href="https://alpinejs.dev/advanced/csp"
												target="_blank"
												class="underline hover:opacity-80 font-semibold"
											>Alpine.js CSP build</a>
										</li>
										<li>All components use nonces via templ</li>
										<li>No inline scripts</li>
										<li>No external scripts</li>
									</ul>
									<p class="text-sm mt-2">→ CSP-compliant out of the box!</p>
								</div>
								<div class="border-l-4 border-warning pl-4">
									<p class="font-medium">When Adding External Scripts:</p>
									<ul class="list-disc pl-6 text-sm">
										<li>Enable CSP middleware</li>
										<li>Configure allowed domains (HTMX, highlight.js etc.)</li>
										<li>Add nonce to external script tags</li>
									</ul>
									<p class="text-sm mt-2 text-warning-foreground">
										⚠️ Without middleware, external scripts will work but break CSP compliance
									</p>
								</div>
							</div>
						</div>
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">4. CSP Middleware</h3>
						<p class="mb-4">The CSP middleware is only needed when adding external scripts while maintaining CSP compliance:</p>
						<div class="bg-muted p-4 rounded-lg mb-4">
							<p class="font-medium">Example Scenarios:</p>
							<div class="space-y-4">
								<div class="border-l-4 border-success pl-4">
									<p class="font-medium">No Middleware Needed:</p>
									<ul class="list-disc pl-6 text-sm">
										<li>Using only TemplUI components</li>
										<li>No external scripts or resources</li>
									</ul>
								</div>
								<div class="border-l-4 border-warning pl-4">
									<p class="font-medium">Middleware Required:</p>
									<ul class="list-disc pl-6 text-sm">
										<li>When using HTMX</li>
										<li>When using highlight.js</li>
										<li>When adding any other external scripts</li>
									</ul>
								</div>
							</div>
						</div>
						@modules.CodeSnippet(cspMiddleware, "go")
					</div>
				</div>
			</section>
			<section class="mb-12">
				<h2 class="text-2xl font-semibold mb-4 text-primary">Development Tools</h2>
				<div class="bg-muted p-4 rounded-lg mb-6">
					<p class="mb-2">
						Here's our recommended development setup for Go and Templ projects, adapted from official documentation and community best practices:
					</p>
					<ul class="list-disc pl-6 space-y-1">
						<li>Hot reloading for Go, Templ, and Tailwind</li>
						<li>Convenient development commands via Make</li>
						<li>Automated file watching and rebuilding</li>
					</ul>
					<p class="mt-2 text-sm">
						The Makefile configuration is based on the <a href="https://templ.guide" class="text-primary underline">Templ documentation</a> and adapted for our use case. 
						While there are many ways to set up your development environment, this configuration provides a solid starting point.
					</p>
				</div>
				<div class="space-y-6">
					<div>
						<h3 class="text-xl font-semibold mb-2">1. Air (Live Reload for Go)</h3>
						<p class="mb-2">Install Air for automatic Go server rebuilds:</p>
						@modules.CodeSnippet("go install github.com/cosmtrek/air@latest", "markdown")
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">2. Development Makefile</h3>
						<p class="mb-2">Create a Makefile in your project root:</p>
						@modules.CodeSnippet(makeFile, "makefile")
						<div class="bg-muted p-4 rounded-lg mt-4">
							<p class="font-medium mb-2">Note about ports:</p>
							<ul class="list-disc pl-6 space-y-1 text-sm">
								<li>In this example configuration, the Go application runs on port 8090</li>
								<li>Templ's development server will be available at http://localhost:7331</li>
								<li>Adjust the --proxy flag in the templ command if your app uses a different port</li>
							</ul>
						</div>
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">3. Start Development Server</h3>
						<p class="mb-2">Start all development tools with a single command:</p>
						@modules.CodeSnippet("make dev", "markdown")
						<p class="text-sm mt-2">This will:</p>
						<ul class="list-disc pl-6 text-sm space-y-1">
							<li>Watch and compile Templ files</li>
							<li>Start the Go server with hot reload via Air</li>
							<li>Watch and compile Tailwind CSS changes</li>
						</ul>
						<p class="text-sm mt-2">Or run services individually:</p>
						<ul class="list-disc pl-6 text-sm space-y-1">
							<li>{ `make templ` } - Watch Templ files only</li>
							<li>{ `make server` } - Run Go server only</li>
							<li>{ `make tailwind` } - Watch Tailwind CSS only</li>
						</ul>
					</div>
				</div>
			</section>
			<section class="mb-12">
				<h2 class="text-2xl font-semibold mb-4 text-primary">Installation Options</h2>
				<p class="mb-4">After installing the requirements, you have three ways to use TemplUI:</p>
				<div class="space-y-8">
					<div>
						<h3 class="text-xl font-semibold mb-2">1. Quickstart Template (Recommended for new projects)</h3>
						<p class="mb-4">
							For a ready-to-go setup, check out our <a href="https://github.com/axzilla/templui-quickstart" class="text-primary underline">TemplUI Quickstart</a> template. 
							It includes all requirements and configurations, using TemplUI as a package library by default but can be easily modified to use copied components or a mix of both approaches.
						</p>
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">2. Package Installation</h3>
						<p class="mb-4">Install TemplUI as a Go package:</p>
						<div class="mb-4">
							@modules.CodeSnippet(installTemplUI, "markdown")
						</div>
						<h4 class="font-semibold mb-2">*Required: Additional Tailwind Configuration</h4>
						<p class="mb-2">When using TemplUI as a package, add this to your tailwind.config.json content array:</p>
						<div class="mb-4">
							@modules.CodeSnippet(goPath, "markdown")
						</div>
						<p class="mb-2">Replace { string("${GOPATH}") } with your actual Go path:</p>
						@modules.CodeSnippet("go env GOPATH", "markdown")
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">3. Copy Components</h3>
						<p class="mb-4">For maximum customization, copy components directly into your project (requires manual updates):</p>
						<ol class="list-decimal pl-6">
							<li>Visit our <a href="/docs/components" class="text-primary underline">components documentation</a></li>
							<li>Find the component you need</li>
							<li>Copy the component code into your project's components folder</li>
						</ol>
					</div>
					<div class="mb-8">
						<h3 class="text-xl font-semibold mb-2">Mix and Match</h3>
						<p>
							You can also combine approaches. For example, use some components as a package and copy others for customization.
							Remember that when using any components as a package (including mix and match), you need to add the GOPATH configuration to your tailwind.config.json as shown in the Package Installation section.
						</p>
					</div>
				</div>
			</section>
			<section class="mb-12">
				<h2 class="text-2xl font-semibold mb-4 text-primary">Using Components</h2>
				<p class="mb-4">Some components require additional scripts for interactivity. Here's how to set them up:</p>
				<div class="space-y-6">
					<div>
						<h3 class="text-xl font-semibold mb-2">1. Include Required Scripts</h3>
						<p class="mb-4">At the top of your layout template, include the necessary scripts:</p>
						@modules.CodeSnippet(alpineHelpers, "go")
					</div>
					<div>
						<h3 class="text-xl font-semibold mb-2">2. Component Types</h3>
						<div class="space-y-4">
							<div class="bg-muted p-4 rounded-lg">
								<h4 class="font-medium mb-2">Static Components (Tailwind CSS only)</h4>
								<p class="mb-2">Can be used directly without additional script includes:</p>
								@modules.CodeSnippet(staticComponent, "go")
							</div>
							<div class="bg-muted p-4 rounded-lg">
								<h4 class="font-medium mb-2">Interactive Components (Alpine.js/Vanilla JS)</h4>
								<p class="mb-2">Require script includes:</p>
								@modules.CodeSnippet(interactiveComponent, "go")
							</div>
							<p>
								For a complete list of available components and their usage, visit our
								<a href="/docs/components" class="text-primary underline">components documentation</a>.
							</p>
						</div>
					</div>
				</div>
			</section>
			<section class="mb-12">
				<h2 class="text-2xl font-semibold mb-4 text-primary">Advanced Configuration</h2>
				<p class="mb-4">
					For advanced configuration and best practices, refer to the official documentation:
				</p>
				<ul class="list-disc pl-6 space-y-2">
					<li><a href="https://templ.guide" class="text-primary underline">Templ Guide</a> - Cache configuration, component patterns, etc.</li>
					<li><a href="https://tailwindcss.com/docs" class="text-primary underline">Tailwind CSS</a> - Custom theming, plugins, optimization</li>
					<li><a href="https://alpinejs.dev/docs" class="text-primary underline">Alpine.js</a> - Advanced interactivity, state management</li>
				</ul>
				<p class="text-sm mt-4">Note: Our quickstart template includes recommended configurations for production use.</p>
			</section>
			<section>
				<h2 class="text-2xl font-semibold mb-4 text-primary">Next Steps</h2>
				<div class="space-y-4">
					<p>Now that you have TemplUI set up, try:</p>
					<ul class="list-disc pl-6 space-y-2">
						<li>Build your first page using our <a href="/docs/components" class="text-primary underline">component library</a></li>
						<li>Customize the look with our <a href="/docs/themes" class="text-primary underline">theming system</a></li>
						<li>Share your feedback in our <a href="https://github.com/axzilla/templui/discussions" class="text-primary underline">community discussions</a></li>
					</ul>
				</div>
			</section>
		</div>
	}
}
