package showcase

import (
	"github.com/axzilla/templui/components"
)

// Default pagination example with page numbers and previous/next controls
templ PaginationDefault() {
	@components.Pagination(components.PaginationProps{
		CurrentPage:  3,
		TotalPages:   10,
		MaxVisible:   5,
		ShowNumbers:  true,
		ShowControls: true,
		// UrlPattern:   "/docs/examples?page={page}",
	})
}

// Simple pagination with just previous/next buttons
templ PaginationSimple() {
	@components.Pagination(components.PaginationProps{
		CurrentPage:  2,
		TotalPages:   5,
		Type:         components.PaginationTypeSimple,
		ShowNumbers:  false,
		ShowControls: true,
		UrlPattern:   "/products?page={page}",
	})
}

// Minimal pagination with compact numbers and icons-only controls
templ PaginationMinimal() {
	@components.Pagination(components.PaginationProps{
		CurrentPage:  4,
		TotalPages:   10,
		Type:         components.PaginationTypeMinimal,
		MaxVisible:   5,
		ShowNumbers:  true,
		ShowControls: true,
		UrlPattern:   "/blog?page={page}",
	})
}

// Outline style pagination
templ PaginationOutline() {
	@components.Pagination(components.PaginationProps{
		CurrentPage:  5,
		TotalPages:   20,
		Type:         components.PaginationTypeOutline,
		MaxVisible:   3,
		ShowNumbers:  true,
		ShowControls: true,
		UrlPattern:   "/gallery?page={page}",
	})
}

// // Pagination with HTMX integration for dynamic content loading
// templ PaginationWithHtmx() {
// 	<div id="products-container" class="mb-6 p-4 border rounded-md flex justify-center items-center h-40 bg-muted">
// 		<p class="text-muted-foreground">Products will be loaded here (Page 1 by default)</p>
// 	</div>
// 	@components.Pagination(components.PaginationProps{
// 		CurrentPage:  1,
// 		TotalItems:   120,
// 		PageSize:     12,
// 		MaxVisible:   5,
// 		ShowNumbers:  true,
// 		ShowControls: true,
// 		UrlPattern:   "/api/products?page={page}",
// 		HxGet:        true,
// 		HxTarget:     "#products-container",
// 		HxSwap:       "innerHTML",
// 	})
//
// 	<div class="mt-4 p-3 bg-muted rounded-md">
// 		<p class="text-sm font-medium mb-2">Server-side code example:</p>
// 		<pre class="text-xs overflow-x-auto"><code>func ProductsHandler(w http.ResponseWriter, r *http.Request) {
//     page, _ := strconv.Atoi(r.URL.Query().Get("page"))
//     if page < 1 {
//         page = 1
//     }
//
//     // Fetch products for the requested page
//     products, err := fetchProducts(page, 12)
//     if err != nil {
//         http.Error(w, "Failed to load products", http.StatusInternalServerError)
//         return
//     }
//
//     // Render products component
//     ProductList(products, page).Render(r.Context(), w)
// }</code></pre>
// 	</div>
// }
//
// // Pagination with custom styling and layout
// templ PaginationCustomLayout() {
// 	<div class="flex flex-col gap-4">
// 		<!-- Custom styled pagination with different colors -->
// 		@components.Pagination(components.PaginationProps{
// 			CurrentPage:  3,
// 			TotalPages:   10,
// 			MaxVisible:   5,
// 			Class:        "bg-secondary rounded-lg p-2",
// 			UrlPattern:   "/search?page={page}",
// 		})
//
// 		<!-- Pagination with more information -->
// 		<div class="flex flex-col sm:flex-row items-center justify-between gap-4 border rounded-md p-4">
// 			<div class="text-sm text-muted-foreground">
// 				Showing <span class="font-medium">21-30</span> of <span class="font-medium">100</span> items
// 			</div>
//
// 			@components.Pagination(components.PaginationProps{
// 				CurrentPage:  3,
// 				TotalPages:   10,
// 				MaxVisible:   5,
// 				Type:         components.PaginationTypeMinimal,
// 				UrlPattern:   "/admin/users?page={page}",
// 			})
//
// 			<div class="flex items-center gap-2">
// 				<span class="text-sm text-muted-foreground">Items per page:</span>
// 				@components.Select(components.SelectProps{
// 					ID:      "items-per-page",
// 					Name:    "pageSize",
// 					Options: []components.SelectOption{
// 						{Label: "10", Value: "10", Selected: true},
// 						{Label: "20", Value: "20"},
// 						{Label: "50", Value: "50"},
// 						{Label: "100", Value: "100"},
// 					},
// 					Class: "w-20",
// 				})
// 			</div>
// 		</div>
// 	</div>
// }
//
// // The handler templates below would be used with the pagination examples
//
// // Simulated product list that would be returned by the server
// templ ProductList(page int) {
// 	<div class="grid grid-cols-3 gap-4">
// 		for i := 1; i <= 6; i++ {
// 			<div class="p-4 border rounded-md bg-card">
// 				<h3 class="font-medium">Product { ((page - 1) * 6) + i }</h3>
// 				<p class="text-sm text-muted-foreground">Sample product description</p>
// 			</div>
// 		}
// 	</div>
// 	<p class="mt-4 text-center text-sm text-muted-foreground">
// 		Showing page { page }
// 	</p>
// }
