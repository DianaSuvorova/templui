package showcase

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/popover"
)

templ PopoverPositions() {
	<div class="flex flex-col w-full max-w-md">
		<div class="grid grid-cols-3 gap-2">
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "top-start-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Top Start
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "top-start-popover",
					Position:  popover.PositionTopStart,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "top-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Top
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "top-popover",
					Position:  popover.PositionTop,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "top-end-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Top End
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "top-end-popover",
					Position:  popover.PositionTopEnd,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "right-start-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Right Start
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "right-start-popover",
					Position:  popover.PositionRightStart,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "right-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Right
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "right-popover",
					Position:  popover.PositionRight,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "right-end-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Right End
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "right-end-popover",
					Position:  popover.PositionRightEnd,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "bottom-start-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Bottom Start
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "bottom-start-popover",
					Position:  popover.PositionBottomStart,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "bottom-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Bottom
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "bottom-popover",
					Position:  popover.PositionBottom,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "bottom-end-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Bottom End
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "bottom-end-popover",
					Position:  popover.PositionBottomEnd,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "left-start-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Left Start
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "left-start-popover",
					Position:  popover.PositionLeftStart,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "left-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Left
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "left-popover",
					Position:  popover.PositionLeft,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
			@popover.Popover() {
				@popover.Trigger(popover.TriggerProps{
					For:         "left-end-popover",
					TriggerType: popover.TriggerTypeHover,
				}) {
					@button.Button(button.Props{
						Class:   "w-full",
						Variant: button.VariantOutline,
					}) {
						Left End
					}
				}
				@popover.Content(popover.ContentProps{
					ID:        "left-end-popover",
					Position:  popover.PositionLeftEnd,
					ShowArrow: true,
				}) {
					@PopoverContent()
				}
			}
		</div>
	</div>
}
