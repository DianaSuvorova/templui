package showcase

import (
	"github.com/axzilla/templui/components"
)

// Basic progress bar variants
templ ProgressVariants() {
	<div class="space-y-6 w-full max-w-xl">
		<!-- Default variant (25%) -->
		@components.Progress(components.ProgressProps{
			Value:     25,
			Label:     "Default",
			ShowValue: true,
		})
		<!-- Success variant (50%) -->
		@components.Progress(components.ProgressProps{
			Value:     50,
			Label:     "Success",
			ShowValue: true,
			Variant:   components.ProgressVariantSuccess,
		})
		<!-- Danger variant (75%) -->
		@components.Progress(components.ProgressProps{
			Value:     75,
			Label:     "Danger",
			ShowValue: true,
			Variant:   components.ProgressVariantDanger,
		})
		<!-- Warning variant (90%) -->
		@components.Progress(components.ProgressProps{
			Value:     90,
			Label:     "Warning",
			ShowValue: true,
			Variant:   components.ProgressVariantWarning,
		})
	</div>
}

// Size variations
templ ProgressSizes() {
	<div class="space-y-6 w-full max-w-xl">
		<!-- Small size -->
		@components.Progress(components.ProgressProps{
			Value:     65,
			Label:     "Small size",
			ShowValue: true,
			Size:      components.ProgressSizeSm,
		})
		<!-- Default/medium size -->
		@components.Progress(components.ProgressProps{
			Value:     65,
			Label:     "Default size",
			ShowValue: true,
		})
		<!-- Large size -->
		@components.Progress(components.ProgressProps{
			Value:     65,
			Label:     "Large size",
			ShowValue: true,
			Size:      components.ProgressSizeLg,
		})
		<!-- Without label -->
		@components.Progress(components.ProgressProps{
			Value: 65,
		})
		<!-- Without percentage -->
		@components.Progress(components.ProgressProps{
			Value: 65,
			Label: "Without percentage",
		})
	</div>
}

// HTMX integration example
templ ProgressHTMX() {
	<div class="space-y-4 w-full max-w-xl">
		<p class="text-sm text-muted-foreground mb-2">
			This example demonstrates how to use HTMX to automatically update a progress bar
			by polling an endpoint.
		</p>
		<div id="progress-container">
			@components.Progress(components.ProgressProps{
				Value:     30, // Initial value
				Label:     "Processing data...",
				ShowValue: true,
				HxGet:     "/api/progress",
				HxTrigger: "every 2s",
				HxTarget:  "#progress-container",
			})
		</div>
		<!-- Reset button -->
		<button
			class="mt-4 px-4 py-2 bg-secondary rounded-md text-sm"
			hx-post="/api/progress/reset"
			hx-target="#progress-container"
		>
			Reset Demo
		</button>
		<div class="mt-4 p-4 bg-secondary/30 rounded-md">
			<p class="text-sm text-muted-foreground italic">
				When integrated with your backend, this progress bar will automatically update
				by polling the server every 2 seconds. The server would replace this component
				with an updated version showing the current progress.
			</p>
		</div>
	</div>
}
