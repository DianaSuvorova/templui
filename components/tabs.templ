package components

import "github.com/axzilla/templui/utils"
import "context"

// Tabs Component Composition props
type TabsRootProps struct {
	ID    string
	Class string
}

type TabsListProps struct {
	Class string
}

type TabTriggerProps struct {
	Value    string
	IsActive bool
	Class    string
	TabsID   string // Optional ID, wird verwendet wenn nicht im TabsRoot-Kontext
}

type TabContentProps struct {
	Value    string
	IsActive bool
	Class    string
	TabsID   string // Optional ID, wird verwendet wenn nicht im TabsRoot-Kontext
}

// Script mit Vanilla JS
templ TabsScript() {
	<script nonce={ templ.GetNonce(ctx) }>
		document.addEventListener('DOMContentLoaded', () => {
			document.querySelectorAll('[data-tabs-root]').forEach(tabsRoot => {
				const tabsId = tabsRoot.dataset.tabsId;
				const triggers = tabsRoot.querySelectorAll(`[data-tabs-trigger][data-tabs-id="${tabsId}"]`);
				const contents = tabsRoot.querySelectorAll(`[data-tabs-content][data-tabs-id="${tabsId}"]`);
				const marker = tabsRoot.querySelector(`[data-tabs-marker][data-tabs-id="${tabsId}"]`);
				
				// Initial setup
				if (triggers.length > 0 && marker) {
					const activeTab = tabsRoot.querySelector(`[data-tabs-trigger][data-tabs-id="${tabsId}"][data-state="active"]`) || triggers[0];
					
					// Set initial marker position
					marker.style.width = activeTab.offsetWidth + 'px';
					marker.style.height = activeTab.offsetHeight + 'px';
					marker.style.left = activeTab.offsetLeft + 'px';
					
					// Set initial active state if not already set
					if (!activeTab.dataset.state || activeTab.dataset.state !== "active") {
						activeTab.dataset.state = "active";
						activeTab.classList.add('text-foreground', 'bg-background', 'shadow-xs');
						
						// Find and show the corresponding content
						const activeValue = activeTab.dataset.tabsValue;
						const activeContent = tabsRoot.querySelector(`[data-tabs-content][data-tabs-id="${tabsId}"][data-tabs-value="${activeValue}"]`);
						if (activeContent) {
							activeContent.dataset.state = "active";
							activeContent.classList.remove('hidden');
						}
					}
				}
				
				// Event listeners
				triggers.forEach(trigger => {
					trigger.addEventListener('click', () => {
						const value = trigger.dataset.tabsValue;
						
						// Update trigger states
						triggers.forEach(t => {
							t.dataset.state = t.dataset.tabsValue === value ? "active" : "inactive";
							t.classList.remove('text-foreground', 'bg-background', 'shadow-xs');
							if (t.dataset.state === "active") {
								t.classList.add('text-foreground', 'bg-background', 'shadow-xs');
							}
						});
						
						// Update content states
						contents.forEach(content => {
							content.dataset.state = content.dataset.tabsValue === value ? "active" : "inactive";
							if (content.dataset.state === "active") {
								content.classList.remove('hidden');
							} else {
								content.classList.add('hidden');
							}
						});
						
						// Update marker
						if (marker) {
							marker.style.width = trigger.offsetWidth + 'px';
							marker.style.height = trigger.offsetHeight + 'px';
							marker.style.left = trigger.offsetLeft + 'px';
						}
					});
				});
			});
		});
	</script>
}

// Tabs Komponenten
templ TabsRoot(props TabsRootProps) {
	@TabsScript()
	{{ tabsID := props.ID }}
	if tabsID == "" {
		{{ tabsID = utils.RandomID() }}
	}
	<div
		class={ utils.TwMerge("relative", props.Class) }
		data-tabs-root
		data-tabs-id={ tabsID }
	>
		{{ ctx = context.WithValue(ctx, "tabsId", tabsID) }}
		{ children... }
	</div>
}

templ TabsList(props TabsListProps) {
	<div
		class={ utils.TwMerge(
		"relative flex items-center justify-center h-10 p-1 rounded-lg select-none bg-muted text-muted-foreground",
		props.Class,
	) }
	>
		{ children... }
		<div
			data-tabs-marker
			data-tabs-id={ getTabsID(ctx) }
			class="absolute left-0 z-10 h-full duration-300 ease-out"
		>
			<div class="w-full h-full bg-background rounded-md shadow-xs"></div>
		</div>
	</div>
}

// Hilfsfunktion um TabsID aus dem Kontext zu holen
func getTabsID(ctx context.Context) string {
	if tabsID, ok := ctx.Value("tabsId").(string); ok {
		return tabsID
	}
	return ""
}

templ TabTrigger(props TabTriggerProps) {
	// TabsID aus Kontext oder Props verwenden
	{{ tabsID := props.TabsID }}
	if tabsID == "" {
		{{ tabsID = getTabsID(ctx) }}
	}
	<button
		type="button"
		class={ utils.TwMerge(
			"relative z-20 flex-1 inline-flex items-center justify-center h-8 px-3 text-sm font-medium transition-all rounded-md cursor-pointer whitespace-nowrap hover:text-foreground",
			utils.TwIf("text-foreground bg-background shadow-xs", props.IsActive),
			props.Class,
		) }
		data-tabs-trigger
		data-tabs-id={ tabsID }
		data-tabs-value={ props.Value }
		data-state={ utils.TwIfElse(props.IsActive, "active", "inactive") }
	>
		{ children... }
	</button>
}

templ TabContent(props TabContentProps) {
	// TabsID aus Kontext oder Props verwenden
	{{ tabsID := props.TabsID }}
	if tabsID == "" {
		{{ tabsID = getTabsID(ctx) }}
	}
	<div
		class={ utils.TwMerge(
			"relative",
			utils.TwIf("hidden", !props.IsActive),
			props.Class,
		) }
		data-tabs-content
		data-tabs-id={ tabsID }
		data-tabs-value={ props.Value }
		data-state={ utils.TwIfElse(props.IsActive, "active", "inactive") }
	>
		{ children... }
	</div>
}

// Backward-Kompatibilit√§t: Original Tabs
type Tab struct {
	ID      string
	Title   string
	Content templ.Component
}

type TabsProps struct {
	Tabs                  []Tab
	TabsContainerClass    string
	ContentContainerClass string
}

templ Tabs(props TabsProps) {
	{{ tabID := utils.RandomID() }}
	@TabsRoot(TabsRootProps{ID: tabID}) {
		@TabsList(TabsListProps{Class: props.TabsContainerClass}) {
			for i, tab := range props.Tabs {
				@TabTrigger(TabTriggerProps{
					Value:    tab.ID,
					IsActive: i == 0,
					TabsID:   tabID,
				}) {
					{ tab.Title }
				}
			}
		}
		<div class={ utils.TwMerge("relative mt-2", props.ContentContainerClass) }>
			for i, tab := range props.Tabs {
				@TabContent(TabContentProps{
					Value:    tab.ID,
					IsActive: i == 0,
					TabsID:   tabID,
				}) {
					@tab.Content
				}
			}
		</div>
	}
}
