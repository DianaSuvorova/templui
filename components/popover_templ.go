// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.856
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/axzilla/templui/utils"
	"strconv"
)

type PopoverPosition string

const (
	PopoverTop         PopoverPosition = "top"
	PopoverTopStart    PopoverPosition = "top-start"
	PopoverTopEnd      PopoverPosition = "top-end"
	PopoverRight       PopoverPosition = "right"
	PopoverRightStart  PopoverPosition = "right-start"
	PopoverRightEnd    PopoverPosition = "right-end"
	PopoverBottom      PopoverPosition = "bottom"
	PopoverBottomStart PopoverPosition = "bottom-start"
	PopoverBottomEnd   PopoverPosition = "bottom-end"
	PopoverLeft        PopoverPosition = "left"
	PopoverLeftStart   PopoverPosition = "left-start"
	PopoverLeftEnd     PopoverPosition = "left-end"
)

type PopoverTriggerType string

const (
	PopoverTriggerTypeHover PopoverTriggerType = "hover"
	PopoverTriggerTypeClick PopoverTriggerType = "click"
)

type PopoverProps struct {
	Class string
}

type PopoverTriggerProps struct {
	ID          string
	TriggerType PopoverTriggerType
}

type PopoverContentProps struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	Position         PopoverPosition
	DisableClickAway bool
	DisableESC       bool
	ShowArrow        bool
}

func popoverPortalContainer() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"popover-portal-container\" class=\"fixed inset-0 z-[9999] pointer-events-none\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func PopoverTrigger(props ...PopoverTriggerProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p PopoverTriggerProps
		if len(props) > 0 {
			p = props[0]
		}
		if p.TriggerType == "" {
			p.TriggerType = PopoverTriggerTypeClick
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<span data-popover-trigger data-popover-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 68, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" data-popover-type=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(string(p.TriggerType))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 69, Col: 43}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var2.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</span>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Popover(props ...PopoverProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p PopoverProps
		if len(props) > 0 {
			p = props[0]
		}
		var templ_7745c5c3_Var6 = []any{utils.TwMerge("relative inline-block", p.Class)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var6...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var6).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var5.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = popoverPortalContainer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func PopoverContent(props ...PopoverContentProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p PopoverContentProps
		if len(props) > 0 {
			p = props[0]
		}
		if p.Position == "" {
			p.Position = PopoverBottom
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<template data-popover-content-template data-popover-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 96, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" data-popover-position=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(string(p.Position))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 97, Col: 44}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" data-popover-disable-clickaway=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.FormatBool(p.DisableClickAway))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 98, Col: 73}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" data-popover-disable-esc=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.FormatBool(p.DisableESC))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 99, Col: 61}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\" data-popover-show-arrow=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.FormatBool(p.ShowArrow))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 100, Col: 59}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 = []any{utils.TwMerge(
			"bg-background rounded-lg border text-sm shadow-lg pointer-events-auto absolute z-[9999]",
			p.Class,
		)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var14...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var14).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\"><div class=\"w-full overflow-hidden\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var8.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.ShowArrow {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<!-- We generate all arrows with unique data attributes for easier identification --> <!-- Top arrows --> <div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var16 string
			templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverTop))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 115, Col: 36}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background top-[-5px] left-1/2 -translate-x-1/2 border-t border-l hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var17 string
			templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverTopStart))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 119, Col: 41}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background top-[-5px] left-4 border-t border-l hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var18 string
			templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverTopEnd))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 123, Col: 39}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background top-[-5px] right-4 border-t border-l hidden\"></div><!-- Bottom arrows --> <div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 string
			templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverBottom))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 128, Col: 39}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background bottom-[-5px] left-1/2 -translate-x-1/2 border-b border-r hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var20 string
			templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverBottomStart))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 132, Col: 44}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background bottom-[-5px] left-4 border-b border-r hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var21 string
			templ_7745c5c3_Var21, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverBottomEnd))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 136, Col: 42}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var21))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background bottom-[-5px] right-4 border-b border-r hidden\"></div><!-- Left arrows --> <div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var22 string
			templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverLeft))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 141, Col: 37}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background left-[-5px] top-1/2 -translate-y-1/2 border-b border-l hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var23 string
			templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverLeftStart))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 145, Col: 42}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background left-[-5px] top-2 border-b border-l hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var24 string
			templ_7745c5c3_Var24, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverLeftEnd))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 149, Col: 40}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var24))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background left-[-5px] bottom-2 border-b border-l hidden\"></div><!-- Right arrows --> <div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var25 string
			templ_7745c5c3_Var25, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverRight))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 154, Col: 38}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var25))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background right-[-5px] top-1/2 -translate-y-1/2 border-t border-r hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var26 string
			templ_7745c5c3_Var26, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverRightStart))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 158, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var26))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background right-[-5px] top-2 border-t border-r hidden\"></div><div data-arrow=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var27 string
			templ_7745c5c3_Var27, templ_7745c5c3_Err = templ.JoinStringErrs(string(PopoverRightEnd))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 162, Col: 41}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var27))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "\" class=\"absolute h-2.5 w-2.5 rotate-45 bg-background right-[-5px] bottom-2 border-t border-r hidden\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "</div></template>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func PopoverScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var28 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var28 == nil {
			templ_7745c5c3_Var28 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "<script defer nonce=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var29 string
		templ_7745c5c3_Var29, templ_7745c5c3_Err = templ.JoinStringErrs(templ.GetNonce(ctx))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/popover.templ`, Line: 171, Col: 42}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var29))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "\">\n        document.addEventListener('DOMContentLoaded', () => {\n            const portalContainer = document.getElementById('popover-portal-container');\n            const triggers = document.querySelectorAll('[data-popover-trigger]');\n            const templates = document.querySelectorAll('[data-popover-content-template]');\n            \n            // Active popovers\n            const activePopovers = new Map();\n            \n            // Function to update the arrow based on the position\n            const updateArrow = (popoverElement, position) => {\n                if (popoverElement.dataset.popoverShowArrow !== 'true') return;\n                \n                // Initially hide all arrows\n                popoverElement.querySelectorAll('[data-arrow]').forEach(arrow => {\n                    arrow.classList.add('hidden');\n                });\n                \n                // Arrow direction is always opposite to the position\n                // e.g., if the popover is at the bottom, the arrow must point up\n                let arrowPosition;\n                \n                if (position.startsWith('top')) {\n                    // If the popover is at the top, the arrow must point down\n                    arrowPosition = position.replace('top', 'bottom');\n                } else if (position.startsWith('bottom')) {\n                    // If the popover is at the bottom, the arrow must point up\n                    arrowPosition = position.replace('bottom', 'top');\n                } else if (position.startsWith('left')) {\n                    // If the popover is on the left, the arrow must point right\n                    arrowPosition = position.replace('left', 'right');\n                } else if (position.startsWith('right')) {\n                    // If the popover is on the right, the arrow must point left\n                    arrowPosition = position.replace('right', 'left');\n                } else {\n                    // Fallback\n                    arrowPosition = position;\n                }\n                \n                // Show the correct arrow based on the direction\n                const arrow = popoverElement.querySelector(`[data-arrow=\"${arrowPosition}\"]`);\n                if (arrow) {\n                    arrow.classList.remove('hidden');\n                }\n            };\n            \n            // Positioning function\n            const positionPopover = (trigger, popoverElement) => {\n                // Find the actual element the popover refers to\n                let triggerElement = trigger;\n                let largestArea = 0;\n                \n                // Check all direct children of the trigger\n                const children = trigger.children;\n                for (let i = 0; i < children.length; i++) {\n                    const child = children[i];\n                    const rect = child.getBoundingClientRect();\n                    const area = rect.width * rect.height;\n                    \n                    if (area > largestArea) {\n                        largestArea = area;\n                        triggerElement = child;\n                    }\n                }\n                \n                const triggerRect = triggerElement.getBoundingClientRect();\n                const contentRect = popoverElement.getBoundingClientRect();\n                const margin = popoverElement.dataset.popoverShowArrow === 'true' ? 8 : 4;\n                const scrollY = window.scrollY || window.pageYOffset;\n                const scrollX = window.scrollX || window.pageXOffset;\n\n                // Position from the dataset\n                const requestedPosition = popoverElement.dataset.popoverPosition || 'bottom';\n                // We store the final position, which can be adjusted based on viewport space\n                let finalPosition = requestedPosition;\n\n                // Viewport dimensions\n                const viewportWidth = window.innerWidth;\n                const viewportHeight = window.innerHeight;\n\n                // Get element heights and widths\n                const triggerHeight = triggerRect.height;\n                const contentHeight = contentRect.height;\n                const contentWidth = contentRect.width;\n                \n                // Define anchor points\n                const triggerTop = triggerRect.top + scrollY;\n                const triggerBottom = triggerRect.bottom + scrollY;\n                const triggerLeft = triggerRect.left + scrollX;\n                const triggerRight = triggerRect.right + scrollX;\n                \n                // Calculate available space in each direction\n                const spaceAbove = triggerRect.top;\n                const spaceBelow = viewportHeight - triggerRect.bottom;\n                const spaceLeft = triggerRect.left;\n                const spaceRight = viewportWidth - triggerRect.right;\n\n                // Intelligent position adjustment\n                // We check the opposite position if there is not enough space\n                if (finalPosition.startsWith('top') && spaceAbove < contentHeight + margin) {\n                    // If there is not enough space above, show below\n                    finalPosition = finalPosition.replace('top', 'bottom');\n                } else if (finalPosition.startsWith('bottom') && spaceBelow < contentHeight + margin) {\n                    // If there is not enough space below, show above\n                    finalPosition = finalPosition.replace('bottom', 'top');\n                } else if (finalPosition.startsWith('left') && spaceLeft < contentWidth + margin) {\n                    // If there is not enough space on the left, show on the right\n                    finalPosition = finalPosition.replace('left', 'right');\n                } else if (finalPosition.startsWith('right') && spaceRight < contentWidth + margin) {\n                    // If there is not enough space on the right, show on the left\n                    finalPosition = finalPosition.replace('right', 'left');\n                }\n\n                // Store the current position in the element for CSS adjustments (e.g., arrow position)\n                popoverElement.dataset.popoverCurrentPosition = finalPosition;\n                \n                // Show the correct arrow\n                updateArrow(popoverElement, finalPosition);\n                \n                let top, left;\n                \n                // Positioning logic with the final position\n                switch (finalPosition) {\n                    case 'top':\n                        top = triggerTop - contentHeight - margin;\n                        left = triggerLeft + (triggerRect.width / 2) - (contentRect.width / 2);\n                        break;\n                    case 'top-start':\n                        top = triggerTop - contentHeight - margin;\n                        left = triggerLeft;\n                        break;\n                    case 'top-end':\n                        top = triggerTop - contentHeight - margin;\n                        left = triggerRight - contentRect.width;\n                        break;\n                    case 'right':\n                        top = triggerTop + (triggerHeight / 2) - (contentHeight / 2);\n                        left = triggerRight + margin;\n                        break;\n                    case 'right-start':\n                        top = triggerTop;\n                        left = triggerRight + margin;\n                        break;\n                    case 'right-end':\n                        top = triggerBottom - contentHeight;\n                        left = triggerRight + margin;\n                        break;\n                    case 'bottom':\n                        top = triggerBottom + margin;\n                        left = triggerLeft + (triggerRect.width / 2) - (contentRect.width / 2);\n                        break;\n                    case 'bottom-start':\n                        top = triggerBottom + margin;\n                        left = triggerLeft;\n                        break;\n                    case 'bottom-end':\n                        top = triggerBottom + margin;\n                        left = triggerRight - contentRect.width;\n                        break;\n                    case 'left':\n                        top = triggerTop + (triggerHeight / 2) - (contentHeight / 2);\n                        left = triggerLeft - contentRect.width - margin;\n                        break;\n                    case 'left-start':\n                        top = triggerTop;\n                        left = triggerLeft - contentRect.width - margin;\n                        break;\n                    case 'left-end':\n                        top = triggerBottom - contentHeight;\n                        left = triggerLeft - contentRect.width - margin;\n                        break;\n                    default:\n                        top = triggerBottom + margin;\n                        left = triggerLeft + (triggerRect.width / 2) - (contentRect.width / 2);\n                }\n\n                // Horizontal boundary - ensures the popover does not overflow the viewport\n                if (left < 10) {\n                    left = 10; // Minimum distance from the left edge\n                } else if (left + contentWidth > viewportWidth - 10) {\n                    left = viewportWidth - contentWidth - 10; // Minimum distance from the right edge\n                }\n\n                // Vertical boundary - Optional, can be problematic in some cases\n                if (top < 10) {\n                    top = 10; // Minimum distance from the top edge\n                } else if (top + contentHeight > viewportHeight - 10) {\n                    top = viewportHeight - contentHeight - 10; // Minimum distance from the bottom edge\n                }\n\n                popoverElement.style.top = `${top}px`;\n                popoverElement.style.left = `${left}px`;\n            };\n            \n            // Event handler setup\n            function setupTrigger(trigger) {\n                const popoverId = trigger.dataset.popoverId;\n                const template = document.querySelector(`[data-popover-content-template][data-popover-id=\"${popoverId}\"]`);\n                \n                if (!template) return;\n                \n                const triggerType = trigger.dataset.popoverType;\n                \n                // Click handler\n                if (triggerType === 'click') {\n                    trigger.addEventListener('click', () => {\n                        // If the popover is already active, remove it\n                        if (activePopovers.has(popoverId)) {\n                            const popover = activePopovers.get(popoverId);\n                            popover.remove();\n                            activePopovers.delete(popoverId);\n                            return;\n                        }\n                        \n                        // Otherwise, create a new popover\n                        const content = template.content.cloneNode(true).firstElementChild;\n                        \n                        // Transfer attributes from the template\n                        Object.keys(template.dataset).forEach(key => {\n                            if (key.startsWith('popover')) {\n                                content.dataset[key] = template.dataset[key];\n                            }\n                        });\n                        \n                        // Set initial position\n                        content.dataset.popoverCurrentPosition = content.dataset.popoverPosition;\n                        \n                        // Add to the portal container\n                        portalContainer.appendChild(content);\n                        \n                        // Position it\n                        positionPopover(trigger, content);\n                        \n                        // Add to active popovers\n                        activePopovers.set(popoverId, content);\n                        \n                        // Clickaway handler\n                        if (content.dataset.popoverDisableClickaway !== 'true') {\n                            const clickHandler = (e) => {\n                                if (!trigger.contains(e.target) && !content.contains(e.target)) {\n                                    content.remove();\n                                    activePopovers.delete(popoverId);\n                                    document.removeEventListener('click', clickHandler);\n                                }\n                            };\n                            \n                            // Delay to prevent immediate closing on the current click\n                            setTimeout(() => {\n                                document.addEventListener('click', clickHandler);\n                            }, 0);\n                        }\n                        \n                        // ESC handler\n                        if (content.dataset.popoverDisableEsc !== 'true') {\n                            const keyHandler = (e) => {\n                                if (e.key === 'Escape') {\n                                    content.remove();\n                                    activePopovers.delete(popoverId);\n                                    document.removeEventListener('keydown', keyHandler);\n                                }\n                            };\n                            document.addEventListener('keydown', keyHandler);\n                        }\n                    });\n                } else if (triggerType === 'hover') {\n                    // Hover handlers\n                    let hoverTimeout;\n                    let leaveTimeout;\n                    \n                    trigger.addEventListener('mouseenter', () => {\n                        clearTimeout(leaveTimeout);\n                        \n                        // If the popover is already active, do not recreate it\n                        if (activePopovers.has(popoverId)) return;\n                        \n                        // Create a new popover\n                        const content = template.content.cloneNode(true).firstElementChild;\n                        \n                        // Transfer attributes\n                        Object.keys(template.dataset).forEach(key => {\n                            if (key.startsWith('popover')) {\n                                content.dataset[key] = template.dataset[key];\n                            }\n                        });\n                        \n                        // Add to the portal container\n                        portalContainer.appendChild(content);\n                        \n                        // Position it\n                        positionPopover(trigger, content);\n                        \n                        // Add to active popovers\n                        activePopovers.set(popoverId, content);\n                        \n                        // Hover handler for the content element\n                        content.addEventListener('mouseenter', () => {\n                            clearTimeout(leaveTimeout);\n                        });\n                        \n                        content.addEventListener('mouseleave', () => {\n                            leaveTimeout = setTimeout(() => {\n                                if (activePopovers.has(popoverId)) {\n                                    const popover = activePopovers.get(popoverId);\n                                    popover.remove();\n                                    activePopovers.delete(popoverId);\n                                }\n                            }, 100);\n                        });\n                    });\n                    \n                    trigger.addEventListener('mouseleave', (e) => {\n                        // Check if we are hovering over the content\n                        const related = e.relatedTarget;\n                        const content = activePopovers.get(popoverId);\n                        \n                        // If we are directly hovering over the content, do not close\n                        if (content && content.contains(related)) {\n                            return;\n                        }\n                        \n                        leaveTimeout = setTimeout(() => {\n                            if (activePopovers.has(popoverId)) {\n                                const popover = activePopovers.get(popoverId);\n                                popover.remove();\n                                activePopovers.delete(popoverId);\n                            }\n                        }, 100);\n                    });\n                }\n            }\n            \n            // Set up handlers for each trigger\n            triggers.forEach(setupTrigger);\n            \n            // Scroll handler for all popovers\n            window.addEventListener('scroll', () => {\n                activePopovers.forEach((content, popoverId) => {\n                    const trigger = document.querySelector(`[data-popover-trigger][data-popover-id=\"${popoverId}\"]`);\n                    if (trigger) {\n                        positionPopover(trigger, content);\n                    }\n                });\n            }, { passive: true });\n            \n            // Resize handler\n            window.addEventListener('resize', () => {\n                activePopovers.forEach((content, popoverId) => {\n                    const trigger = document.querySelector(`[data-popover-trigger][data-popover-id=\"${popoverId}\"]`);\n                    if (trigger) {\n                        positionPopover(trigger, content);\n                    }\n                });\n            });\n            \n            // Find all scrollable parent elements and add scroll handlers\n            function setupScrollHandlers() {\n                const scrollableElements = new Set();\n                \n                // Find scrollable parents for each trigger\n                triggers.forEach(trigger => {\n                    let element = trigger.parentElement;\n                    \n                    while (element) {\n                        const style = window.getComputedStyle(element);\n                        const overflow = style.overflow + style.overflowY + style.overflowX;\n                        \n                        if (overflow.includes('scroll') || overflow.includes('auto') || \n                            element.scrollHeight > element.clientHeight) {\n                            scrollableElements.add(element);\n                        }\n                        \n                        element = element.parentElement;\n                    }\n                });\n                \n                // Scroll handler for each scrollable element\n                scrollableElements.forEach(element => {\n                    element.addEventListener('scroll', () => {\n                        activePopovers.forEach((content, popoverId) => {\n                            const trigger = document.querySelector(`[data-popover-trigger][data-popover-id=\"${popoverId}\"]`);\n                            if (trigger) {\n                                positionPopover(trigger, content);\n                            }\n                        });\n                    }, { passive: true });\n                });\n            }\n            \n            setupScrollHandlers();\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
