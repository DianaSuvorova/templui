package components

import (
	"github.com/axzilla/templui/utils"
	"strconv"
)

type InputOTPProps struct {
	ID          string
	Name        string
	Value       string
	Length      int
	Type        string
	Placeholder string
	Disabled    bool
	Required    bool
	HasError    bool
	Class       string
	Attributes  templ.Attributes
}

templ InputOTPScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('inputOTP', () => ({
					otpValue: '',
					inputRefs: [],
					
					init() {
						if (this.$el.dataset.value) {
							this.otpValue = this.$el.dataset.value;
							this.fillInputsFromValue();
						}
					},
					
					getInputRefs() {
						const length = parseInt(this.$el.dataset.length || '6');
						this.inputRefs = [];
						for (let i = 0; i < length; i++) {
							const ref = this.$refs[`otpDigit${i}`];
							if (ref) this.inputRefs.push(ref);
						}
						return this.inputRefs;
					},
					
					focusFirstEmptyInput() {
						const inputs = this.getInputRefs();
						for (let i = 0; i < inputs.length; i++) {
							if (!inputs[i].value) {
								inputs[i].focus();
								break;
							}
						}
					},
					
					fillInputsFromValue() {
						const inputs = this.getInputRefs();
						const valueStr = this.otpValue.toString();
						
						for (let i = 0; i < inputs.length; i++) {
							if (i < valueStr.length) {
								inputs[i].value = valueStr[i];
							} else {
								inputs[i].value = '';
							}
						}
					},
					
					updateValue() {
						const inputs = this.getInputRefs();
						let value = '';
						
						for (let i = 0; i < inputs.length; i++) {
							value += inputs[i].value || '';
						}
						
						this.otpValue = value;
					},
					
					handleInput(event) {
						const input = event.target;
						const index = parseInt(input.dataset.inputIndex || 0);
						const inputs = this.getInputRefs();
						
						if (input.value.length > 1) {
							input.value = input.value.slice(-1);
						}
						
						if (input.value && index < inputs.length - 1) {
							inputs[index + 1].focus();
						}
						
						this.updateValue();
					},
					
					handleKeydown(event) {
						const input = event.target;
						const index = parseInt(input.dataset.inputIndex || 0);
						const inputs = this.getInputRefs();
						
						if (event.key === 'Backspace') {
							const input = event.target;
							
							if (!input.value && index > 0) {
								inputs[index - 1].focus();
								inputs[index - 1].value = '';
								event.preventDefault();
							}
						}
						
						if (event.key === 'ArrowLeft' && index > 0) {
							inputs[index - 1].focus();
							event.preventDefault();
						}
						
						if (event.key === 'ArrowRight' && index < inputs.length - 1) {
							inputs[index + 1].focus();
							event.preventDefault();
						}
						
						this.updateValue();
					},
					
					handlePaste(event) {
						event.preventDefault();
						const inputs = this.getInputRefs();
						
						const pastedData = (event.clipboardData || window.clipboardData).getData('text');
						const pastedChars = pastedData.trim().split('');
						
						for (let i = 0; i < inputs.length && i < pastedChars.length; i++) {
							inputs[i].value = pastedChars[i];
						}
						
						this.focusFirstEmptyInput();
						this.updateValue();
					}
				}));
			});
		</script>
	}
}

templ InputOTP(props InputOTPProps) {
	if props.ID == "" {
		{{ props.ID = utils.RandomID() }}
	}
	if props.Length <= 0 {
		{{ props.Length = 6 }}
	}
	if props.Type == "" {
		{{ props.Type = "text" }}
	}
	if props.Placeholder == "" {
		{{ props.Placeholder = "" }}
	}
	@InputOTPScript()
	<div
		id={ props.ID + "-container" }
		class={ utils.TwMerge(
			"flex flex-row gap-2 w-fit",
			props.Class,
		) }
		x-data="inputOTP"
		data-length={ strconv.Itoa(props.Length) }
		if props.Value != "" {
			data-value={ props.Value }
		}
		x-on:paste.prevent="handlePaste"
	>
		<input
			type="hidden"
			id={ props.ID }
			name={ props.Name }
			x-model="otpValue"
			required?={ props.Required }
		/>
		for i := 0; i < props.Length; i++ {
			<input
				x-ref={ "otpDigit" + strconv.Itoa(i) }
				type={ props.Type }
				inputmode="numeric"
				placeholder={ props.Placeholder }
				maxlength="1"
				class={ utils.TwMerge(
						"w-10 h-12 text-center",
						"rounded-md border border-input bg-background text-sm",
						"file:border-0 file:bg-transparent file:text-sm file:font-medium",
						"placeholder:text-muted-foreground",
						"focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
						"disabled:cursor-not-allowed disabled:opacity-50",
						utils.TwIf("border-destructive ring-destructive", props.HasError),
					) }
				disabled?={ props.Disabled }
				data-input-index={ strconv.Itoa(i) }
				x-on:input="handleInput"
				x-on:keydown="handleKeydown"
			/>
		}
	</div>
}
