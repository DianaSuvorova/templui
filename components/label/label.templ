package label

import "github.com/axzilla/templui/utils"

type Props struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	For        string
	Error      string
}

templ Label(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<label
		if p.ID != "" {
			id={ p.ID }
		}
		if p.For != "" {
			for={ p.For }
		}
		class={
			utils.TwMerge(
				"text-sm font-medium leading-none inline-block",
				utils.If(len(p.Error) > 0, "text-destructive"),
				p.Class,
			),
		}
		data-disabled-style="opacity-50 cursor-not-allowed"
		{ p.Attributes... }
	>
		{ children... }
	</label>
}

templ Script() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', function() {
			  document.querySelectorAll('label[for]').forEach(function(label) {
				// Check if this is our enhanced label with data-disabled-style
				if (!label.hasAttribute('data-disabled-style')) {
				  return; // Skip regular labels without data-disabled-style attribute
				}
				
				// Disabled style handler
				function updateLabelStyle(label) {
				  const forId = label.getAttribute('for');
				  const targetElement = document.getElementById(forId);
				  
				  if (targetElement && targetElement.disabled) {
					// Retrieve the custom disabled style or use the default
					const disabledStyle = label.getAttribute('data-disabled-style');
					disabledStyle.split(' ').forEach(function(className) {
					  if (className) {
						label.classList.add(className);
					  }
					});
				  } else {
					// Remove the disabled style
					const disabledStyle = label.getAttribute('data-disabled-style');
					disabledStyle.split(' ').forEach(function(className) {
					  if (className) {
						label.classList.remove(className);
					  }
					});
				  }
				}
				
				// Update the initial style
				updateLabelStyle(label);
				
				// Create a MutationObserver for this specific label
				const forId = label.getAttribute('for');
				const targetElement = document.getElementById(forId);
				
				if (targetElement) {
				  const observer = new MutationObserver(function() {
					updateLabelStyle(label);
				  });
				  
				  observer.observe(targetElement, { 
					attributes: true, 
					attributeFilter: ['disabled'] 
				  });
				}
			  });
			});
		</script>
	}
}
