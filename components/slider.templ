package components

import (
	"fmt"
	"github.com/axzilla/templui/utils"
)

// Slider Primitives für Component Composition
type SliderRootProps struct {
	ID         string
	Name       string
	Min        int
	Max        int
	Step       int
	Value      int
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

type SliderValueProps struct {
	For        string
	Format     string
	Class      string
	Attributes templ.Attributes
}

// SliderScript (kann als vanilla JS oder Alpine)
templ SliderScript() {
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', () => {
				const sliders = document.querySelectorAll('[data-slider-root]');
				
				sliders.forEach(slider => {
					const sliderId = slider.dataset.sliderId;
					const input = slider.querySelector('input[type="range"]');
					const valueElements = document.querySelectorAll(`[data-slider-value-for="${sliderId}"]`);
					
					if (input) {
						// Initiales Setup
						valueElements.forEach(el => {
							el.textContent = input.value;
						});
						
						// Event Listener
						input.addEventListener('input', () => {
							valueElements.forEach(el => {
								el.textContent = input.value;
							});
						});
					}
				});
			});
		</script>
	}
}

// Alpine-Version (optional)
templ SliderAlpineScript() {
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('slider', (initialValue) => ({
					value: initialValue,
					handleInput(event) {
						this.value = event.target.value;
					}
				}))
			})
		</script>
	}
}

// Slider Komponenten
templ SliderRoot(props SliderRootProps) {
	<div
		class={ utils.TwMerge("w-full", props.Class) }
		data-slider-root
		data-slider-id={ props.ID }
		x-data={ fmt.Sprintf("slider(%d)", props.Value) }
	>
		{ children... }
	</div>
}

templ SliderInput(props SliderRootProps) {
	<input
		@input="handleInput"
		type="range"
		id={ props.ID }
		name={ props.Name }
		if props.Value != 0 {
			value={ fmt.Sprintf("%d", props.Value) }
		}
		if props.Min != 0 {
			min={ fmt.Sprintf("%d", props.Min) }
		}
		if props.Max != 0 {
			max={ fmt.Sprintf("%d", props.Max) }
		}
		if props.Step != 0 {
			step={ fmt.Sprintf("%d", props.Step) }
		}
		class={ utils.TwMerge(
			"w-full h-2 rounded-full bg-secondary appearance-none cursor-pointer",
			"focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
			"[&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:h-4",
			"[&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary",
			"[&::-webkit-slider-thumb]:hover:bg-primary/90",
			"[&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:border-0",
			"[&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-primary",
			"[&::-moz-range-thumb]:hover:bg-primary/90",
			"disabled:opacity-50 disabled:cursor-not-allowed",
		) }
		disabled?={ props.Disabled }
		{ props.Attributes... }
	/>
}

templ SliderValue(props SliderValueProps) {
	<span
		class={ utils.TwMerge("text-sm text-muted-foreground", props.Class) }
		data-slider-value-for={ props.For }
		x-text="value"
		{ props.Attributes... }
	></span>
	if props.Format != "" {
		{ props.Format }
	}
}

// Backward-Kompatibilität: Original Slider
// templ Slider(props SliderRootProps) {
// 	@SliderRoot(props) {
// 		@SliderInput(props)
// 	}
// }
