package code

import (
	"github.com/axzilla/templui/icons"
	"github.com/axzilla/templui/utils"
)

type Size string

const (
	SizeSm   Size = "sm"
	SizeLg   Size = "lg"
	SizeFull Size = "full"
)

type Props struct {
	ID             string
	Class          string
	Attrs          templ.Attributes
	Language       string
	ShowCopyButton bool
	Size           Size
	CodeClass      string
}

templ Code(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	<div
		id={ p.ID }
		class={ utils.TwMerge("relative", p.Class) }
		{ p.Attrs... }
		x-data="code"
	>
		<pre class="overflow-hidden!">
			<code
				x-ref="code"
				class={
					utils.TwMerge(
						"language-"+p.Language,
						"overflow-y-auto! rounded-md block text-sm max-h-[501px]!",
						utils.If(p.Size == SizeSm, "max-h-[250px]!"),
						utils.If(p.Size == SizeLg, "max-h-[1000px]!"),
						utils.If(p.Size == SizeFull, "max-h-full!"),
						p.CodeClass,
					),
				}
			>
				{ children... }
			</code>
		</pre>
		if p.ShowCopyButton {
			<button
				class="absolute top-2 right-2 hover:bg-gray-500 hover:bg-opacity-30 text-white p-2 rounded"
				@click="copyCode"
			>
				<span x-show="isCopied">
					@icons.Check(icons.IconProps{Size: 14})
				</span>
				<span x-show="isNotCopied">
					@icons.Clipboard(icons.IconProps{Size: 14})
				</span>
			</button>
		}
	</div>
}

templ Script() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/pojoaque.min.css"/>
		<script nonce={ templ.GetNonce(ctx) } src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				hljs.highlightAll();

				Alpine.data('code', () => ({
					isCopied: false,
					isNotCopied: true,
					copyCode() {
						try {
							if (navigator.clipboard && window.isSecureContext) {
								navigator.clipboard.writeText(this.$refs.code.textContent);
							} else {
								const textArea = document.createElement('textarea');
								textArea.value = this.$refs.code.textContent;
								document.body.appendChild(textArea);
								textArea.select();
								document.execCommand('copy');
								document.body.removeChild(textArea);
							}
							
							this.isCopied = true;
							this.isNotCopied = false;
							setTimeout(() => {
								this.isCopied = false;
								this.isNotCopied = true;
							}, 2000);
						} catch (err) {
							console.error('Copy failed', err);
						}
					}
				}))
			})
		</script>
	}
}
