// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/axzilla/templui/icons"
	"github.com/axzilla/templui/utils"
	"math"
	"strconv"
	"strings"
)

// PaginationType defines the visual style of pagination
type PaginationType string

const (
	// PaginationTypeDefault shows numbered pages with first/last and next/previous controls
	PaginationTypeDefault PaginationType = "default"

	// PaginationTypeSimple shows only next/previous controls
	PaginationTypeSimple PaginationType = "simple"

	// PaginationTypeMinimal shows compact numbered pages with next/previous
	PaginationTypeMinimal PaginationType = "minimal"

	// PaginationTypeOutline uses outlined styling
	PaginationTypeOutline PaginationType = "outline"
)

// PaginationProps configures the Pagination component
type PaginationProps struct {
	CurrentPage  int              // Current active page (1-based index)
	TotalPages   int              // Total number of pages
	PageSize     int              // Number of items per page
	TotalItems   int              // Total number of items (alternative to TotalPages)
	MaxVisible   int              // Maximum number of page buttons to show
	Type         PaginationType   // Visual style variation
	ShowNumbers  bool             // Whether to show page numbers
	ShowControls bool             // Whether to show next/previous buttons
	UrlPattern   string           // URL pattern for links, use {page} placeholder, e.g. "/products?page={page}"
	HxGet        bool             // Whether to use hx-get instead of href for HTMX integration
	HxTarget     string           // Target element for HTMX updates
	HxSwap       string           // Swap method for HTMX updates
	Class        string           // Additional CSS classes
	Attributes   templ.Attributes // Additional HTML attributes
}

// calculateTotalPages determines the total number of pages based on either
// directly provided TotalPages or calculated from TotalItems and PageSize
func calculateTotalPages(props PaginationProps) int {
	if props.TotalPages > 0 {
		return props.TotalPages
	}

	if props.TotalItems > 0 && props.PageSize > 0 {
		return int(math.Ceil(float64(props.TotalItems) / float64(props.PageSize)))
	}

	return 1 // Default to at least 1 page
}

// getPageUrl generates a URL for a specific page
func getPageUrl(urlPattern string, page int) string {
	if urlPattern == "" {
		return "?page=" + strconv.Itoa(page)
	}

	// Replace {page} placeholder with actual page number
	return strings.Replace(urlPattern, "{page}", strconv.Itoa(page), 1)
}

// Pagination provides navigation through multiple pages of content
// with various layout and styling options.
func Pagination(props PaginationProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if props.MaxVisible <= 0 {
			props.MaxVisible = 7
		}
		if props.CurrentPage <= 0 {
			props.CurrentPage = 1
		}
		if props.Type == "" {
			props.Type = PaginationTypeDefault
		}
		if !props.ShowNumbers && !props.ShowControls {
			props.ShowNumbers = true
			props.ShowControls = true
		}
		totalPages := calculateTotalPages(props)
		if props.CurrentPage > totalPages {
			props.CurrentPage = totalPages
		}
		var templ_7745c5c3_Var2 = []any{utils.TwMerge(
			"flex flex-wrap items-center justify-center gap-1",
			props.Class,
		)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<nav role=\"navigation\" aria-label=\"Pagination\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/pagination.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, props.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.ShowControls {
			templ_7745c5c3_Err = renderPrevButton(props, totalPages).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if props.ShowNumbers && props.Type != PaginationTypeSimple {
			templ_7745c5c3_Err = renderPageNumbers(props, totalPages).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if props.ShowControls {
			templ_7745c5c3_Err = renderNextButton(props, totalPages).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// renderPrevButton creates the "Previous" navigation button
func renderPrevButton(props PaginationProps, totalPages int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if props.CurrentPage <= 1 {
			templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Err = icons.ChevronLeft(icons.IconProps{Size: "16"}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if props.Type != PaginationTypeMinimal {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<span>Previous</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				return nil
			})
			templ_7745c5c3_Err = Button(ButtonProps{
				Variant:  ButtonVariantGhost,
				Disabled: true,
			}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " <!-- <button --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\t\"flex items-center gap-1 opacity-50 cursor-not-allowed\", --> <!-- \t\t) } --> <!-- \tdisabled --> <!-- \taria-label=\"Go to previous page\" --> <!-- \taria-disabled=\"true\" --> <!-- > --> <!-- \t@icons.ChevronLeft(icons.IconProps{Size: \"16\"}) --> <!-- \tif props.Type != PaginationTypeMinimal { --> <!-- \t\t<span>Previous</span> --> <!-- \t} --> <!-- </button> -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if props.HxGet {
				templ_7745c5c3_Var6 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = icons.ChevronLeft(icons.IconProps{Size: "16"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if props.Type != PaginationTypeMinimal {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<span>Previous</span>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
					return nil
				})
				templ_7745c5c3_Err = Button(ButtonProps{
					Variant:  ButtonVariantGhost,
					HxGet:    getPageUrl(props.UrlPattern, props.CurrentPage-1),
					HxTarget: props.HxTarget,
					HxSwap:   props.HxSwap,
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " <!-- <button --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\t\"flex items-center gap-1 hover:bg-accent hover:text-accent-foreground\", --> <!-- \t\t) } --> <!-- \taria-label=\"Go to previous page\" --> <!-- \tdata-page={ strconv.Itoa(props.CurrentPage - 1) } --> <!-- \tdata-pagination-prev --> <!-- \thx-get={ getPageUrl(props.UrlPattern, props.CurrentPage-1) } --> <!-- \tif props.HxTarget != \"\" { --> <!-- \t\thx-target={ props.HxTarget } --> <!-- \t} --> <!-- \tif props.HxSwap != \"\" { --> <!-- \t\thx-swap={ props.HxSwap } --> <!-- \t} --> <!-- > --> <!-- \t@icons.ChevronLeft(icons.IconProps{Size: \"16\"}) --> <!-- \tif props.Type != PaginationTypeMinimal { --> <!-- \t\t<span>Previous</span> --> <!-- \t} --> <!-- </button> -->")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Var7 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Err = icons.ChevronLeft(icons.IconProps{Size: "16", Class: "mr-1"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if props.Type != PaginationTypeMinimal {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<span>Previous</span>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
					return nil
				})
				templ_7745c5c3_Err = Button(ButtonProps{
					Variant: ButtonVariantGhost,
					Href:    getPageUrl(props.UrlPattern, props.CurrentPage-1),
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, " <!-- <a --> <!-- \thref={ templ.SafeURL(getPageUrl(props.UrlPattern, props.CurrentPage-1)) } --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\t\"flex items-center gap-1 hover:bg-accent hover:text-accent-foreground\", --> <!-- \t\t) } --> <!-- \taria-label=\"Go to previous page\" --> <!-- \tdata-page={ strconv.Itoa(props.CurrentPage - 1) } --> <!-- \tdata-pagination-prev --> <!-- > --> <!-- \t@icons.ChevronLeft(icons.IconProps{Size: \"16\"}) --> <!-- \tif props.Type != PaginationTypeMinimal { --> <!-- \t\t<span>Previous</span> --> <!-- \t} --> <!-- </a> -->")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		return nil
	})
}

// renderNextButton creates the "Next" navigation button
func renderNextButton(props PaginationProps, totalPages int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if props.CurrentPage >= totalPages {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var9 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				if props.Type != PaginationTypeMinimal {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<span>Next</span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = icons.ChevronRight(icons.IconProps{Size: "16", Class: "ml-1"}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = Button(ButtonProps{
				Variant:  ButtonVariantGhost,
				Disabled: true,
			}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var9), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, " <!-- <button --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\t\"flex items-center gap-1 opacity-50 cursor-not-allowed\", --> <!-- \t\t) } --> <!-- \tdisabled --> <!-- \taria-label=\"Go to next page\" --> <!-- \taria-disabled=\"true\" --> <!-- > --> <!-- \tif props.Type != PaginationTypeMinimal { --> <!-- \t\t<span>Next</span> --> <!-- \t} --> <!-- \t@icons.ChevronRight(icons.IconProps{Size: \"16\"}) --> <!-- </button> -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if props.HxGet {
				templ_7745c5c3_Var10 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					if props.Type != PaginationTypeMinimal {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<span>Next</span>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = icons.ChevronRight(icons.IconProps{Size: "16", Class: "ml-1"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = Button(ButtonProps{
					Variant:  ButtonVariantGhost,
					HxGet:    getPageUrl(props.UrlPattern, props.CurrentPage+1),
					HxTarget: props.HxTarget,
					HxSwap:   props.HxSwap,
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var10), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, " <!-- <button --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\t\"flex items-center gap-1 hover:bg-accent hover:text-accent-foreground\", --> <!-- \t\t) } --> <!-- \taria-label=\"Go to next page\" --> <!-- \tdata-page={ strconv.Itoa(props.CurrentPage + 1) } --> <!-- \tdata-pagination-next --> <!-- \thx-get={ getPageUrl(props.UrlPattern, props.CurrentPage+1) } --> <!-- \tif props.HxTarget != \"\" { --> <!-- \t\thx-target={ props.HxTarget } --> <!-- \t} --> <!-- \tif props.HxSwap != \"\" { --> <!-- \t\thx-swap={ props.HxSwap } --> <!-- \t} --> <!-- > --> <!-- \tif props.Type != PaginationTypeMinimal { --> <!-- \t\t<span>Next</span> --> <!-- \t} --> <!-- \t@icons.ChevronRight(icons.IconProps{Size: \"16\"}) --> <!-- </button> -->")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Var11 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					if props.Type != PaginationTypeMinimal {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "<span>Next</span>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = icons.ChevronRight(icons.IconProps{Size: "16", Class: "ml-1"}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = Button(ButtonProps{
					Variant: ButtonVariantGhost,
					Href:    getPageUrl(props.UrlPattern, props.CurrentPage+1),
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var11), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, " <!-- <a --> <!-- \thref={ templ.SafeURL(getPageUrl(props.UrlPattern, props.CurrentPage+1)) } --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\t\"flex items-center gap-1 hover:bg-accent hover:text-accent-foreground\", --> <!-- \t\t) } --> <!-- \taria-label=\"Go to next page\" --> <!-- \tdata-page={ strconv.Itoa(props.CurrentPage + 1) } --> <!-- \tdata-pagination-next --> <!-- > --> <!-- \tif props.Type != PaginationTypeMinimal { --> <!-- \t\t<span>Next</span> --> <!-- \t} --> <!-- \t@icons.ChevronRight(icons.IconProps{Size: \"16\"}) --> <!-- </a> -->")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		return nil
	})
}

// renderPageNumbers creates the numbered pagination buttons with ellipsis for large ranges
func renderPageNumbers(props PaginationProps, totalPages int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var12 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var12 == nil {
			templ_7745c5c3_Var12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if props.Type != PaginationTypeMinimal && props.CurrentPage > 3 && props.MaxVisible < totalPages {
			templ_7745c5c3_Err = renderPageButton(props, 1, totalPages).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "  ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if props.CurrentPage > 4 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<span class=\"flex h-10 w-10 items-center justify-center text-sm\">...</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}

		// Calculate visible page range
		start, end := calculateVisibleRange(props.CurrentPage, totalPages, props.MaxVisible)
		for i := start; i <= end; i++ {
			templ_7745c5c3_Err = renderPageButton(props, i, totalPages).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if props.Type != PaginationTypeMinimal && props.CurrentPage < totalPages-2 && props.MaxVisible < totalPages {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if props.CurrentPage < totalPages-3 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "<span class=\"flex h-10 w-10 items-center justify-center text-sm\">...</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = renderPageButton(props, totalPages, totalPages).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

// renderPageButton creates an individual page number button
func renderPageButton(props PaginationProps, page int, totalPages int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var13 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var13 == nil {
			templ_7745c5c3_Var13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if page == props.CurrentPage {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = Button(ButtonProps{
				Variant: getButtonVariant(props.Type),
				Text:    strconv.Itoa(page),
				Size:    ButtonSizeIcon,
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, " <!-- <button --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\tutils.TwIfElse(props.Type == PaginationTypeMinimal,\"w-8 h-8\", \"w-10 h-10\"), --> <!-- \t\t\tgetCurrentPageClasses(props.Type), --> <!-- \t\t) } --> <!-- \taria-label={ \"Page \" + strconv.Itoa(page) + \" (current)\" } --> <!-- \taria-current=\"page\" --> <!-- \tdisabled --> <!-- > --> <!-- \t{ strconv.Itoa(page) } --> <!-- </button> -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if props.HxGet {
				templ_7745c5c3_Err = Button(ButtonProps{
					Variant:  ButtonVariantGhost,
					Text:     strconv.Itoa(page),
					HxGet:    getPageUrl(props.UrlPattern, page),
					HxTarget: props.HxTarget,
					HxSwap:   props.HxSwap,
					Size:     ButtonSizeIcon,
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, " <!-- <button --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\tutils.TwIfElse(props.Type == PaginationTypeMinimal,\"w-8 h-8\", \"w-10 h-10\"), --> <!-- \t\t\t\"hover:bg-accent hover:text-accent-foreground\", --> <!-- \t\t) } --> <!-- \taria-label={ \"Go to page \" + strconv.Itoa(page) } --> <!-- \tdata-page={ strconv.Itoa(page) } --> <!-- \thx-get={ getPageUrl(props.UrlPattern, page) } --> <!-- \tif props.HxTarget != \"\" { --> <!-- \t\thx-target={ props.HxTarget } --> <!-- \t} --> <!-- \tif props.HxSwap != \"\" { --> <!-- \t\thx-swap={ props.HxSwap } --> <!-- \t} --> <!-- > --> <!-- \t{ strconv.Itoa(page) } --> <!-- </button> -->")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = Button(ButtonProps{
					Variant: ButtonVariantGhost,
					Text:    strconv.Itoa(page),
					Size:    ButtonSizeIcon,
					Href:    getPageUrl(props.UrlPattern, page),
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, " <!-- <a --> <!-- \thref={ templ.SafeURL(getPageUrl(props.UrlPattern, page)) } --> <!-- \tclass={ utils.TwMerge( --> <!-- \t\t\tgetButtonBaseClasses(props.Type), --> <!-- \t\t\tutils.TwIfElse(props.Type == PaginationTypeMinimal,\"w-8 h-8\", \"w-10 h-10\"), --> <!-- \t\t\t\"hover:bg-accent hover:text-accent-foreground\", --> <!-- \t\t) } --> <!-- \taria-label={ \"Go to page \" + strconv.Itoa(page) } --> <!-- \tdata-page={ strconv.Itoa(page) } --> <!-- > --> <!-- \t{ strconv.Itoa(page) } --> <!-- </a> -->")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		return nil
	})
}

// calculateVisibleRange determines which page numbers should be visible
func calculateVisibleRange(currentPage, totalPages, maxVisible int) (int, int) {
	if totalPages <= maxVisible {
		return 1, totalPages
	}

	// Calculate half of the max visible pages
	half := maxVisible / 2

	// Calculate start and end
	start := currentPage - half
	end := currentPage + half

	// Adjust if out of bounds
	if start < 1 {
		end += (1 - start)
		start = 1
	}

	if end > totalPages {
		start -= (end - totalPages)
		if start < 1 {
			start = 1
		}
		end = totalPages
	}

	return start, end
}

// Get the appropriate button variant based on pagination type
func getButtonVariant(paginationType PaginationType) ButtonVariant {
	switch paginationType {
	case PaginationTypeOutline:
		return ButtonVariantOutline
	default:
		return ButtonVariantDefault
	}
}

// getButtonBaseClasses returns CSS classes based on pagination type
func getButtonBaseClasses(paginationType PaginationType) string {
	switch paginationType {
	case PaginationTypeOutline:
		return "flex items-center justify-center rounded-md border border-input bg-transparent text-sm font-medium transition-colors"
	case PaginationTypeMinimal:
		return "flex items-center justify-center rounded-md text-sm font-medium transition-colors h-8 w-8"
	default:
		return "flex items-center justify-center rounded-md px-3 text-sm font-medium transition-colors"
	}
}

// getCurrentPageClasses returns CSS classes for the current page based on type
func getCurrentPageClasses(paginationType PaginationType) string {
	switch paginationType {
	case PaginationTypeOutline:
		return "border-primary bg-transparent text-foreground font-semibold"
	case PaginationTypeMinimal:
		return "bg-primary text-primary-foreground"
	default:
		return "bg-primary text-primary-foreground"
	}
}

var _ = templruntime.GeneratedTemplate
