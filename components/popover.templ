package components

import "github.com/axzilla/templui/utils"
import "fmt"

type PopoverPlacement string

const (
	PopoverBottom PopoverPlacement = "bottom"
	PopoverTop    PopoverPlacement = "top"
	PopoverLeft   PopoverPlacement = "left"
	PopoverRight  PopoverPlacement = "right"
)

type PopoverTriggerType string

const (
	PopoverTriggerTypeHover PopoverTriggerType = "hover"
	PopoverTriggerTypeClick PopoverTriggerType = "click"
)

type PopoverProps struct {
	Class string
}

type PopoverTriggerProps struct {
	ID          string
	TriggerType PopoverTriggerType
}

type PopoverContentProps struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	Placement        PopoverPlacement
	ContainerClass   string
	DisableClickAway bool
	DisableESC       bool
}

templ PopoverTrigger(props ...PopoverTriggerProps) {
	{{ var p PopoverTriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.TriggerType == "" {
		{{ p.TriggerType = PopoverTriggerTypeClick }}
	}
	<span
		x-data="popoverTrigger"
		data-popover-id={ p.ID }
		data-popover-trigger={ string(p.TriggerType) }
		@mouseenter="openPopover"
		@mouseleave="closePopover"
		@focus="openPopover"
		@blur="closePopover"
		@click="togglePopover"
	>
		{ children... }
	</span>
}

templ Popover(props ...PopoverProps) {
	{{ var p PopoverProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div class={ utils.TwMerge("relative", p.Class) }>
		{ children... }
	</div>
}

templ PopoverContent(props ...PopoverContentProps) {
	{{ var p PopoverContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Placement == "" {
		{{ p.Placement = PopoverBottom }}
	}
	<div
		x-data="popover"
		x-on:open-popover.window="handleOpenPopover"
		x-on:close-popover.window="handleClosePopover"
		x-on:toggle-popover.window="handleTogglePopover"
		data-popover-id={ p.ID }
		x-show="open"
		x-cloak
		x-transition:enter="transition ease-out duration-100"
		x-transition:enter-start="opacity-0 scale-95"
		x-transition:enter-end="opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="opacity-100 scale-100"
		x-transition:leave-end="opacity-0 scale-95"
		class={
			utils.TwMerge(
				"absolute z-50 flex origin-center flex-col items-center justify-center will-change-transform",
				utils.If(p.Placement == PopoverBottom, "top-full start-1/2 -translate-x-1/2 mt-1"),
				utils.If(p.Placement == PopoverLeft, "end-full top-1/2 -translate-y-1/2 mr-1"),
				utils.If(p.Placement == PopoverRight, "start-full top-1/2 -translate-y-1/2 ml-1"),
				utils.If(p.Placement == PopoverTop, "bottom-full start-1/2 -translate-x-1/2 mb-1"),
				p.ContainerClass,
			),
		}
	>
		<div
			if !p.DisableClickAway {
				x-on:click.outside="handleClosePopover"
			}
			if !p.DisableESC {
				x-on:keydown.esc.window="handleClosePopover"
			}
			class={
				utils.TwMerge(
					"bg-background w-full overflow-hidden rounded-lg border transition-opacity text-start text-sm",
					"overflow-scroll",
					p.Class,
				),
			}
		>
			{ children... }
		</div>
		<div
			class={
				utils.TwMerge(
					"absolute h-2 w-2 rotate-45 bg-forground",
					getxArrowClass(p.Placement),
				),
			}
		>dddd</div>
	</div>
}

func getxArrowClass(side PopoverPlacement) string {
	switch side {
	case PopoverTop:
		return "bottom-[-4px] left-1/2 -translate-x-1/2"
	case PopoverRight:
		return "left-[-4px] top-1/2 -translate-y-1/2"
	case PopoverBottom:
		return "top-[-4px] left-1/2 -translate-x-1/2"
	case PopoverLeft:
		return "right-[-4px] top-1/2 -translate-y-1/2"
	default:
		return "bottom-[-4px] left-1/2 -translate-x-1/2"
	}
}

// templ getArrowElement(placement PopoverPlacement) {
// 	switch placement {
// 		case PopoverTop:
// 			// Top placement: arrow: ▼
// 			<div
// 				class={ utils.TwMerge("relative z-10 -mt-px h-0 w-0 flex-none border-e-8 border-s-8 border-t-8 border-e-transparent border-s-transparent border-t"), }
// 				aria-hidden="true"
// 			></div>
// 			<div
// 				class={ "relative z-0 -mb-[9px] h-0 w-0 flex-none border-e-8 border-s-8 border-t-8 border-e-transparent border-s-transparent border-t " }
// 				aria-hidden="true"
// 			></div>
// 		case PopoverBottom:
// 			// Bottom placement: arrow: ▲
// 			<div
// 				class={ utils.TwMerge("relative z-10 -mt-px h-0 w-0 flex-none border-e-8 border-s-8 border-b-8 border-e-transparent border-s-transparent border-b") }
// 				aria-hidden="true"
// 			></div>
// 			<div
// 				class={ "relative z-0 -mt-[9px] h-0 w-0 flex-none border-e-8 border-s-8 border-b-8 border-e-transparent border-s-transparent border-b " }
// 				aria-hidden="true"
// 			></div>
// 		case PopoverLeft:
// 			// Left placement: arrow: ►
// 			<div
// 				class={ utils.TwMerge("relative z-10 -ml-px -mb-[16px] h-0 w-0 flex-none border-t-8 border-b-8 border-l-8 border-t-transparent border-b-transparent border-l") }
// 				aria-hidden="true"
// 			></div>
// 			<div
// 				class={ "relative z-0 -mr-px h-0 w-0 flex-none border-t-8 border-b-8 border-l-8 border-t-transparent border-b-transparent border-l " }
// 				aria-hidden="true"
// 			></div>
// 		case PopoverRight:
// 			// Right placement: arrow: ◄
// 			<div
// 				class={ utils.TwMerge("relative z-10 -mr-px -mb-[16px] h-0 w-0 flex-none border-t-8 border-b-8 border-r-8 border-t-transparent border-b-transparent border-r") }
// 				aria-hidden="true"
// 			></div>
// 			<div
// 				class={ "relative z-0 -ml-[8px] h-0 w-0 flex-none border-t-8 border-b-8 border-r-8 border-t-transparent border-b-transparent border-r " }
// 				aria-hidden="true"
// 			></div>
// 	}
// }
templ PopoverScript() {
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
            document.addEventListener('alpine:init', () => {
                Alpine.data('popover', () => ({
                    open: false,

                    handleOpenPopover(event) {
                        if (event.detail.id === this.$el.dataset.popoverId) {
                            this.open = true;
                        }
                    },

                    handleClosePopover(event) {
                        if (event.detail.id === this.$el.dataset.popoverId) {
                            this.open = false;
                        }
                    },

                    handleTogglePopover(event) {
                        if (event.detail.id === this.$el.dataset.popoverId) {
                            this.open = !this.open;
                        }
                    },
                }));

                Alpine.data('popoverTrigger', () => ({
                    openPopover() {
                        if (this.$el.dataset.popoverTrigger === "hover"){
                            this.$dispatch('open-popover', {
                                id: this.$el.dataset.popoverId
                            })
                        }
                    },
                    closePopover() {
                        if (this.$el.dataset.popoverTrigger === "hover"){
                            this.$dispatch('close-popover', {
                                id: this.$el.dataset.popoverId
                            })
                        }
                    },
                    togglePopover() {
                        this.$dispatch('toggle-popover', {
                            id: this.$el.dataset.popoverId
                        })
                    }
                }))
            })
        </script>
	}
}
