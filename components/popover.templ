package components

import "github.com/axzilla/templui/utils"

type PopoverPosition string

const (
	PopoverTop         PopoverPosition = "top"
	PopoverTopStart    PopoverPosition = "top-start"
	PopoverTopEnd      PopoverPosition = "top-end"
	PopoverRight       PopoverPosition = "right"
	PopoverRightStart  PopoverPosition = "right-start"
	PopoverRightEnd    PopoverPosition = "right-end"
	PopoverBottom      PopoverPosition = "bottom"
	PopoverBottomStart PopoverPosition = "bottom-start"
	PopoverBottomEnd   PopoverPosition = "bottom-end"
	PopoverLeft        PopoverPosition = "left"
	PopoverLeftStart   PopoverPosition = "left-start"
	PopoverLeftEnd     PopoverPosition = "left-end"
)

type PopoverTriggerType string

const (
	PopoverTriggerTypeHover PopoverTriggerType = "hover"
	PopoverTriggerTypeClick PopoverTriggerType = "click"
)

type PopoverProps struct {
	Class string
}

type PopoverTriggerProps struct {
	ID          string
	TriggerType PopoverTriggerType
}

type PopoverContentProps struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	Position         PopoverPosition
	DisableClickAway bool
	DisableESC       bool
	ShowArrow        bool
}

templ popoverPortalContainer() {
	<div
		id="popover-portal-container"
		class="fixed inset-0 z-[9999] pointer-events-none"
	></div>
}

templ PopoverTrigger(props ...PopoverTriggerProps) {
	{{ var p PopoverTriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.TriggerType == "" {
		{{ p.TriggerType = PopoverTriggerTypeClick }}
	}
	<span
		data-popover-trigger
		data-popover-id={ p.ID }
		data-popover-type={ string(p.TriggerType) }
	>
		{ children... }
	</span>
}

templ Popover(props ...PopoverProps) {
	{{ var p PopoverProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div class={ utils.TwMerge("relative inline-block", p.Class) }>
		{ children... }
	</div>
	@popoverPortalContainer()
}

templ PopoverContent(props ...PopoverContentProps) {
	{{ var p PopoverContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Position == "" {
		{{ p.Position = PopoverBottom }}
	}
	<div
		data-popover-content
		data-popover-id={ p.ID }
		data-popover-position={ string(p.Position) }
		class={
			utils.TwMerge(
				"bg-background rounded-lg border text-sm shadow-lg hidden pointer-events-auto absolute z-[9999]",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		<div class="w-full overflow-hidden">
			{ children... }
		</div>
		if p.ShowArrow {
			<div
				class={
					utils.TwMerge(
						"absolute h-2 w-2 rotate-45 bg-background border",
						popoverArrowClass(p.Position),
					),
				}
			></div>
		}
	</div>
}

func popoverArrowClass(side PopoverPosition) string {
	switch side {
	case PopoverTop:
		return "bottom-[-4px] left-1/2 -translate-x-1/2 border-b border-r"
	case PopoverTopStart:
		return "bottom-[-4px] left-4 border-b border-r"
	case PopoverTopEnd:
		return "bottom-[-4px] right-4 border-b border-r"
	case PopoverRight:
		return "left-[-4px] top-1/2 -translate-y-1/2 border-b border-l"
	case PopoverRightStart:
		return "left-[-4px] top-0 border-b border-l" // Fix: Ganz oben
	case PopoverRightEnd:
		return "left-[-4px] bottom-0 border-b border-l" // Fix: Ganz unten
	case PopoverBottom:
		return "top-[-4px] left-1/2 -translate-x-1/2 border-t border-l"
	case PopoverBottomStart:
		return "top-[-4px] left-4 border-t border-l"
	case PopoverBottomEnd:
		return "top-[-4px] right-4 border-t border-l"
	case PopoverLeft:
		return "right-[-4px] top-1/2 -translate-y-1/2 border-t border-r"
	case PopoverLeftStart:
		return "right-[-4px] top-0 border-t border-r" // Fix: Ganz oben
	case PopoverLeftEnd:
		return "right-[-4px] bottom-0 border-t border-r" // Fix: Ganz unten
	default:
		return "top-[-4px] left-1/2 -translate-x-1/2 border-t border-l"
	}
}

templ PopoverScript() {
	<script defer nonce={ templ.GetNonce(ctx) }>
        document.addEventListener('DOMContentLoaded', () => {
            const portalContainer = document.getElementById('popover-portal-container');
            if (!portalContainer) return;
            
            const triggers = document.querySelectorAll('[data-popover-trigger]');
            const contents = document.querySelectorAll('[data-popover-content]');

            contents.forEach(content => {
                portalContainer.appendChild(content);
            });

            const positionPopover = (trigger, content) => {
                const triggerRect = trigger.getBoundingClientRect();
                const contentRect = content.getBoundingClientRect();
                const margin = 8;
                const scrollY = window.scrollY || window.pageYOffset;
                const scrollX = window.scrollX || window.pageXOffset;

                let top, left;
                const position = content.dataset.popoverPosition || 'bottom';

                switch (position) {
                    case 'top':
                        top = triggerRect.top + scrollY - contentRect.height - margin;
                        left = triggerRect.left + scrollX + (triggerRect.width / 2) - (contentRect.width / 2);
                        break;
                    case 'top-start':
                        top = triggerRect.top + scrollY - contentRect.height - margin;
                        left = triggerRect.left + scrollX;
                        break;
                    case 'top-end':
                        top = triggerRect.top + scrollY - contentRect.height - margin;
                        left = triggerRect.right + scrollX - contentRect.width;
                        break;
                    case 'right':
                        top = triggerRect.top + scrollY + (triggerRect.height / 2) - (contentRect.height / 2);
                        left = triggerRect.right + scrollX + margin;
                        break;
                    case 'right-start':
                        top = triggerRect.top + scrollY - 2;
                        left = triggerRect.right + scrollX + margin;
                        break;
                    case 'right-end':
                        top = triggerRect.bottom + scrollY - contentRect.height + 2;
                        left = triggerRect.right + scrollX + margin;
                        break;
                    case 'bottom':
                        top = triggerRect.bottom + scrollY + margin;
                        left = triggerRect.left + scrollX + (triggerRect.width / 2) - (contentRect.width / 2);
                        break;
                    case 'bottom-start':
                        top = triggerRect.bottom + scrollY + margin;
                        left = triggerRect.left + scrollX;
                        break;
                    case 'bottom-end':
                        top = triggerRect.bottom + scrollY + margin;
                        left = triggerRect.right + scrollX - contentRect.width;
                        break;
                    case 'left':
                        top = triggerRect.top + scrollY + (triggerRect.height / 2) - (contentRect.height / 2);
                        left = triggerRect.left + scrollX - contentRect.width - margin;
                        break;
                    case 'left-start':
                        top = triggerRect.top + scrollY - 2;
                        left = triggerRect.left + scrollX - contentRect.width - margin;
                        break;
                    case 'left-end':
                        top = triggerRect.bottom + scrollY - contentRect.height + 2;
                        left = triggerRect.left + scrollX - contentRect.width - margin;
                        break;
                    default:
                        top = triggerRect.bottom + scrollY + margin;
                        left = triggerRect.left + scrollX + (triggerRect.width / 2) - (contentRect.width / 2);
                }

                content.style.top = `${top}px`;
                content.style.left = `${left}px`;
                
                console.log(`Positioning ${position}: top=${top}, left=${left}, triggerRect.top=${triggerRect.top}, scrollY=${scrollY}, triggerX=${triggerRect.left}, triggerY=${triggerRect.top}, contentWidth=${contentRect.width}, contentHeight=${contentRect.height}`);
            };

            triggers.forEach(trigger => {
                const popoverId = trigger.dataset.popoverId;
                const content = document.querySelector(`[data-popover-content][data-popover-id="${popoverId}"]`);
                if (!content) return;

                const triggerType = trigger.dataset.popoverType;

                if (triggerType === 'click') {
                    trigger.addEventListener('click', () => {
                        const isOpen = content.classList.contains('hidden');
                        content.classList.toggle('hidden', !isOpen);
                        if (isOpen) positionPopover(trigger, content);
                    });

                    if (content.dataset.popoverDisableClickaway !== 'true') {
                        document.addEventListener('click', (e) => {
                            if (!content.classList.contains('hidden') && 
                                !trigger.contains(e.target) && 
                                !content.contains(e.target)) {
                                content.classList.add('hidden');
                            }
                        });
                    }

                    if (content.dataset.popoverDisableEsc !== 'true') {
                        document.addEventListener('keydown', (e) => {
                            if (e.key === 'Escape' && !content.classList.contains('hidden')) {
                                content.classList.add('hidden');
                            }
                        });
                    }
                } else if (triggerType === 'hover') {
                    trigger.addEventListener('mouseenter', () => {
                        content.classList.remove('hidden');
                        positionPopover(trigger, content);
                    });
                    trigger.addEventListener('mouseleave', () => {
                        content.classList.add('hidden');
                    });
                }
            });

            // Global scroll and resize event for all popovers
            window.addEventListener('scroll', () => {
                triggers.forEach(trigger => {
                    const popoverId = trigger.dataset.popoverId;
                    const content = document.querySelector(`[data-popover-content][data-popover-id="${popoverId}"]`);
                    if (!content || content.classList.contains('hidden')) return;
                    
                    positionPopover(trigger, content);
                });
            }, { passive: true }); // Using passive for better scroll performance

            // Identify and attach scroll events to all scrollable parents
            triggers.forEach(trigger => {
                let element = trigger;
                const scrollableParents = [];
                
                // Find all scrollable parents
                while (element) {
                    if (element.scrollHeight > element.clientHeight) {
                        scrollableParents.push(element);
                    }
                    element = element.parentElement;
                }
                
                // Attach scroll event to each scrollable parent
                scrollableParents.forEach(scrollParent => {
                    scrollParent.addEventListener('scroll', () => {
                        const popoverId = trigger.dataset.popoverId;
                        const content = document.querySelector(`[data-popover-content][data-popover-id="${popoverId}"]`);
                        if (!content || content.classList.contains('hidden')) return;
                        
                        positionPopover(trigger, content);
                    }, { passive: true });
                });
            });

            window.addEventListener('resize', () => {
                triggers.forEach(trigger => {
                    const popoverId = trigger.dataset.popoverId;
                    const content = document.querySelector(`[data-popover-content][data-popover-id="${popoverId}"]`);
                    if (!content || content.classList.contains('hidden')) return;
                    
                    positionPopover(trigger, content);
                });
            });
        });
    </script>
}
