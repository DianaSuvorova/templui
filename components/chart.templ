package components

import "github.com/axzilla/templui/utils"

type ChartType string

const (
	ChartTypeBar  ChartType = "bar"
	ChartTypeLine ChartType = "line"
	ChartTypePie  ChartType = "pie"
)

// ChartDataset represents a dataset for Chart.js
type ChartDataset struct {
	Label           string    `json:"label"`
	Data            []float64 `json:"data"`
	BorderWidth     int       `json:"borderWidth,omitempty"`
	BorderColor     string    `json:"borderColor,omitempty"`
	BackgroundColor string    `json:"backgroundColor,omitempty"`
	Tension         float64   `json:"tension,omitempty"`
	Fill            bool      `json:"fill,omitempty"`
}

// ChartScales represents the scales configuration
type ChartScales struct {
	Y ChartYAxis `json:"y,omitempty"`
	X ChartXAxis `json:"x,omitempty"`
}

// ChartYAxis represents the Y axis configuration
type ChartYAxis struct {
	BeginAtZero bool    `json:"beginAtZero,omitempty"`
	Min         float64 `json:"min,omitempty"`
	Max         float64 `json:"max,omitempty"`
	Title       string  `json:"title,omitempty"`
}

// ChartXAxis represents the X axis configuration
type ChartXAxis struct {
	Title string `json:"title,omitempty"`
}

// ChartOptions represents Chart.js options
type ChartOptions struct {
	Responsive bool        `json:"responsive,omitempty"`
	Scales     ChartScales `json:"scales,omitempty"`
	Legend     bool        `json:"legend,omitempty"`
}

// ChartData represents all data needed for Chart.js
type ChartData struct {
	Labels   []string       `json:"labels"`
	Datasets []ChartDataset `json:"datasets"`
}

// ChartConfig represents the complete Chart.js configuration
type ChartConfig struct {
	Type        ChartType    `json:"type"`
	Data        ChartData    `json:"data"`
	Options     ChartOptions `json:"options,omitempty"`
	ShowLegend  bool         `json:"showLegend,omitempty"`
	ShowXAxis   bool         `json:"showXAxis"`
	ShowYAxis   bool         `json:"showYAxis"`
	ShowXLabels bool         `json:"showXLabels"`
	ShowYLabels bool         `json:"showYLabels"`
	ShowXGrid   bool         `json:"showXGrid"`
	ShowYGrid   bool         `json:"showYGrid"`
	Horizontal  bool         `json:"horizontal"`
	Stacked     bool         `json:"stacked"`
}

// ChartProps for the Chart component
type ChartProps struct {
	Type        ChartType
	Data        ChartData
	Options     ChartOptions
	ShowLegend  bool
	ShowXAxis   bool
	ShowYAxis   bool
	ShowXLabels bool
	ShowYLabels bool
	ShowXGrid   bool
	ShowYGrid   bool
	Horizontal  bool
	Stacked     bool
	Class       string // Additional CSS classes
}

// ChartScripts ensures Chart.js and initialization code is only loaded once per page
templ ChartScripts() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<!-- Load Chart.js library -->
		<script defer nonce={ templ.GetNonce(ctx) } src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<!-- Initialize charts -->
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', function() {
				
				// Chart-Instanzen speichern
				const chartInstances = {};

				// Funktion zum Abrufen der aktuellen CSS-Variablen-Werte
				function getThemeColors() {
					const computedStyle = getComputedStyle(document.documentElement);
					return {
						foreground: computedStyle.getPropertyValue('--foreground').trim(),
						background: computedStyle.getPropertyValue('--background').trim(),
						mutedForeground: computedStyle.getPropertyValue('--muted-foreground').trim(),
						border: computedStyle.getPropertyValue('--border').trim()
					};
				}

				// Funktion zum Initialisieren/Aktualisieren der Charts
				function initCharts() {
					// Aktuelle Farbwerte abrufen
					const colors = getThemeColors();

					document.querySelectorAll('.chart-container').forEach(container => {
						const canvas = container.querySelector('canvas');
						if (!canvas) return;

						const dataId = canvas.getAttribute('data-chart-id');
						const dataElement = document.getElementById(dataId);
						if (!dataElement) return;

						// Vorhandenes Chart zerstören, falls vorhanden
						if (chartInstances[canvas.id]) {
							chartInstances[canvas.id].destroy();
						}

						// Parse Konfiguration
						const chartConfig = JSON.parse(dataElement.textContent);

						// Chart erstellen mit berechneten Theme-Farben
						const chart = new Chart(canvas, {
							...chartConfig,
							options: {
    							indexAxis: chartConfig.horizontal ? "y" : "x",
								plugins: {
									legend: {
										display: chartConfig.showLegend || false,
										labels: {
											color: colors.foreground
										}
									},
									tooltip: {
										backgroundColor: colors.background,
										bodyColor: colors.mutedForeground,
										titleColor: colors.foreground,
										borderColor: colors.border,
										borderWidth: 1
									}
								},
								scales: {
									x: {
										// Display options separately for axis, ticks, and grid
										display: chartConfig.showXLabels || chartConfig.showXGrid || chartConfig.showXAxis,
										border: {
											display: chartConfig.showXAxis || false
										},
										ticks: { 										
											display: chartConfig.showXLabels || false,   
											color: colors.mutedForeground
										},
										grid: {
											display: chartConfig.showXGrid || false,
											color: colors.border
										},
										stacked: chartConfig.stacked
										
									},
									y: {
										// Display options separately for axis, ticks, and grid
										display: chartConfig.showYLabels || chartConfig.showYGrid || chartConfig.showYAxis,
										border: {
											display: chartConfig.showYAxis || false
										},
										ticks: { 										
											display: chartConfig.showYLabels || false,   
											color: colors.mutedForeground
										},
										grid: {
											display: chartConfig.showYGrid || false,
											color: colors.border
										},
										stacked: chartConfig.stacked
									}
								}
							}
						});
			
						// Chart-Instanz speichern
						chartInstances[canvas.id] = chart;
					});
				}

				// Initial Charts erstellen
				initCharts();

				window.addEventListener('resize', function() {
					for (let id in chartInstances) {
						chartInstances[id].resize();
					}
				});

				// MutationObserver für Theme-Änderungen
				const observer = new MutationObserver(() => {
					// Kurze Verzögerung, um sicherzustellen, dass CSS-Variablen aktualisiert sind
					setTimeout(initCharts, 50);
				});

				observer.observe(document.documentElement, { attributes: true });

				// Auch auf Alpine-Initialisierung warten
				document.addEventListener('alpine:initialized', () => {
					// Globales Theme-Changed-Event registrieren
					document.addEventListener('theme-changed', initCharts);
				});
			});
		</script>
	}
}

// Chart renders a chart using Chart.js
templ Chart(props ChartProps) {
	<!-- Generate unique IDs for this chart -->
	{{ chartId := "chart-" + utils.RandomID() }}
	{{ dataId := chartId + "-data" }}
	<!-- Chart container -->
	<div class={ utils.TwMerge("chart-container relative", props.Class) }>
		<canvas id={ chartId } data-chart-id={ dataId }></canvas>
	</div>
	{{
	// Create chart config with defaults
	chartConfig := ChartConfig{
		Type:        props.Type,
		Data:        props.Data,
		Options:     props.Options,
		ShowLegend:  props.ShowLegend,
		ShowXAxis:   props.ShowXAxis,
		ShowYAxis:   props.ShowYAxis,
		ShowXLabels: props.ShowXLabels,
		ShowYLabels: props.ShowYLabels,
		ShowXGrid:   props.ShowXGrid,
		ShowYGrid:   props.ShowYGrid,
		Horizontal:  props.Horizontal,
		Stacked:     props.Stacked,
	}
	}}
	@templ.JSONScript(dataId, chartConfig)
}
