package components

import (
	"github.com/axzilla/templui/utils"
)

type DrawerSide string

const (
	DrawerSideTop    DrawerSide = "top"
	DrawerSideRight  DrawerSide = "right"
	DrawerSideBottom DrawerSide = "bottom"
	DrawerSideLeft   DrawerSide = "left"
)

type DrawerProps struct {
	Side       DrawerSide
	Class      string
	Attributes templ.Attributes
}

type DrawerTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

type DrawerContentProps struct {
	Side       DrawerSide
	Class      string
	Attributes templ.Attributes
}

type DrawerHeaderProps struct {
	Class      string
	Attributes templ.Attributes
}

type DrawerFooterProps struct {
	Class      string
	Attributes templ.Attributes
}

type DrawerTitleProps struct {
	Class      string
	Attributes templ.Attributes
}

type DrawerDescriptionProps struct {
	Class      string
	Attributes templ.Attributes
}

type DrawerCloseProps struct {
	Class      string
	Attributes templ.Attributes
}

templ Drawer(props DrawerProps) {
	@DrawerScript()
	<div
		x-data="drawer"
		@keydown.escape.window="close"
		class={ utils.TwMerge("relative", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DrawerTrigger(props DrawerTriggerProps) {
	<div
		@click="open"
		class={ utils.TwMerge("cursor-pointer", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DrawerContent(props DrawerContentProps) {
	<div
		x-show="isOpen"
		class="fixed inset-0 z-50 bg-background/80 backdrop-blur-xs"
		@click="close"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-300"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
	></div>
	<div
		x-show="isOpen"
		@click.away="close"
		class={
			utils.TwMerge("fixed z-50", props.Class),
			templ.KV("inset-y-0 right-0 w-3/4 md:w-1/2 lg:w-1/3", props.Side == DrawerSideRight),
			templ.KV("inset-y-0 left-0 w-3/4 md:w-1/2 lg:w-1/3", props.Side == DrawerSideLeft),
			templ.KV("inset-x-0 top-0 h-auto sm:h-1/2", props.Side == DrawerSideTop),
			templ.KV("inset-x-0 bottom-0 h-auto sm:h-1/2", props.Side == DrawerSideBottom),
		}
		x-transition:enter="transition ease-out duration-300"
		x-transition:leave="transition ease-in duration-300"
		if props.Side == DrawerSideLeft {
			x-transition:enter-start="opacity-0 transform -translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave-start="opacity-100 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform -translate-x-full"
		}
		if props.Side == DrawerSideRight {
			x-transition:enter-start="opacity-0 transform translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave-start="opacity-100 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform translate-x-full"
		}
		if props.Side == DrawerSideTop {
			x-transition:enter-start="opacity-0 transform -translate-y-full"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			x-transition:leave-start="opacity-100 transform translate-y-0"
			x-transition:leave-end="opacity-0 transform -translate-y-full"
		}
		if props.Side == DrawerSideBottom {
			x-transition:enter-start="opacity-0 transform translate-y-full"
			x-transition:enter-end="opacity-100 transform translate-y-0"
			x-transition:leave-start="opacity-100 transform translate-y-0"
			x-transition:leave-end="opacity-0 transform translate-y-full"
		}
		{ props.Attributes... }
	>
		<div
			class={
				"h-full overflow-y-auto bg-background p-6 shadow-lg",
				templ.KV("border-l", props.Side == DrawerSideRight),
				templ.KV("border-r", props.Side == DrawerSideLeft),
				templ.KV("border-t", props.Side == DrawerSideBottom),
				templ.KV("border-b", props.Side == DrawerSideTop),
			}
			@click.stop
		>
			{ children... }
		</div>
	</div>
}

templ DrawerHeader(props DrawerHeaderProps) {
	<div
		class={ utils.TwMerge("flex flex-col space-y-1.5 pb-4", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DrawerTitle(props DrawerTitleProps) {
	<h2
		class={ utils.TwMerge("text-lg font-semibold leading-none tracking-tight", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</h2>
}

templ DrawerDescription(props DrawerDescriptionProps) {
	<p
		class={ utils.TwMerge("text-sm text-muted-foreground", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</p>
}

templ DrawerFooter(props DrawerFooterProps) {
	<div
		class={ utils.TwMerge("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 pt-4", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DrawerClose(props DrawerCloseProps) {
	<button
		@click="close"
		class={ utils.TwMerge(
			"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background",
			"transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
			"disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent",
			"hover:text-accent-foreground h-10 px-4 py-2",
			props.Class,
		) }
		{ props.Attributes... }
	>
		{ children... }
	</button>
}

templ DrawerScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('drawer', () => ({
					isOpen: false,
					open() {
						this.isOpen = true
					},
					close() {
						this.isOpen = false
					},
				}))
			})
		</script>
	}
}
