package components

import "github.com/axzilla/templui/utils"

// Base component props
type DropdownMenuProps struct {
	Class      string
	Attributes templ.Attributes
}

// Root container for a dropdown menu
templ DropdownMenu(props DropdownMenuProps) {
	<div
		x-data="dropdown"
		class={ utils.TwMerge("relative inline-block text-left", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Trigger props
type DropdownMenuTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

// Element that toggles the dropdown
templ DropdownMenuTrigger(props DropdownMenuTriggerProps) {
	<div
		@click="toggleMenu"
		class={ utils.TwMerge("inline-block", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Content props
type DropdownMenuContentProps struct {
	Width      string
	MaxHeight  string
	Align      string // start, end, center
	Class      string
	Attributes templ.Attributes
}

// The dropdown panel containing the menu items
templ DropdownMenuContent(props DropdownMenuContentProps) {
	<div
		x-ref="menu"
		x-show="isOpen"
		@click.away="closeMenu"
		@keydown.escape.window="closeMenu"
		x-transition:enter="transition ease-out duration-100"
		x-transition:enter-start="transform opacity-0 scale-95"
		x-transition:enter-end="transform opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="transform opacity-100 scale-100"
		x-transition:leave-end="transform opacity-0 scale-95"
		class={ utils.TwMerge(
				"absolute z-50 mt-2 rounded-md shadow-lg bg-popover focus:outline-hidden",
				"border border-border",
				utils.TwIf("overflow-y-auto", props.MaxHeight != ""),
				utils.TwIf("w-56", props.Width == ""),
				utils.TwIf("max-h-[200px]", props.MaxHeight == "200px"),
				utils.TwIf("max-h-[300px]", props.MaxHeight == "300px"),
				utils.TwIf("max-h-[400px]", props.MaxHeight == "400px"),
				utils.TwIf("max-h-[500px]", props.MaxHeight == "500px"),
				utils.TwIf("bottom-full mb-2", props.Align == "top"),
				utils.TwIf("top-full mt-2", props.Align != "top"),
				utils.TwIf("right-0", props.Align == "end"),
				utils.TwIf("left-1/2 -translate-x-1/2", props.Align == "center"),
				utils.TwIf("left-0", props.Align == "start" || props.Align == ""),
				props.Width,
				props.Class,
			) }
		data-align={ props.Align }
		data-max-height={ props.MaxHeight }
		role="menu"
		aria-orientation="vertical"
		tabindex="-1"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Group props
type DropdownMenuGroupProps struct {
	Class      string
	Attributes templ.Attributes
}

// Groups related menu items
templ DropdownMenuGroup(props DropdownMenuGroupProps) {
	<div
		class={ utils.TwMerge("py-1", props.Class) }
		role="group"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Label props
type DropdownMenuLabelProps struct {
	Class      string
	Attributes templ.Attributes
}

// Label for a section of items
templ DropdownMenuLabel(props DropdownMenuLabelProps) {
	<div
		class={ utils.TwMerge("px-3 py-2 text-sm font-semibold", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Item props
type DropdownMenuItemProps struct {
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

// Individual selectable menu item
templ DropdownMenuItem(props DropdownMenuItemProps) {
	<button
		class={ utils.TwMerge(
				"w-full text-left flex items-center justify-between px-3 py-2 text-sm",
				utils.TwIf("text-foreground hover:bg-accent hover:text-accent-foreground", !props.Disabled),
				utils.TwIf("text-muted-foreground cursor-not-allowed", props.Disabled),
				props.Class,
			) }
		role="menuitem"
		disabled?={ props.Disabled }
		{ props.Attributes... }
	>
		{ children... }
	</button>
}

// Link items have href
type DropdownMenuItemLinkProps struct {
	Href       string
	Target     string
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

// Menu item that acts as a link
templ DropdownMenuItemLink(props DropdownMenuItemLinkProps) {
	<a
		href={ templ.SafeURL(props.Href) }
		target={ props.Target }
		class={ utils.TwMerge(
				"block text-left flex items-center px-3 py-2 text-sm",
				utils.TwIf("text-foreground hover:bg-accent hover:text-accent-foreground", !props.Disabled),
				utils.TwIf("text-muted-foreground cursor-not-allowed", props.Disabled),
				props.Class,
			) }
		role="menuitem"
		{ props.Attributes... }
	>
		{ children... }
	</a>
}

// Separator props
type DropdownMenuSeparatorProps struct {
	Class      string
	Attributes templ.Attributes
}

// Visual separator between items
templ DropdownMenuSeparator(props DropdownMenuSeparatorProps) {
	<div
		class={ utils.TwMerge("mx-1 my-1 h-px bg-border", props.Class) }
		role="separator"
		{ props.Attributes... }
	></div>
}

// Shortcut props
type DropdownMenuShortcutProps struct {
	Class      string
	Attributes templ.Attributes
}

// Keyboard shortcut display
templ DropdownMenuShortcut(props DropdownMenuShortcutProps) {
	<span
		class={ utils.TwMerge("ml-auto text-xs tracking-widest text-muted-foreground", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</span>
}

// Sub-menu components
type DropdownMenuSubTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

templ DropdownMenuSubTrigger(props DropdownMenuSubTriggerProps) {
	<div
		class={ utils.TwMerge(
				"w-full text-left flex items-center justify-between px-3 py-2 text-sm",
				"text-foreground hover:bg-accent hover:text-accent-foreground",
				"cursor-pointer",
				props.Class,
			) }
		x-data="submenu"
		@click="toggleSubmenu"
		@mouseenter="openSubmenu"
		@mouseleave="closeSubmenu"
		role="menuitem"
		aria-haspopup="true"
		aria-expanded="false"
		{ props.Attributes... }
	>
		<span>
			{ children... }
		</span>
		<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-auto h-4 w-4"><path d="m9 18 6-6-6-6"></path></svg>
		<div
			x-show="isOpen"
			x-transition:enter="transition ease-out duration-100"
			x-transition:enter-start="transform opacity-0 scale-95"
			x-transition:enter-end="transform opacity-100 scale-100"
			x-transition:leave="transition ease-in duration-75"
			x-transition:leave-start="transform opacity-100 scale-100"
			x-transition:leave-end="transform opacity-0 scale-95"
			class="absolute left-full top-0 z-50 min-w-[8rem] rounded-md border border-border bg-popover p-1 shadow-md ml-[1px]"
		>
			<slot name="submenu"></slot>
		</div>
	</div>
}

// Add the Alpine.js script for dropdown functionality
templ DropdownMenuScript() {
	<script defer nonce={ templ.GetNonce(ctx) }>
		document.addEventListener('alpine:init', () => {
			// Main dropdown functionality
			Alpine.data('dropdown', () => ({
				isOpen: false,
				
				toggleMenu() {
					this.isOpen = !this.isOpen;
				},

				closeMenu() {
					this.isOpen = false;
				}
			}));
			
			// Submenu functionality
			Alpine.data('submenu', () => ({
				isOpen: false,
				
				toggleSubmenu() {
					this.isOpen = !this.isOpen;
				},
				
				openSubmenu() {
					this.isOpen = true;
				},
				
				closeSubmenu() {
					this.isOpen = false;
				}
			}));
		});
	</script>
}
