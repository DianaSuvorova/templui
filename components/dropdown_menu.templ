package components

import (
	"github.com/axzilla/templui/utils"
)

// Base component props
type DropdownMenuProps struct {
	Class      string
	Attributes templ.Attributes
}

// Root container for a dropdown menu
templ DropdownMenu(props DropdownMenuProps) {
	<div
		x-data="dropdown"
		@resize.window="updatePosition"
		class={ utils.TwMerge("relative inline-block text-left", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Trigger props
type DropdownMenuTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

// Element that toggles the dropdown
templ DropdownMenuTrigger(props DropdownMenuTriggerProps) {
	<div
		@click="openMenu"
		class={ utils.TwMerge("inline-block", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Content props
type DropdownMenuContentProps struct {
	Width      string
	Class      string
	Attributes templ.Attributes
}

// The dropdown panel containing the menu items
templ DropdownMenuContent(props DropdownMenuContentProps) {
	<div
		x-ref="menu"
		x-show="isOpen"
		@click.away="setClose"
		@keydown.escape.window="setClose"
		x-transition:enter="transition ease-out duration-100"
		x-transition:enter-start="transform opacity-0 scale-95"
		x-transition:enter-end="transform opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="transform opacity-100 scale-100"
		x-transition:leave-end="transform opacity-0 scale-95"
		class={ utils.TwMerge(
				"absolute z-50 mt-2 rounded-md shadow-lg bg-popover focus:outline-hidden",
				"border border-border",
				utils.TwIfElse(
					props.Width == "",
					"w-56",
				props.Width,
				),
				props.Class,
			) }
		x-bind:class="getPositionClass"
		role="menu"
		aria-orientation="vertical"
		tabindex="-1"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Group props
type DropdownMenuGroupProps struct {
	Class      string
	Attributes templ.Attributes
}

// Groups related menu items
templ DropdownMenuGroup(props DropdownMenuGroupProps) {
	<div
		class={ utils.TwMerge("py-1", props.Class) }
		role="group"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Label props
type DropdownMenuLabelProps struct {
	Class      string
	Attributes templ.Attributes
}

// Label for a section of items
templ DropdownMenuLabel(props DropdownMenuLabelProps) {
	<div
		class={ utils.TwMerge("px-3 py-2 text-sm font-semibold", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Item props
type DropdownMenuItemProps struct {
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

// Individual selectable menu item
templ DropdownMenuItem(props DropdownMenuItemProps) {
	<button
		class={ utils.TwMerge(
				"w-full text-left flex items-center justify-between px-3 py-2 text-sm",
				"text-foreground hover:bg-accent hover:text-accent-foreground",
				utils.TwIf(
					"text-muted-foreground cursor-not-allowed",
					props.Disabled,
				),
				props.Class,
			) }
		role="menuitem"
		disabled?={ props.Disabled }
		{ props.Attributes... }
	>
		{ children... }
	</button>
}

// Link items have href
type DropdownMenuItemLinkProps struct {
	Href       string
	Target     string
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

// Menu item that acts as a link
templ DropdownMenuItemLink(props DropdownMenuItemLinkProps) {
	<a
		href={ templ.SafeURL(props.Href) }
		target={ props.Target }
		class={ utils.TwMerge(
				"block text-left flex items-center px-3 py-2 text-sm",
				"text-foreground hover:bg-accent hover:text-accent-foreground",
				utils.TwIf(
					"text-muted-foreground cursor-not-allowed",
					props.Disabled,
				),
				props.Class,
			) }
		role="menuitem"
		{ props.Attributes... }
	>
		{ children... }
	</a>
}

// Separator props
type DropdownMenuSeparatorProps struct {
	Class      string
	Attributes templ.Attributes
}

// Visual separator between items
templ DropdownMenuSeparator(props DropdownMenuSeparatorProps) {
	<div
		class={ utils.TwMerge("mx-1 my-1 h-px bg-border", props.Class) }
		role="separator"
		{ props.Attributes... }
	></div>
}

// Shortcut props
type DropdownMenuShortcutProps struct {
	Class      string
	Attributes templ.Attributes
}

// Keyboard shortcut display
templ DropdownMenuShortcut(props DropdownMenuShortcutProps) {
	<span
		class={ utils.TwMerge("ml-auto text-xs tracking-widest text-muted-foreground", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</span>
}

// Add the Alpine.js script for dropdown functionality
templ DropdownMenuScript() {
	<script defer nonce={ templ.GetNonce(ctx) }>
		document.addEventListener('alpine:init', () => {
			Alpine.data('dropdown', () => ({
				isOpen: false,
				position: 'bottom-start',
				verticalPosition: 'bottom',

				updatePosition() {
					if (!this.isOpen) return;

					const menu = this.$refs.menu;
					const rect = menu.getBoundingClientRect();
					const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
					const viewportHeight = window.innerHeight || document.documentElement.clientHeight;

					if (rect.right > viewportWidth) {
						this.position = 'bottom-end';
					} else {
						this.position = 'bottom-start';
					}

					if (rect.bottom > viewportHeight) {
						this.verticalPosition = 'top';
					} else {
						this.verticalPosition = 'bottom';
					}
				},

				getPositionClass() {
					const classes = [];
					
					if (this.position === 'bottom-end') {
						classes.push('right-0');
					} else {
						classes.push('left-0');
					}
					
					if (this.verticalPosition === 'top') {
						classes.push('bottom-full mb-2');
					} else {
						classes.push('top-full mt-2');
					}
					
					return classes.join(' ');
				},

				setClose() {
					this.isOpen = false;
				},

				setOpen() {
					this.isOpen = true;
				},

				openMenu() {
					this.isOpen = !this.isOpen;
					if (this.isOpen) {
						this.$nextTick(() => this.updatePosition());
					}
				}
			}));
		});
	</script>
}
