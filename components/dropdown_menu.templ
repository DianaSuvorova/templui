package components

import "github.com/axzilla/templui/utils"

// Props structures moved to the top
type DropdownMenuProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuContentProps struct {
	Width      string
	MaxHeight  string
	Align      string
	Side       string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuGroupProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuLabelProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuItemProps struct {
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuItemLinkProps struct {
	Href       string
	Target     string
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSeparatorProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuShortcutProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSubProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSubTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSubContentProps struct {
	Class      string
	Attributes templ.Attributes
}

// Template implementations follow
templ DropdownMenu(props DropdownMenuProps) {
	<div
		x-data="dropdown"
		class={ utils.TwMerge("relative inline-block text-left", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuTrigger(props DropdownMenuTriggerProps) {
	<div
		@click="toggleMenu"
		class={ utils.TwMerge("inline-block", props.Class) }
		data-trigger
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuContent(props DropdownMenuContentProps) {
	<div
		x-ref="panel"
		x-show="isMenuOpen"
		@click.outside="closeMenu"
		@keydown.escape.window="closeMenu"
		x-transition:enter="transition ease-out duration-100"
		x-transition:enter-start="opacity-0 scale-95"
		x-transition:enter-end="opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="opacity-100 scale-100"
		x-transition:leave-end="opacity-0 scale-95"
		class={ utils.TwMerge(
				"absolute z-50 rounded-md bg-popover p-1 shadow-md focus:outline-none overflow-visible",
				"border border-border",
				"min-w-[8rem]",
				props.Width,
				props.Class,
			) }
		style="top: 100%; margin-top: 0.25rem; left: 0;"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuGroup(props DropdownMenuGroupProps) {
	<div
		class={ utils.TwMerge("py-1", props.Class) }
		role="group"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuLabel(props DropdownMenuLabelProps) {
	<div
		class={ utils.TwMerge("px-2 py-1.5 text-sm font-semibold", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuItem(props DropdownMenuItemProps) {
	<button
		class={ utils.TwMerge(
				"w-full text-left flex items-center justify-between px-2 py-1.5 text-sm rounded-sm",
				utils.TwIf("focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground cursor-default", !props.Disabled),
				utils.TwIf("opacity-50 pointer-events-none", props.Disabled),
				props.Class,
			) }
		role="menuitem"
		disabled?={ props.Disabled }
		{ props.Attributes... }
	>
		{ children... }
	</button>
}

templ DropdownMenuItemLink(props DropdownMenuItemLinkProps) {
	<a
		href={ templ.SafeURL(props.Href) }
		target={ props.Target }
		class={ utils.TwMerge(
				"flex text-left items-center px-2 py-1.5 text-sm rounded-sm",
				utils.TwIf("focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground cursor-default", !props.Disabled),
				utils.TwIf("opacity-50 pointer-events-none", props.Disabled),
				props.Class,
			) }
		role="menuitem"
		{ props.Attributes... }
	>
		{ children... }
	</a>
}

templ DropdownMenuSeparator(props DropdownMenuSeparatorProps) {
	<div
		class={ utils.TwMerge("h-px my-1 bg-muted", props.Class) }
		role="separator"
		{ props.Attributes... }
	></div>
}

templ DropdownMenuShortcut(props DropdownMenuShortcutProps) {
	<span
		class={ utils.TwMerge("ml-auto text-xs tracking-widest opacity-60", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</span>
}

templ DropdownMenuSub(props DropdownMenuSubProps) {
	<div
		x-data="dropdownSubmenu"
		class={ utils.TwMerge("relative", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuSubTrigger(props DropdownMenuSubTriggerProps) {
	<button
		type="button"
		@mouseenter="openSubmenu"
		@focus="openSubmenu"
		@mouseleave="closeSubmenu"
		@blur="closeSubmenu"
		class={ utils.TwMerge(
				"w-full text-left flex items-center justify-between px-2 py-1.5 text-sm rounded-sm",
				"focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground cursor-default",
				"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
				props.Class,
			) }
		{ props.Attributes... }
	>
		<span>
			{ children... }
		</span>
		<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-auto">
			<path d="M6.5 3L11.5 8L6.5 13" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
}

templ DropdownMenuSubContent(props DropdownMenuSubContentProps) {
	<div
		x-show="isSubmenuOpen"
		@mouseenter="openSubmenu"
		@mouseleave="closeSubmenu"
		x-transition:enter="transition ease-out duration-100"
		x-transition:enter-start="opacity-0 -translate-x-2"
		x-transition:enter-end="opacity-100 translate-x-0"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="opacity-100 translate-x-0"
		x-transition:leave-end="opacity-0 -translate-x-2"
		class={ utils.TwMerge(
				"absolute left-full top-0 z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 shadow-lg",
				"ml-1 mt-0 max-h-[var(--radix-dropdown-submenu-content-available-height)]",
				props.Class,
			) }
		data-submenu
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuScript() {
	<script defer nonce={ templ.GetNonce(ctx) }>
		document.addEventListener('alpine:init', () => {
			Alpine.data('dropdown', () => ({
				isMenuOpen: false,
				
				toggleMenu() {
					this.isMenuOpen = !this.isMenuOpen;
					
					if (this.isMenuOpen) {
						this.$nextTick(() => {
							this.adjustPosition();
							window.addEventListener('resize', this.adjustPosition.bind(this));
						});
					} else {
						window.removeEventListener('resize', this.adjustPosition.bind(this));
					}
				},
				
				closeMenu() {
					this.isMenuOpen = false;
					window.removeEventListener('resize', this.adjustPosition.bind(this));
				},
				
				adjustPosition() {
					const panel = this.$refs.panel;
					if (!panel) return;
					
					const viewportHeight = window.innerHeight;
					const viewportWidth = window.innerWidth;
					
					const triggerRect = this.$el.getBoundingClientRect();
					const panelRect = panel.getBoundingClientRect();
					
					panel.style.maxHeight = `${Math.max(100, viewportHeight - triggerRect.bottom - 10)}px`;
					
					if (triggerRect.bottom + panelRect.height > viewportHeight && 
						triggerRect.top > panelRect.height) {
						panel.style.top = 'auto';
						panel.style.bottom = '100%';
						panel.style.marginTop = '0';
						panel.style.marginBottom = '0.25rem';
						
						panel.style.maxHeight = `${Math.max(100, triggerRect.top - 10)}px`;
					} else {
						panel.style.top = '100%';
						panel.style.bottom = 'auto';
						panel.style.marginTop = '0.25rem';
						panel.style.marginBottom = '0';
					}
					
					if (triggerRect.left + panelRect.width > viewportWidth) {
						panel.style.left = 'auto';
						panel.style.right = '0';
					} else {
						panel.style.left = '0';
						panel.style.right = 'auto';
					}
				}
			}));
			
			Alpine.data('dropdownSubmenu', () => ({
				isSubmenuOpen: false,
				hoverTimer: null,
				
				openSubmenu() {
					clearTimeout(this.hoverTimer);
					this.isSubmenuOpen = true;
					
					this.$nextTick(() => {
						this.adjustSubmenuPosition();
					});
				},
				
				closeSubmenu() {
					this.hoverTimer = setTimeout(() => {
						this.isSubmenuOpen = false;
					}, 150);
				},
				
				adjustSubmenuPosition() {
					const submenu = this.$el.querySelector('[data-submenu]');
					if (!submenu) return;
					
					const viewportHeight = window.innerHeight;
					const viewportWidth = window.innerWidth;
					const triggerRect = this.$el.getBoundingClientRect();
					const submenuRect = submenu.getBoundingClientRect();
					
					submenu.style.maxHeight = `${Math.max(100, viewportHeight - submenuRect.top - 10)}px`;
					
					if (triggerRect.right + submenuRect.width > viewportWidth) {
						submenu.style.left = 'auto';
						submenu.style.right = '100%';
						submenu.style.marginLeft = '0';
						submenu.style.marginRight = '0.25rem';
					} else {
						submenu.style.left = '100%';
						submenu.style.right = 'auto'; 
						submenu.style.marginLeft = '0.25rem';
						submenu.style.marginRight = '0';
					}
				}
			}));
		});
	</script>
}
