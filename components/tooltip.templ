package components

import "github.com/axzilla/templui/utils"

type TooltipPosition string

const (
	TooltipPositionTop    TooltipPosition = "top"
	TooltipPositionRight  TooltipPosition = "right"
	TooltipPositionBottom TooltipPosition = "bottom"
	TooltipPositionLeft   TooltipPosition = "left"
)

// Map tooltip positions to popover positions
func mapTooltipPositionToPopover(position TooltipPosition) PopoverPosition {
	switch position {
	case TooltipPositionTop:
		return PopoverTop
	case TooltipPositionRight:
		return PopoverRight
	case TooltipPositionBottom:
		return PopoverBottom
	case TooltipPositionLeft:
		return PopoverLeft
	default:
		return PopoverTop
	}
}

type TooltipProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type TooltipTriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	For        string
}

type TooltipContentProps struct {
	ID            string
	Class         string
	Attributes    templ.Attributes
	ShowArrow     bool
	Position      TooltipPosition
	HoverDelay    int
	HoverOutDelay int
}

templ Tooltip(props ...TooltipProps) {
	@Popover() {
		{ children... }
	}
}

templ TooltipTrigger(props ...TooltipTriggerProps) {
	{{ var p TooltipTriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	@PopoverTrigger(PopoverTriggerProps{
		ID:          p.ID,
		TriggerType: PopoverTriggerTypeHover,
		For:         p.For,
	}) {
		{ children... }
	}
}

templ TooltipContent(props ...TooltipContentProps) {
	{{ var p TooltipContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	@PopoverContent(PopoverContentProps{
		ID:            p.ID,
		Class:         utils.TwMerge("px-4 py-1 bg-foreground text-background", p.Class),
		Attributes:    p.Attributes,
		Position:      mapTooltipPositionToPopover(p.Position),
		ShowArrow:     p.ShowArrow,
		HoverDelay:    p.HoverDelay,
		HoverOutDelay: p.HoverOutDelay,
	}) {
		{ children... }
	}
}
