package components

import "github.com/axzilla/templui/utils"

type TooltipSide string
type TooltipVariant string

const (
	TooltipTop    TooltipSide = "top"
	TooltipRight  TooltipSide = "right"
	TooltipBottom TooltipSide = "bottom"
	TooltipLeft   TooltipSide = "left"
)

const (
	TooltipDefault     TooltipVariant = "default"
	TooltipSecondary   TooltipVariant = "secondary"
	TooltipDestructive TooltipVariant = "destructive"
)

type TooltipProps struct {
	Side       TooltipSide
	Variant    TooltipVariant
	Class      string
	Attributes templ.Attributes
}

type TooltipTriggerProps struct {
	Class      string
	Attributes templ.Attributes
}

type TooltipContentProps struct {
	ShowArrow  bool
	Side       TooltipSide    // Override parent side if needed
	Variant    TooltipVariant // Override parent variant if needed
	Class      string
	Attributes templ.Attributes
}

// Main tooltip container that creates the hover effect
templ Tooltip(props TooltipProps) {
	<div
		class={ utils.TwMerge("relative inline-block group", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// Element that triggers the tooltip
templ TooltipTrigger(props TooltipTriggerProps) {
	<div
		class={ utils.TwMerge("inline-block", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// The actual tooltip content
templ TooltipContent(props TooltipContentProps) {
	// Use provided side/variant or default to parent props
	<div
		class={ utils.TwMerge(
				"absolute w-max z-50 pointer-events-none",
				"text-xs px-4 py-1 rounded-lg",
				"transition-opacity duration-200 delay-500 opacity-0 group-hover:opacity-100",
				"whitespace-nowrap",
				getTooltipSideClass(props.Side),
				getTooltipVariantClass(props.Variant),
				props.Class,
			) }
		{ props.Attributes... }
	>
		if props.ShowArrow {
			<div
				class={ utils.TwMerge(
						"absolute h-2 w-2 rotate-45",
						getArrowClass(props.Side),
						getArrowColor(props.Variant),
					) }
			></div>
		}
		{ children... }
	</div>
}

// Helper functions for class generation
func getTooltipSideClass(side TooltipSide) string {
	switch side {
	case TooltipTop:
		return "bottom-full left-1/2 -translate-x-1/2 mb-2"
	case TooltipRight:
		return "left-full top-1/2 -translate-y-1/2 ml-2"
	case TooltipBottom:
		return "top-full left-1/2 -translate-x-1/2 mt-2"
	case TooltipLeft:
		return "right-full top-1/2 -translate-y-1/2 mr-2"
	default:
		return "bottom-full left-1/2 -translate-x-1/2 mb-2" // Default to top
	}
}

func getTooltipVariantClass(variant TooltipVariant) string {
	switch variant {
	case TooltipDefault:
		return "bg-foreground text-background"
	case TooltipSecondary:
		return "bg-secondary text-secondary-foreground"
	case TooltipDestructive:
		return "bg-destructive text-destructive-foreground"
	default:
		return "bg-foreground text-background" // Default
	}
}

func getArrowClass(side TooltipSide) string {
	switch side {
	case TooltipTop:
		return "bottom-[-4px] left-1/2 -translate-x-1/2"
	case TooltipRight:
		return "left-[-4px] top-1/2 -translate-y-1/2"
	case TooltipBottom:
		return "top-[-4px] left-1/2 -translate-x-1/2"
	case TooltipLeft:
		return "right-[-4px] top-1/2 -translate-y-1/2"
	default:
		return "bottom-[-4px] left-1/2 -translate-x-1/2" // Default to top
	}
}

func getArrowColor(variant TooltipVariant) string {
	switch variant {
	case TooltipDefault:
		return "bg-foreground"
	case TooltipSecondary:
		return "bg-secondary"
	case TooltipDestructive:
		return "bg-destructive"
	default:
		return "bg-foreground" // Default
	}
}
