	

package components

import (
	"github.com/axzilla/templui/icons"
	"github.com/axzilla/templui/utils"
	"strconv"
)

type SelectProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type SelectTriggerProps struct {
	ID         string
	Name       string
	Required   bool
	Disabled   bool
	HasError   bool
	Class      string
	Attributes templ.Attributes
}

type SelectValueProps struct {
	Placeholder string
	Class       string
	Attributes  templ.Attributes
}

type SelectContentProps struct {
	Class      string
	Attributes templ.Attributes
}

type SelectGroupProps struct {
	Class      string
	Attributes templ.Attributes
}

type SelectLabelProps struct {
	Class      string
	Attributes templ.Attributes
}

type SelectItemProps struct {
	Value      string
	Selected   bool
	Disabled   bool
	Class      string
	Attributes templ.Attributes
}

templ Select(props SelectProps) {
	<div
		class={ utils.TwMerge("w-full select-container relative", props.Class) }
		data-select-id={ props.ID }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ SelectTrigger(props SelectTriggerProps) {
	<button
		type="button"
		id={ props.ID }
		class={ utils.TwMerge(
		"select-trigger flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background",
		"placeholder:text-muted-foreground",
		"focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
		"disabled:cursor-not-allowed disabled:opacity-50",
		utils.TwIf("border-destructive ring-destructive", props.HasError),
		props.Class,
	) }
		aria-haspopup="listbox"
		aria-expanded="false"
		required?={ props.Required }
		disabled?={ props.Disabled }
		data-select-trigger="true"
		tabindex="0"
		{ props.Attributes... }
	>
		<input type="hidden" name={ props.Name }/>
		{ children... }
		<span class="pointer-events-none ml-1">
			@icons.ChevronDown(icons.IconProps{
				Size:  "16",
				Class: "text-muted-foreground",
			})
		</span>
	</button>
}

templ SelectValue(props SelectValueProps) {
	<span
		class={ utils.TwMerge("block truncate select-value text-muted-foreground", props.Class) }
		{ props.Attributes... }
	>
		{ props.Placeholder }
		{ children... }
	</span>
}

templ SelectContent(props SelectContentProps) {
	<div
		class={ utils.TwMerge(
			"p-1 select-content absolute z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border bg-popover text-popover-foreground shadow-md",
			"transition-all ease-out duration-100",
			"transform opacity-0 -translate-y-1 scale-95", // Start-Zustand
			props.Class,
		) }
		style="display: none;"
		role="listbox"
		tabindex="-1"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ SelectGroup(props SelectGroupProps) {
	<div
		class={ utils.TwMerge("p-1", props.Class) }
		role="group"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ SelectLabel(props SelectLabelProps) {
	<span
		class={ utils.TwMerge("px-2 py-1.5 text-sm font-medium", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</span>
}

templ SelectItem(props SelectItemProps) {
	<div
		class={ utils.TwMerge(
			"select-item relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 px-2 text-sm font-light outline-none",
			"hover:bg-accent hover:text-accent-foreground",
			"focus:bg-accent focus:text-accent-foreground",
			utils.TwIf("bg-accent text-accent-foreground", props.Selected),
			utils.TwIf("pointer-events-none opacity-50", props.Disabled),
			props.Class,
		) }
		role="option"
		data-value={ props.Value }
		data-selected={ strconv.FormatBool(props.Selected) }
		data-disabled={ strconv.FormatBool(props.Disabled) }
		tabindex="0"
		{ props.Attributes... }
	>
		<span class="truncate select-item-text">
			{ children... }
		</span>
		<span
			class={ utils.TwMerge(
					"select-check absolute right-2 flex h-3.5 w-3.5 items-center justify-center",
					utils.TwIfElse(props.Selected, "opacity-100", "opacity-0"),
					) }
		>
			@icons.Check(icons.IconProps{Size: "16"})
		</span>
	</div>
}

templ SelectScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', function() {
				// Find all Select containers
				document.querySelectorAll('.select-container').forEach(function(selectContainer) {
					const id = selectContainer.getAttribute('data-select-id');
					const trigger = selectContainer.querySelector('.select-trigger');
					const content = selectContainer.querySelector('.select-content');
					const valueEl = selectContainer.querySelector('.select-value');
					const hiddenInput = selectContainer.querySelector('input[type="hidden"]');
					let isOpen = false;
					
					// Initialize selected value
					let selectedItem = selectContainer.querySelector('.select-item[data-selected="true"]');
					
					// If no item is selected, mark the first one as pre-selected (just visually)
					if (!selectedItem) {
						const firstItem = selectContainer.querySelector('.select-item');
						if (firstItem) {
							firstItem.classList.add('bg-muted'); // Add a subtle gray background
						}
					}
					
					// Update values if an item is actually selected
					if (selectedItem && valueEl) {
						const itemText = selectedItem.querySelector('.select-item-text');
						if (itemText) {
							valueEl.textContent = itemText.textContent;
							valueEl.classList.remove('text-muted-foreground');
						}
						if (hiddenInput) {
							hiddenInput.value = selectedItem.getAttribute('data-value');
						}
					}
					
					// Connect label click to the correct select
					if (id) {
						document.querySelectorAll(`label[for="${id}"]`).forEach(label => {
							label.addEventListener('click', function(e) {
								e.preventDefault();
								const targetContainer = document.querySelector(`.select-container[data-select-id="${id}"]`);
								if (targetContainer) {
									const targetTrigger = targetContainer.querySelector('.select-trigger');
									if (targetTrigger && !targetTrigger.disabled) {
										targetTrigger.click();
										targetTrigger.focus();
									}
								}
							});
						});
					}
					
					// Toggle dropdown with elegant transitions
					if (trigger) {
						// Prevent focus ring on mousedown
						trigger.addEventListener('mousedown', function(e) {
							if (e.button === 0) {
								this.style.outline = 'none';
								this.style.boxShadow = 'none';
							}
						});
						
						trigger.addEventListener('click', function() {
							if (this.disabled) return;
							
							isOpen = !isOpen;
							this.setAttribute('aria-expanded', isOpen.toString());
							
							if (isOpen) {
								// Show dropdown
								content.style.display = 'block';
								// Force reflow
								void content.offsetHeight;
								// Apply animation end state
								content.classList.remove('opacity-0', '-translate-y-1', 'scale-95');
								content.classList.add('opacity-100', 'translate-y-0', 'scale-100');
							} else {
								// Start closing animation
								content.classList.remove('opacity-100', 'translate-y-0', 'scale-100');
								content.classList.add('opacity-0', '-translate-y-1', 'scale-95');
								
								// Hide after animation completes
								setTimeout(function() {
									if (!isOpen) { // Double-check state hasn't changed
										content.style.display = 'none';
									}
								}, 100); // Match duration from CSS
								
								// Reset focus styles
								this.style.outline = '';
								this.style.boxShadow = '';
								this.focus();
							}
						});
						
						// Keyboard navigation
						trigger.addEventListener('keydown', function(e) {
							if ((e.key === 'Enter' || e.key === ' ') && !this.disabled) {
								e.preventDefault();
								this.click();
							} else if ((e.key === 'Escape' || e.key === 'Tab') && isOpen) {
								e.preventDefault();
								this.click(); // Close dropdown
							}
						});
					}
					
					// Handle item selection
					selectContainer.querySelectorAll('.select-item').forEach(function(item) {
						item.addEventListener('click', function() {
							if (this.getAttribute('data-disabled') === 'true') return;
							
							// Get data
							const value = this.getAttribute('data-value');
							const itemText = this.querySelector('.select-item-text');
							
							// Reset selection state
							selectContainer.querySelectorAll('.select-item').forEach(el => {
								el.setAttribute('data-selected', 'false');
								el.classList.remove('bg-accent', 'text-accent-foreground', 'bg-muted');
								const check = el.querySelector('.select-check');
								if (check) check.classList.replace('opacity-100', 'opacity-0');
							});
							
							// Set new selection
							this.setAttribute('data-selected', 'true');
							this.classList.add('bg-accent', 'text-accent-foreground');
							const check = this.querySelector('.select-check');
							if (check) check.classList.replace('opacity-0', 'opacity-100');
							
							// Update UI
							if (valueEl && itemText) {
								valueEl.textContent = itemText.textContent;
								valueEl.classList.remove('text-muted-foreground');
							}
							
							// Update hidden input
							if (hiddenInput && value) {
								hiddenInput.value = value;
								hiddenInput.dispatchEvent(new Event('change', {bubbles: true}));
							}
							
							// Close dropdown elegantly
							isOpen = false;
							content.classList.remove('opacity-100', 'translate-y-0', 'scale-100');
							content.classList.add('opacity-0', '-translate-y-1', 'scale-95');
							
							setTimeout(function() {
								if (!isOpen) {
									content.style.display = 'none';
								}
							}, 100);
							
							trigger.setAttribute('aria-expanded', 'false');
							trigger.style.outline = '';
							trigger.style.boxShadow = '';
							trigger.focus();
						});
						
						// Keyboard selection
						item.addEventListener('keydown', function(e) {
							if (e.key === 'Enter' || e.key === ' ') {
								e.preventDefault();
								this.click();
							}
						});
					});
					
					// Close on outside click
					document.addEventListener('click', function(e) {
						if (isOpen && !selectContainer.contains(e.target)) {
							isOpen = false;
							
							// Close with animation
							content.classList.remove('opacity-100', 'translate-y-0', 'scale-100');
							content.classList.add('opacity-0', '-translate-y-1', 'scale-95');
							
							setTimeout(function() {
								if (!isOpen) {
									content.style.display = 'none';
								}
							}, 100);
							
							trigger.setAttribute('aria-expanded', 'false');
							trigger.style.outline = '';
							trigger.style.boxShadow = '';
						}
					});
				});
			});
		</script>
	}
}
