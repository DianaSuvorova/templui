package components

import (
	"github.com/axzilla/templui/icons"
	"strconv"
)

type ToastVariant string

const (
	ToastVariantDefault ToastVariant = "default"
	ToastVariantSuccess ToastVariant = "success"
	ToastVariantError   ToastVariant = "error"
	ToastVariantWarning ToastVariant = "warning"
	ToastVariantInfo    ToastVariant = "info"
)

type ToastProps struct {
	Text        string
	Variant     ToastVariant
	Position    string
	Duration    int
	Dismissible bool
	Size        string
	Icon        bool
}

func (p ToastProps) withDefaults() ToastProps {
	if p.Text == "" {
		p.Text = "Notification"
	}
	if p.Variant == "" {
		p.Variant = ToastVariantDefault
	}
	if p.Position == "" {
		p.Position = "bottom-right"
	}
	if p.Duration == 0 {
		p.Duration = 3000
	}
	if p.Size == "" {
		p.Size = "md"
	}
	return p
}

templ ToastScript() {
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>	
			document.addEventListener('alpine:init', () => {
				Alpine.data('toast', () => ({
					show: true,
					duration: 0,
					timer: null,

					init() {
						this.duration = parseInt(this.$el.dataset.duration || 0);
						this.startTimer();

						if (this.duration > 0) {
							const progress = this.$refs.progress;
							if (progress) {
								progress.style.transition = `width ${this.duration}ms linear`;
								progress.style.width = '100%';
								setTimeout(() => {
									progress.style.width = '0%';
								}, 10);
							}
						}
					},

					startTimer() {
						if (this.duration <= 0) return;
						this.timer = setTimeout(() => {
							this.show = false;
						}, this.duration);
					},

					pauseTimer() {
						if (this.timer) clearTimeout(this.timer);
						const progress = this.$refs.progress;
						if (progress) {
							const width = progress.getBoundingClientRect().width;
							const total = progress.parentElement.getBoundingClientRect().width;
							this.duration = (width / total) * this.duration;
							progress.style.transition = "none";
							progress.style.width = width + "px";
						}
					},

					resumeTimer() {
						const progress = this.$refs.progress;
						if (progress) {
							progress.style.transition = "width " + this.duration + "ms linear";
							progress.style.width = "0";
							this.startTimer();
						}
					},

					dismissToast() {
						this.show = false;
					}
				}))
			})
		</script>
	}
}

templ Toast(props ToastProps) {
	{{ props = props.withDefaults() }}
	<div
		data-duration={ strconv.Itoa(props.Duration) }
		x-data="toast"
		@mouseenter="pauseTimer"
		@mouseleave="resumeTimer"
		x-show="show"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 translate-y-4"
		x-transition:enter-end="opacity-100 translate-y-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100 translate-y-0"
		x-transition:leave-end="opacity-0 translate-y-4"
		class={
			"z-50 fixed pointer-events-auto",
			templ.KV("top-4 right-4", props.Position == "top-right"),
			templ.KV("top-4 left-4", props.Position == "top-left"),
			templ.KV("top-4 left-1/2 -translate-x-1/2", props.Position == "top-center"),
			templ.KV("bottom-4 right-4", props.Position == "bottom-right"),
			templ.KV("bottom-4 left-4", props.Position == "bottom-left"),
			templ.KV("bottom-4 left-1/2 -translate-x-1/2", props.Position == "bottom-center"),
			templ.KV("w-72", props.Size == "sm"),
			templ.KV("w-96", props.Size == "md"),
			templ.KV("w-[30rem]", props.Size == "lg"),
		}
	>
		<div class="bg-primary-foreground rounded-lg shadow-xs border pt-5 pb-4 px-4 flex items-center justify-center relative overflow-hidden">
			if props.Duration > 0 {
				<div class="absolute top-0 left-0 right-0 h-1">
					<div
						x-ref="progress"
						class={
							"absolute inset-0",
							toastTypeClass(props.Variant),
						}
					></div>
				</div>
			}
			if props.Icon {
				if props.Variant == ToastVariantSuccess {
					@icons.CircleCheck(icons.IconProps{Size: "18", Class: "text-green-500 mr-3"})
				}
				if props.Variant == ToastVariantError {
					@icons.CircleX(icons.IconProps{Size: "18", Class: "text-red-500 mr-3"})
				}
				if props.Variant == ToastVariantWarning {
					@icons.TriangleAlert(icons.IconProps{Size: "18", Class: "text-yellow-500 mr-3"})
				}
				if props.Variant == ToastVariantInfo {
					@icons.Info(icons.IconProps{Size: "18", Class: "text-blue-500 mr-3"})
				}
			}
			<div class="flex-1">{ props.Text }</div>
			if props.Dismissible {
				<button
					@click="dismissToast"
					@mouseenter.stop
					@mouseleave.stop
					type="button"
				>
					@icons.X(icons.IconProps{
						Size:  "18",
						Class: "opacity-75 hover:opacity-100",
					})
				</button>
			}
		</div>
	</div>
}

func toastTypeClass(t ToastVariant) string {
	switch t {
	case ToastVariantDefault:
		return "bg-gray-500"
	case ToastVariantSuccess:
		return "bg-green-500"
	case ToastVariantError:
		return "bg-red-500"
	case ToastVariantWarning:
		return "bg-yellow-500"
	case ToastVariantInfo:
		return "bg-blue-500"
	default:
		return ""
	}
}
