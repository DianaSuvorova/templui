package components

type LabelProps struct {
	ID            string
	For           string
	Text          string
	Error         string
	Class         string
	DisabledClass string
}

templ LabelScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('label', () => ({
					getClass() {
						if (this.$refs[this.$el.getAttribute('for')]?.disabled ) {
							return this.$el.dataset.disabledStyle
						}
					}
				}));
			});
		</script>
	}
}

templ Label(props LabelProps) {
	<label
		x-data="label"
		id={ props.ID }
		for={ props.For }
		class={
			"text-sm font-medium leading-none inline-block",
			templ.KV("text-destructive", len(props.Error) > 0),
			props.Class,
		}
		if props.DisabledClass != "" {
			data-disabled-style={ props.DisabledClass }
		} else {
			data-disabled-style="opacity-50 cursor-not-allowed"
		}
		x-bind:class="getClass"
	>
		{ props.Text }
	</label>
}
